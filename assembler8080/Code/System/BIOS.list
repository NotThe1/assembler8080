0001: 0000                ;	Pages 165/493 &  204/493  Programmers CPM Handbook by Andy Johnston-Laird
0002: 0000                					               
0003: 0000                                    
0004: 0000                INopCode	EQU		0DBH  
0005: 0000                OUTopCode	EQU		0D3H 
0006: 0000                                    
0007: 0000                SPACE		EQU		020H	; blank
0008: 0000                SLASH		EQU		02FH	; /
0009: 0000                                    
0010: 0000                CR			EQU		0DH		; Carriage Return
0011: 0000                LF			EQU		0AH		; Line Feed
0012: 0000                EndOfMessage	EQU	00H
0013: 0000                                    
0014: 0000                ; programmers CPM Handbook by Andy Johnson
0015: 0000                                    
0016: 0000                                    
0017: 0000                VERSION		EQU		'0A'		;Equates for the sign-on Screen
0018: 0000                MONTH		EQU		'08'		; '08'
0019: 0000                DAY			EQU		'25'		; '09'
0020: 0000                Year		EQU		'45'		; '15'
0021: 0000                                    
0022: 0000                MemorySize	EQU 64   
0023: 0000                                    
0024: 0000                CCPLength	EQU 0800H	; Constant
0025: 0000                BDOSLength	EQU 0E00H	; Constant	0E00H
0026: 0000                BIOSLength	EQU 0A00H	; Constant 0900H
0027: 0000                                    
0028: 0000                LengthInK	EQU ((CCPLength + BDOSLength + BIOSLength) /1024) + 1
0029: 0000                LengthInBytes	EQU (CCPLength + BDOSLength + BIOSLength)
0030: 0000                                    
0031: 0000                                    
0032: 0000                ;CCPEntry	EQU	((MemorySize - LengthInK) * (0 + 1024))
0033: 0000                CCPEntry	EQU 0E000H		; forced calculation
0034: 0000                                    
0035: 0000                BDOSEntry	EQU	CCPEntry + CCPLength + 6
0036: 0000                BIOSEntry	EQU	CCPEntry + CCPLength + BDOSLength
0037: 0000                                    
0038: 0000                                    
0039: 0000                ;;;	DefaultDisk	EQU	0004H
0040: 0000                PageZero:	ORG 0000H		; Start of page Zero
0041: 0000     C303F6     	JMP		WarmBootEntry	; warm start
0042: 0003                IOBYTE:             
0043: 0003     01         	DB		01H				; IOBYTE- Console is assigned the CRT device
0044: 0004                DefaultDisk:        
0045: 0004     00         	DB		00H				; Current default drive (A)
0046: 0005     C306E8     	JMP		BDOSEntry		; jump to BDOS entry
0047: 0008                	DS		028H			; interrupt locations 1-5 not used
0048: 0030                	DS		008H			; interrupt location 6 is reserved
0049: 0038     C30000     	JMP		0000H			; rst 7 used only by DDT & SID programs
0050: 003B                	DS		005H			; not currently used
0051: 0040                	DS		010H			; reserved for scratch by CBIOS- not used by CP/M
0052: 0050                	DS		00CH			; not currently used
0053: 005C                FCB:                
0054: 005C                	DS		021H			; Default FCB for transient programs
0055: 007D                RandomRecordPosition:
0056: 007D                	DS		003H			; optional random record position
0057: 0080                DefaultDiskBuffer:  
0058: 0080                	DS		080H			; default 128- byte disk buffer,
0059: 0100                							; also filled with the command line from CCP
0060: 0100                	                   
0061: 0100                                    
0062: 0100                                    
0063: 0100                	ORG		BIOSEntry		; Assemble code at BIOS address
0064: F600                CodeStart:		        
0065: F600                		; BIOS jum Vector 
0066: F600                		                  
0067: F600     C3F9F6     	JMP	BOOT			; 00 Checked
0068: F603                WarmBootEntry:      
0069: F603     C325FE     	JMP	WBOOT			; 01 Checked
0070: F606     C362F8     	JMP	CONST			; 02 Checked
0071: F609     C378F8     	JMP	CONIN			; 03 Checked
0072: F60C     C386F8     	JMP	CONOUT			; 04 Checked
0073: F60F     C3ACF8     	JMP	LIST			; 05 Not Yet Checked
0074: F612     C3BCF8     	JMP	PUNCH			; 06 Not Yet Checked
0075: F615     C3CDF8     	JMP	READER			; 07 Not Yet Checked
0076: F618     C3D3FB     	JMP	HOME			; 08 Not Yet Checked			302		FBD3
0077: F61B     C32BFB     	JMP	SELDSK			; 09 Checked	
0078: F61E     C358FB     	JMP	SETTRK			; 0A Checked
0079: F621     C35EFB     	JMP	SETSEC			; 0B Checked			221		FB5E
0080: F624     C365FB     	JMP	SETDMA			; 0C Checked			230		FB65
0081: F627     C3FBFB     	JMP	READ			; 0D Not Yet Checked			398		FBFB
0082: F62A     C315FC     	JMP	WRITE			; 0E Not Yet Checked			426		FC15
0083: F62D     C394F8     	JMP	LISTST			; 0F Not Yet Checked
0084: F630     C3CDFB     	JMP	SECTRAN			; 10 Not Yet Checked
0085: F633                	                   
0086: F633                PhysicalSectorSize	EQU	512			; for the 5.25" disk the 8" size is 128, 
0087: F633                DiskBuffer:         
0088: F633                	DS	PhysicalSectorSize	
0089: F833                AfterDiskBuffer		EQU	$
0090: F833                                    
0091: F833                		ORG		DiskBuffer		; wind the location counter back
0092: F633                                    
0093: F633                InitializeStream:		; used by the initialization subroutine. Layout:
0094: F633                						;	DB	Port number to be initialized
0095: F633                						;	DB	Number of bytes to be output
0096: F633                						;	DB	xx.xx.xx.xx.xx.xx data to be output
0097: F633                						;	:           
0098: F633                						;	:           
0099: F633                						;	DB	Port numbe of 00H terminator
0100: F633                						;	Console does not need to be initalized. it was done in the PROM
0101: F633                                    
0102: F633     00         		DB	00H			; no setup needed !!CommunicationStatusPort	; intel 8251 ?
0103: F634     06         		DB	06H		; number of bytes
0104: F635     00         		DB	0		; get chip ready by sending data out to it
0105: F636     00         		DB	0              
0106: F637     00         		DB	0              
0107: F638     42         		DB	042H;	; Reset and raise data terminal ready
0108: F639     6E         		DB	06Eh	; 1 stop bit, no parity, 8bits/char baud rate / 16
0109: F63A     25         		DB	025H	;Raise request to send, and enable transmit and receive
0110: F63B                		                  
0111: F63B     DF         		DB	CommunicationBaudMode;	Intel 8253 time
0112: F63C     01         		DB	01H		; number of bytes
0113: F63D     B6         		DB	0B6H	; select counter2, load LS Byte
0114: F63E                		                  
0115: F63E     DE         		DB	CommunicationBaudRate
0116: F63F     02         		DB	02H		; number of bytes
0117: F640     3800       		DW	0038H	; 1200 baud rate
0118: F642                		                  
0119: F642     00         		DB	0		; port number of 0 terminates
0120: F643                		                  
0121: F643                                    
0122: F643                                    
0123: F643                SignOnMessage:		; Main sign on message
0124: F643     43502F4D20322E322E 		DB	'CP/M 2.2.'    
0125: F64C                ;		DB	'(2.2.)'      
0126: F64C     4130       		DW	VERSION        
0127: F64E     20         		DB	SPACE          
0128: F64F     3830       		DW	MONTH          
0129: F651     2F         		DB	SLASH			; /    
0130: F652     3532       		DW	DAY            
0131: F654     2F         		DB	SLASH			; /    
0132: F655     3534       		DW	YEAR           
0133: F657     0D0A0A     		DB	CR,LF,LF       
0134: F65A                		                  
0135: F65A     53494D504C452042494F530D0A0A 		DB	'Simple BIOS',CR,LF,LF
0136: F668     4449534B20434F4E46494755524154494F4E203A0D0A0A 		DB	'Disk Configuration :',CR,LF,LF	
0137: F67F                                    
0138: F67F     2020202020413A20302E3335204D4259544520352220464C4F5050590D0A 		DB	'     A: 0.35 MByte 5" Floppy',CR,LF
0139: F69D     2020202020423A20302E3335204D4259544520352220464C4F5050590D0A0A 		DB	'     B: 0.35 MByte 5" Floppy',CR,LF,LF
0140: F6BC     2020202020433A20302E3234204D4259544520382220464C4F5050590D0A 		DB	'     C: 0.24 MByte 8" Floppy',CR,LF
0141: F6DA     2020202020443A20302E3234204D4259544520382220464C4F5050590D0A 		DB	'     D: 0.24 MByte 8" Floppy',CR,LF
0142: F6F8                                    
0143: F6F8                		                  
0144: F6F8     00         		DB	EndOfMessage   
0145: F6F9                		                  
0146: F6F9                	                   
0147: F6F9                ;219--------------------BOOT-----------------------------	
0148: F6F9                	                   
0149: F6F9                	BOOT:		; entered directly from the BIOS JMP vector
0150: F6F9                				; Control transfered by the CP/M bootstrap loader
0151: F6F9                				; initial state will be determined by the PROM
0152: F6F9                				                
0153: F6F9                				; setting up 8251 & 8253 --
0154: F6F9     F3         	DI                 
0155: F6FA                					; on this system the console is already initialized so the
0156: F6FA                					; InitializeStream is not used here
0157: F6FA     2133F6     	LXI		H,InitializeStream		;HL-> Data stream for port initialization (none here)
0158: F6FD                InitializeLoop:     
0159: F6FD     7E         	MOV		A,M					; get port #
0160: F6FE     B7         	ORA		A					; if 00H then done
0161: F6FF     CA13F7     	JZ		InitializeComplete
0162: F702                	                   
0163: F702     320AF7     	STA		InitializePort		; set up OUT instruction
0164: F705     23         	INX		H					; HL -> count # of bytes to output
0165: F706     4E         	MOV		C,M					; get byte count
0166: F707                InitializeNextByte: 
0167: F707     23         	INX		H	            
0168: F708     7E         	MOV		A,M					; get next byte
0169: F709     D3         	DB		OUTopCode			; OUT instruction output to correct port
0170: F70A                InitializePort:     
0171: F70A     00         	DB		0					; set by above code (self modifying code!!!!!)
0172: F70B     0D         	DCR		C					; Count down
0173: F70C     C207F7     	JNZ		InitializeNextByte
0174: F70F     23         	INX		H					; HL-> next port number
0175: F710     C3FDF6     	JMP		InitializeLoop		; go back for more
0176: F713                ;----------- above not needed with the console ------------------------	
0177: F713                                    
0178: F713                InitializeComplete: 
0179: F713     3E01       	MVI		A,01H				; set up for terminal to be console
0180: F715     320300     	STA		IOBYTE				; save in Page 0
0181: F718     2143F6     	LXI		H,SignonMessage
0182: F71B     CD33F8     	CALL	DisplayMessage		; display the signon message
0183: F71E                	                   
0184: F71E     AF         	XRA		A					; Set default disk to A: (0)
0185: F71F     320400     	STA		DefaultDisk   
0186: F722     FB         	EI							; enable the interrupts
0187: F723                	                   
0188: F723     C340F8     	JMP		EnterCPM			; Complete initialization and enter CP/M
0189: F726                								; by going to the Console Command Processor
0190: F726                ;271---------------End of Cold Boot Initialization Code--------------
0191: F726                                    
0192: F726                		ORG AfterDiskBuffer		; reset Location Counter
0193: F833                		                  
0194: F833                		                  
0195: F833                						; HL points at a Zero-Byte terminated string to be output
0196: F833                DisplayMessage:     
0197: F833     7E         	MOV		A,M					; get next message byte
0198: F834     B7         	ORA		A					; terminator (a = 0)?
0199: F835     C8         	RZ							; Yes, thes return to caller
0200: F836                	                   
0201: F836     4F         	MOV		C,A					; prepare for output
0202: F837     E5         	PUSH	HL					; save message pointer
0203: F838     CD86F8     	CALL	CONOUT				; go to main console output routine	*******
0204: F83B     E1         	POP		H             
0205: F83C     23         	INX		H 					; point at next character
0206: F83D     C333F8     	JMP		DisplayMessage		; loop till done
0207: F840                	                   
0208: F840                EnterCPM:           
0209: F840     3EC3       	MVI		A,0C3H				; JMP op code
0210: F842     320000     	STA		0000H				; set up the jump in location 0000H
0211: F845     320500     	STA		0005H				; and at location 0005H
0212: F848                	                   
0213: F848     2103F6     	LXI		H,WarmBootEntry		; get BIOS vector address
0214: F84B     220100     	SHLD	0001H				; put address in location 1
0215: F84E                	                   
0216: F84E     2106E8     	LXI		H,BDOSEntry			; Get BDOS entry point address
0217: F851     220600     	SHLD	0006H				; put address at location 5
0218: F854                	                   
0219: F854     018000     	LXI		B,DefaultDiskBuffer	; set disk I/O address to default
0220: F857     CD65FB     	CALL	SETDMA				; use normal BIOS routine		****************************************************************
0221: F85A                	                   
0222: F85A     FB         	EI                 
0223: F85B     3A0400     	LDA		DefaultDisk		; Transfer current default disk to
0224: F85E     4F         	MOV		C,A				; Console Command Processor
0225: F85F     C300E0     	JMP		CCPEntry		; transfer to CCP
0226: F862                		                  
0227: F862                		                  
0228: F862                		                  
0229: F862                ;IOBYTE	EQU		0003H		;I/O redirection byte
0230: F862                                    
0231: F862                ;333--------------------CONST----------------------------
0232: F862                	; Entered directly from BIOS JMP vector, returns Register A
0233: F862                	; 00H -> No data   
0234: F862                	; 0FFH -> there is data
0235: F862                CONST:              
0236: F862     CD6AF8     	CALL	GetConsoleStatus	; return A= zero or not zero
0237: F865     B7         	ORA		A             
0238: F866     C8         	RZ							; if 0 no returning data
0239: F867     3EFF       	MVI		A,0FFH				; else indicate there is data
0240: F869     C9         	RET                
0241: F86A                	                   
0242: F86A                GetConsoleStatus:   
0243: F86A     3A0300     	LDA		IOBYTE		; Get IO redirection byte
0244: F86D     CDDCF8     	CALL	SelectRoutine	; these routines return to the caller of GetConsoleStatus
0245: F870     F6F8       	DW		TTYInStatus				; 00  <- IOBYTE bits 1,0
0246: F872     FCF8       	DW		TerminalInStatus		; 01
0247: F874     02F9       	DW		CommunicationInStatus	; 10
0248: F876     08F9       	DW		DummyInStatus			; 11
0249: F878                	                   
0250: F878                CONIN:              
0251: F878                	; Get console Input character entered directly from the BIOS jmp Vector
0252: F878                	; return the character from the console in the A register.
0253: F878                	; most significant bit will be 0. except when "reader" (communication)
0254: F878                	; port has input , all 8 bits are reurned
0255: F878                	;                  
0256: F878                	; normally this follows a call to CONST ( a blocking call) to indicates a char is ready.
0257: F878     3A0300     	LDA		IOBYTE				; get i/o redirection byte
0258: F87B     CDDCF8     	CALL 	SelectRoutine
0259: F87E                			; Vectors to device routines
0260: F87E     20F9       	DW		TTYInput			; 00 <- IOBYTE bits 1,0
0261: F880     26F9       	DW		TerminalInput		; 01
0262: F882     2FF9       	DW		CommunicationInput	; 10
0263: F884     35F9       	DW		DummyInput			; 11
0264: F886                	                   
0265: F886                CONOUT:             
0266: F886                	; Console output, entered directly from BIOS JMP Vector. it outputs the 
0267: F886                	; character in the C register to the appropriate device according to
0268: F886                	; bits 1,0 of IOBYTE
0269: F886     3A0300     	LDA		IOBYTE				; get i/o redirection byte
0270: F889     CDDCF8     	CALL 	SelectRoutine
0271: F88C                			; Vectors to device routines
0272: F88C     38F9       	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0273: F88E     3EF9       	DW		TerminalOutput		; 01
0274: F890     44F9       	DW		CommunicationOutput	; 10
0275: F892     4AF9       	DW		DummyOutput			; 11
0276: F894                	                   
0277: F894                LISTST:             
0278: F894                	; List Device (output) status entered directly from the BIOS JMP Vector
0279: F894                	; returns in A the list device status that indicates if the device will
0280: F894                	; accept another character the IOBYTE's bits 7,6 determin the physical device
0281: F894                	; A = 00H (zero flag set): cannot accpet data
0282: F894                	; A = 0FFH ( zero flag cleared): can accept data
0283: F894     CD9CF8     	CALL	GetListStatus	; return  A = 0 or non-zero	
0284: F897     B7         	ORA		A				; set flags
0285: F898     C8         	RZ						; exit if not ready
0286: F899     3EFF       	MVI		a,0FFH			; else set retuen value for ok
0287: F89B     C9         	RET	               
0288: F89C                	; exit             
0289: F89C                GetListStatus:      
0290: F89C     3A0300     	LDA		IOBYTE        
0291: F89F     07         	RLC						; move bits 7,6
0292: F8A0     07         	RLC						; to 1,0  
0293: F8A1     CDDCF8     	CALL	SelectRoutine 
0294: F8A4     0BF9       	DW		TTYOutStatus			; 00 <- IOBYTE bits 1,0
0295: F8A6     11F9       	DW		TerminalOutStatus		; 01
0296: F8A8     17F9       	DW		CommunicationOutStatus	; 10
0297: F8AA     1DF9       	DW		DummyOutStatus			; 11
0298: F8AC                	                   
0299: F8AC                LIST:					; List output
0300: F8AC                						; entered directly from the BIOS JMP Vector
0301: F8AC                						; outputs the data in Register C
0302: F8AC     3A0300     	LDA		IOBYTE        
0303: F8AF     07         	RLC						; move bits 7,6
0304: F8B0     07         	RLC						; to 1,0  
0305: F8B1     CDDCF8     	CALL	SelectRoutine 
0306: F8B4     38F9       	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0307: F8B6     3EF9       	DW		TerminalOutput		; 01
0308: F8B8     44F9       	DW		CommunicationOutput	; 10
0309: F8BA     4AF9       	DW		DummyOutput			; 11
0310: F8BC                	                   
0311: F8BC                PUNCH:					; Punch output
0312: F8BC                						; entered directly from the BIOS JMP Vector
0313: F8BC                						; outputs the data in Register C
0314: F8BC     3A0300     	LDA		IOBYTE        
0315: F8BF     07         	RLC						; move bits 5,4
0316: F8C0     07         	RLC                
0317: F8C1     07         	RLC						; to 1,0  
0318: F8C2     CDDCF8     	CALL	SelectRoutine 
0319: F8C5     38F9       	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0320: F8C7     4AF9       	DW		DummyOutput			; 01
0321: F8C9     44F9       	DW		CommunicationOutput	; 10
0322: F8CB     3EF9       	DW		TerminalOutput		; 11
0323: F8CD                	                   
0324: F8CD                READER:					; Reader Input
0325: F8CD                						; entered directly from the BIOS JMP Vector
0326: F8CD                						; inputs data into the A register
0327: F8CD     3A0300     	LDA		IOBYTE        
0328: F8D0     07         	RLC						; move bits 3,2  to 1,0
0329: F8D1     CDDCF8     	CALL	SelectRoutine 
0330: F8D4     38F9       	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0331: F8D6     4AF9       	DW		DummyOutput			; 01
0332: F8D8     44F9       	DW		CommunicationOutput	; 10
0333: F8DA     3EF9       	DW		TerminalOutput		; 11
0334: F8DC                	                   
0335: F8DC                SelectRoutine:	     
0336: F8DC                		; SelectRoutine. When called, the calling code has a vector table immediately following it.
0337: F8DC                		; it is used to get the correct physical routine determined by the IOBYTE bits for the
0338: F8DC                		; logical device. (00,01,10,11). 
0339: F8DC                		; It will transfer control to a specified address following its calling address
0340: F8DC                		; according to the values in bits 1, 0 in A.		
0341: F8DC                                    
0342: F8DC     07         	RLC				; Shift select values into bits 2,1 in order to do word arithmetic
0343: F8DD                SelectRoutine21:	; entry point if bits already in 2,1
0344: F8DD     E606       	ANI		06H		; isolate bits 2 and 1
0345: F8DF     E3         	XTHL			; HL-> first word of address after CALL instruction
0346: F8E0     5F         	MOV		E,A		; Add on selection value to address table base
0347: F8E1     1600       	MVI		D,00H         
0348: F8E3     19         	DAD		D		; HL-> now has the selected routine
0349: F8E4     7E         	MOV		A,M		; LS Byte
0350: F8E5     23         	INX		H		; HL-> MS byte
0351: F8E6     66         	MOV		H,M		; MS byte
0352: F8E7     6F         	MOV		L,A		; HL->routine
0353: F8E8     E3         	XTHL			; top of stack -> routine
0354: F8E9     C9         	RET				; transfer control to the selected routine
0355: F8EA                                    
0356: F8EA                	                   
0357: F8EA                ;------------------------- Input/Output Equates---------------------------------------
0358: F8EA                                    
0359: F8EA                TTYStatusPort				EQU	0EDH
0360: F8EA                TTYDataPort					EQU	0ECH
0361: F8EA                TTYOutputReady				EQU	01H		; Status Mask
0362: F8EA                TTYInputReady				EQU	02H		; Status Mask
0363: F8EA                                    
0364: F8EA                TerminalStatusPort			EQU	02H
0365: F8EA                TerminalDataPort			EQU	01H
0366: F8EA                TerminalOutputReady			EQU	80H		; Status Mask - ready for output
0367: F8EA                TerminalInputReady			EQU	07FH	; Status Mask - bytes yet to have been read
0368: F8EA                                    
0369: F8EA                CommunicationStatusPort		EQU	0EDH
0370: F8EA                CommunicationDataPort		EQU	0ECH
0371: F8EA                CommunicationOutputReady	EQU	01H		; Status Mask
0372: F8EA                CommunicationInputReady		EQU	02H		; Status Mask
0373: F8EA                                    
0374: F8EA                CommunicationBaudMode		EQU	0DFH
0375: F8EA                CommunicationBaudRate		EQU	0DEH
0376: F8EA                                    
0377: F8EA                TTYTable:           
0378: F8EA     ED         		DB		TTYStatusPort 
0379: F8EB     EC         		DB		TTYDataPort   
0380: F8EC     01         		DB		TTYOutputReady
0381: F8ED     02         		DB		TTYInputReady 
0382: F8EE                TerminalTable:      
0383: F8EE     02         		DB		TerminalStatusPort
0384: F8EF     01         		DB		TerminalDataPort
0385: F8F0     80         		DB		TerminalOutputReady
0386: F8F1     7F         		DB		TerminalInputReady
0387: F8F2                CommunicationTable: 
0388: F8F2     ED         		DB		CommunicationStatusPort
0389: F8F3     EC         		DB		CommunicationDataPort
0390: F8F4     01         		DB		CommunicationOutputReady
0391: F8F5     02         		DB		CommunicationInputReady
0392: F8F6                ;------------------------- Input/Output Equates---------------------------------------
0393: F8F6                                    
0394: F8F6                                    
0395: F8F6                ;590----------------------routines called by SelectRoutine----------------------------
0396: F8F6                TTYInStatus:        
0397: F8F6     21EAF8     		LXI		H,TTYTable				;HL-> control table
0398: F8F9     C34BF9     		JMP		InputStatus				; use of JMP, InputStatus will execute thr RETurn
0399: F8FC                TerminalInStatus:   
0400: F8FC     21EEF8     		LXI		H,TerminalTable			;HL-> control table
0401: F8FF     C34BF9     		JMP		InputStatus				; use of JMP, InputStatus will execute thr RETurn
0402: F902                CommunicationInStatus:
0403: F902     21F2F8     		LXI		H,CommunicationTable	;HL-> control table
0404: F905     C34BF9     		JMP		InputStatus				; use of JMP, InputStatus will execute thr RETurn
0405: F908                DummyInStatus:      
0406: F908     3EFF       		MVI		A,0FFH					; Dummy always indicates data ready
0407: F90A     C9         		RET               
0408: F90B                		                  
0409: F90B                TTYOutStatus:       
0410: F90B     21EAF8     		LXI		H,TTYTable				;HL-> control table
0411: F90E     C356F9     		JMP		OutputStatus			; use of JMP, OutputStatus will execute thr RETurn
0412: F911                TerminalOutStatus:  
0413: F911     21EEF8     		LXI		H,TerminalTable			;HL-> control table
0414: F914     C356F9     		JMP		OutputStatus			; use of JMP, OutputStatus will execute thr RETurn
0415: F917                CommunicationOutStatus:
0416: F917     21F2F8     		LXI		H,CommunicationTable	;HL-> control table
0417: F91A     C356F9     		JMP		OutputStatus			; use of JMP, OutputStatus will execute thr RETurn
0418: F91D                DummyOutStatus:     
0419: F91D     3EFF       		MVI		A,0FFH					; Dummy always indicates ready to output data
0420: F91F     C9         		RET               
0421: F920                                    
0422: F920                TTYInput:           
0423: F920     21EAF8     		LXI		H,TTYTable				;HL-> control table
0424: F923     C360F9     		JMP		InputData				; use of JMP, InputStatus will execute thr RETurn
0425: F926                TerminalInput:      
0426: F926     21EEF8     		LXI		H,TerminalTable			;HL-> control table
0427: F929     CD60F9     		CALL	InputData				;** special **
0428: F92C     E67F       		ANI		07FH					; Strip off high order bit
0429: F92E     C9         		RET	              
0430: F92F                CommunicationInput: 
0431: F92F     21F2F8     		LXI		H,CommunicationTable	;HL-> control table
0432: F932     C360F9     		JMP		InputData				; use of JMP, InputStatus will execute thr RETurn
0433: F935                DummyInput:         
0434: F935     3E1A       		MVI		A,01AH					; Dummy always returns EOF
0435: F937     C9         		RET               
0436: F938                		                  
0437: F938                TTYOutput:          
0438: F938     21EAF8     		LXI		H,TTYTable				;HL-> control table
0439: F93B     C370F9     		JMP		OutputData				; use of JMP, InputStatus will execute thr RETurn
0440: F93E                TerminalOutput:     
0441: F93E     21EEF8     		LXI		H,TerminalTable			;HL-> control table
0442: F941     C370F9     		JMP		OutputData				; use of JMP, InputStatus will execute thr RETurn
0443: F944                CommunicationOutput:
0444: F944     21F2F8     		LXI		H,CommunicationTable	;HL-> control table
0445: F947     C370F9     		JMP		OutputData				; use of JMP, InputStatus will execute thr RETurn
0446: F94A                DummyOutput:        
0447: F94A     C9         		RET						; Dummy always discards the data
0448: F94B                                    
0449: F94B                ;680---------------------General purpose low-level drivers-------------------
0450: F94B                                    
0451: F94B                ; On entry, HL points to appropriate control table, for output Register C contains the data to output
0452: F94B                                    
0453: F94B                InputStatus:					; return- A = 00H no incoming data
0454: F94B     7E         		MOV		A,M				; get status port
0455: F94C     3250F9     		STA		InputStatusPort	;** self modifying code
0456: F94F     DB         		DB		INopCode		; IN opcode
0457: F950                InputStatusPort:    
0458: F950     00         		DB		00H				; <- set from above
0459: F951     23         		INX		H				; move HL to point to input data mask
0460: F952     23         		INX		H            
0461: F953     23         		INX		H            
0462: F954     A6         		ANA		M				; mask with input status
0463: F955     C9         		RET						; return with status (00 nothing, FF - data available)
0464: F956                		                  
0465: F956                OutputStatus:						; return - A = 00H not ready
0466: F956     7E         		MOV		A,M          
0467: F957     325BF9     		STA		OutputStatusPort
0468: F95A     DB         		DB		INopCode			; IN opcode
0469: F95B                OutputStatusPort:   
0470: F95B     00         		DB		00H					; <- set from above
0471: F95C     23         		INX		H					;HL , Output status mask
0472: F95D     23         		INX		H            
0473: F95E     A6         		ANA		M					; mask with output status, 00 = Not ready
0474: F95F     C9         		RET               
0475: F960                		                  
0476: F960                InputData:							; return with next character
0477: F960     E5         		PUSH	H					; save control table pointer
0478: F961     CD4BF9     		CALL	InputStatus  
0479: F964     E1         		POP		H					; restore the control table
0480: F965     CA60F9     		JZ		InputData			; wait until incoming data
0481: F968     23         		INX		H					; HL <- data port
0482: F969     7E         		MOV		A,M					; get data port
0483: F96A     326EF9     		STA		InputDataPort		; modify code here
0484: F96D     DB         		DB		INopCode			; do the actual I/O
0485: F96E                InputDataPort:      
0486: F96E     00         		DB		00H					; <- set from above
0487: F96F     C9         		RET							; return with data in A
0488: F970                		                  
0489: F970                OutputData:							; data in Register C is output
0490: F970     E5         		PUSH	H					; save control table pointer
0491: F971     CD56F9     		CALL	OutputStatus 
0492: F974     E1         		POP		H					; restore table pointer
0493: F975     CA70F9     		JZ		OutputData			; wait until incoming data
0494: F978     23         		INX		H					; HL <- data port
0495: F979     7E         		MOV		A,M					; get data port
0496: F97A     327FF9     		STA		OutputDataPort		; store it here Modify the code
0497: F97D     79         		MOV		A,C					; get the data to output
0498: F97E     D3         		DB		OUTopCode			; Do the I/O here !!
0499: F97F                OutputDataPort:     
0500: F97F     00         		DB		00H					; <- set from above
0501: F980     C9         		RET               
0502: F981                		                  
0503: F981                ;746,795            
0504: F981                ;  page 175 -----------------High Level Diskette drivers--------------------	
0505: F981                                    
0506: F981                                    
0507: F981                                    
0508: F981                					; listing starts on page 175/493 FIgure 6-4
0509: F981                					; in Programmers CPM Handbook by
0510: F981                					; Andy Johnston-Laird
0511: F981                                    
0512: F981                ;	ORG	0F981H	; Continue from bios.asm
0513: F981                ; PhysicalSectorSize	EQU	512			; for the 5.25" disk the 8" size is 128,
0514: F981                	                   
0515: F981                ; 					High level diskette drivers
0516: F981                ;                   
0517: F981                ;                   
0518: F981                ; These drivers perform the following functions:
0519: F981                ;                   
0520: F981                ; SELDSK		Select a specific disk and return the address of
0521: F981                ;				the appropriate disk parameter header
0522: F981                ; SETTRK		Set the track number for the next read or write
0523: F981                ; SETSEC		Set the sector number for the next read or write
0524: F981                ; SETDMA		Set the DMA (read/write) address for the next read or write
0525: F981                ; SECTRAN	Translate a logical sector number into a physical
0526: F981                ; HOME		Set the track to 0 so that the next read or write will
0527: F981                ;				be on Track 0  
0528: F981                ;                   
0529: F981                ; In addition, the high-level drivers are responsible for making
0530: F981                ; the 5 1/4"" floppy diskettes that use a 512-byte sector appear
0531: F981                ; to CP/M as though they use a 128-byte sector. They do this
0532: F981                ; by using what is called blocking/de-blocking code,
0533: F981                ; described in more detail later in this listing.
0534: F981                ;                   
0535: F981                ;                   
0536: F981                ; 					Disk Parameter Tables
0537: F981                ;                   
0538: F981                ; As discussed in Chapter 3, these describe the physical
0539: F981                ; characteristics of the disk drives. In this example BIOS,
0540: F981                ; there are two types of disk drives: standard single-sided,
0541: F981                ; single-density 8", and double-sided, double-density 5 1/4"
0542: F981                ; diskettes.        
0543: F981                ;                   
0544: F981                ; The standard 8" diskettes do not need the blocking/de-blocking
0545: F981                ; code, but the 5 1/4" drives do. Therefore an additional
0546: F981                ; byte has been prefixed to the disk parameter block to
0547: F981                ; tell the disk drivers each logical disk's physical
0548: F981                ; diskette type, and whether or not it needs de-blocking.
0549: F981                ;                   
0550: F981                ;                   
0551: F981                ; 					Disk Definition Tables
0552: F981                ;                   
0553: F981                ; These consists of disk parameter headers, with one entry
0554: F981                ; per logical disk driver, and disk parameter blocks, with
0555: F981                ; either one parameter block per logical disk or the same
0556: F981                ; parameter block for several logical disks.
0557: F981                ;                   
0558: F981                DiskParameterHeaders:		; described in chapter 3
0559: F981                                    
0560: F981                		; Logical Disk A: (5 1/4" Diskette)
0561: F981     6BFB       	DW	Floppy5SkewTable				; 5 1/4" skew table
0562: F983     0000       	DW	0								; Rel pos for file (0-3)
0563: F985     0000       	DW	0								; Last Selected Track #
0564: F987     0000       	DW	0								; Last Selected Sector #
0565: F989     C1F9       	DW	DirectoryBuffer 
0566: F98B     42FA       	DW	Floppy5ParameterBlock
0567: F98D     61FA       	DW	DiskAWorkArea   
0568: F98F     C1FA       	DW	DiskAAllocationVector
0569: F991                	                   
0570: F991                		; Logical Disk B: (5 1/4" Diskette)
0571: F991     6BFB       	DW	Floppy5SkewTable	; shares the same skew table as A:
0572: F993     0000       	DW	0								; Rel pos for file (0-3)
0573: F995     0000       	DW	0								; Last Selected Track #
0574: F997     0000       	DW	0								; Last Selected Sector #
0575: F999     C1F9       	DW	DirectoryBuffer		; all disks use this buffer
0576: F99B     42FA       	DW	Floppy5ParameterBlock
0577: F99D     81FA       	DW	DiskBWorkArea   
0578: F99F     D7FA       	DW	DiskBAllocationVector
0579: F9A1                	                   
0580: F9A1                		; Logical Disk C: (8" Floppy)
0581: F9A1     B3FB       	DW	Floppy8SkewTable	; 8" skew table
0582: F9A3     0000       	DW	0								; Rel pos for file (0-3)
0583: F9A5     0000       	DW	0								; Last Selected Track #
0584: F9A7     0000       	DW	0								; Last Selected Sector #
0585: F9A9     C1F9       	DW	DirectoryBuffer		; all disks use this buffer
0586: F9AB     52FA       	DW	Floppy8ParameterBlock
0587: F9AD     A1FA       	DW	DiskCWorkArea   
0588: F9AF     EDFA       	DW	DiskCAllocationVector
0589: F9B1                	                   
0590: F9B1                		; Logical Disk D: (8" Floppy)
0591: F9B1     6BFB       	DW	Floppy5SkewTable	; shares the same skew table as A:
0592: F9B3     0000       	DW	0								; Rel pos for file (0-3)
0593: F9B5     0000       	DW	0								; Last Selected Track #
0594: F9B7     0000       	DW	0								; Last Selected Sector #
0595: F9B9     C1F9       	DW	DirectoryBuffer		; all disks use this buffer
0596: F9BB     52FA       	DW	Floppy8ParameterBlock
0597: F9BD     B1FA       	DW	DiskDWorkArea   
0598: F9BF     0CFB       	DW	DiskDAllocationVector
0599: F9C1                	                   
0600: F9C1                DirectoryBuffer:	DS	128
0601: FA41                                    
0602: FA41                	; Disk Types       
0603: FA41                Floppy5		EQU		1 		; 5 1/4" mini floppy
0604: FA41                Floppy8		EQU		2 		; 8"  floppy (SS SD)
0605: FA41                                    
0606: FA41                	; blocking/de-blocking indicator
0607: FA41                NeedDeblocking	EQU 	080H	; Sector size > 128 bytes
0608: FA41                                    
0609: FA41                                    
0610: FA41                	; Disk Parameter Blocks
0611: FA41                	                   
0612: FA41                	; 5 1/4" mini floppy
0613: FA41                							; extra byte prefixed to indicate 
0614: FA41                							; disk type and blocking required
0615: FA41     81         	DB	Floppy5 + NeedDeblocking
0616: FA42                	                   
0617: FA42                Floppy5ParameterBlock:
0618: FA42     4800       	DW	048H				; 128-byte sectors per track- (72)
0619: FA44     04         	DB	04H					; Block shift ( 4=> 2K)
0620: FA45     0F         	DB	0FH					; Block mask
0621: FA46     01         	DB	01 					; Extent mask
0622: FA47     AE00       	DW	0AEH 				; Maximum allocation block number (174)
0623: FA49     7F00       	DW	07FH 				; Number of directory entries - 1 (127)
0624: FA4B     C0         	DB	0C0H				; Bit map for reserving 1 alloc. block
0625: FA4C     00         	DB	00					;  for file directory
0626: FA4D     2000       	DW	020H				;Disk change work area size (32)
0627: FA4F     0100       	DW	01					; Number of tracks before directory
0628: FA51                	                   
0629: FA51                	; Standard 8" floppy
0630: FA51                							; extra byte prefixed to DPB for 
0631: FA51                							;  this version of the BIOS
0632: FA51     02         	DB	Floppy8				; Indicates disk type and the fact
0633: FA52                							;   that no de-blocking is required
0634: FA52                	                   
0635: FA52                Floppy8ParameterBlock:
0636: FA52     1A00       	DW	01AH				; sectors per track (26)
0637: FA54     03         	DB	03					; Block shift (3=>1K)
0638: FA55     07         	DB	07					; Block mask
0639: FA56     00         	DB	00 					; Extent mask
0640: FA57     F200       	DW	0F2H 				; Maximum allocation block number (242)
0641: FA59     3F00       	DW	03FH 				; Number of directory entries - 1 (63)
0642: FA5B     C0         	DB	0C0H				; Bit map for reserving 2 alloc. block
0643: FA5C     00         	DB	00					;  for file directory
0644: FA5D     1000       	DW	010H				;Disk change work area size (16)
0645: FA5F     0200       	DW	02					; Number of tracks before directory
0646: FA61                	                   
0647: FA61                			; Disk work area 
0648: FA61                	                   
0649: FA61                	; These are used by the BDOS to detect any unexpected
0650: FA61                	; change of diskette. The BDOS will automatically set
0651: FA61                	; such a changed diskette to read-only status.
0652: FA61                	                   
0653: FA61                DiskAWorkArea:	DS	020H		; A:
0654: FA81                DiskBWorkArea:	DS	020H		; B:
0655: FAA1                DiskCWorkArea:	DS	010H		; C:
0656: FAB1                DiskDWorkArea:	DS	010H		; D:
0657: FAC1                                    
0658: FAC1                	                   
0659: FAC1                			; Disk allocation vectors
0660: FAC1                			                 
0661: FAC1                		; These are used by the BDOS to maintain a bit map of
0662: FAC1                		; which allocation blocks are used and which are free.
0663: FAC1                		; One byte is used for eight allocation blocks, hence the
0664: FAC1                		; expression of the form (allocation blocks/8)+1
0665: FAC1                                    
0666: FAC1                DiskAAllocationVector:	DS		(174/8)+1 	; A:
0667: FAD7                DiskBAllocationVector:	DS		(174/8)+1 	; B:
0668: FAED                	                   
0669: FAED                DiskCAllocationVector:	DS		(242/8)+1 	; C:
0670: FB0C                DiskDAllocationVector:	DS		(242/8)+1 	; A:
0671: FB2B                	                   
0672: FB2B                NumberOfLogicalDisks	EQU 4
0673: FB2B                                    
0674: FB2B                                    
0675: FB2B                		;  Disk routines  
0676: FB2B                		                  
0677: FB2B                ;**********************
0678: FB2B                ;SELDSK - Select disk in C. C=0 for A: 1 for B: etc.
0679: FB2B                ;  Return the address of the appropriate disk parameter header
0680: FB2B                ;  in HL, or 0000H if selected disk does not exist		
0681: FB2B                ;**********************	
0682: FB2B                SELDSK:             
0683: FB2B     210000     	LXI		H,00H				; Assume an error
0684: FB2E     79         	MOV		A,C 				; Check if  requested disk is valid
0685: FB2F     FE04       	CPI		NumberOfLogicalDisks
0686: FB31     D0         	RNC							; return if > max number of Disks
0687: FB32                	                   
0688: FB32     32EAFB     	STA		SelectedDisk		; save disk number
0689: FB35     6F         	MOV		L,A					; make disk into word number
0690: FB36     2600       	MVI		H,0           
0691: FB38                		; Compute offset down disk parameter table by multiplying by parameter
0692: FB38                		; header length (16 bytes)
0693: FB38     29         	DAD		H             
0694: FB39     29         	DAD		H             
0695: FB3A     29         	DAD		H             
0696: FB3B     29         	DAD		H					; pointing at right one
0697: FB3C     1181F9     	LXI		D,DiskParameterHeaders		; get base address
0698: FB3F     19         	DAD		D					; DE -> appropriate DPH
0699: FB40     E5         	PUSH	H					; Save DPH address access disk parameter block to extract special
0700: FB41                								;    prefix byte that identifies disk type and whether de-blocking
0701: FB41                								;    is required
0702: FB41     110A00     	LXI		D,10				; Get DPB pointer offset in DPH
0703: FB44     19         	DAD		D					; DE -> DPB address
0704: FB45     5E         	MOV		E,M					; Get DPB address in DE
0705: FB46     23         	INX		H             
0706: FB47     56         	MOV		D,M	          
0707: FB48     EB         	XCHG						; DE ->DPB
0708: FB49     2B         	DCX		H					; DE -> prefix byte
0709: FB4A     7E         	MOV		A,M					; get Disk Type/Blocking byte
0710: FB4B                								; Disk Type bottom nibble - Blocking MSB (bit 7)
0711: FB4B     E60F       	ANI		0FH					; isolate disk type
0712: FB4D     32FAFB     	STA		DiskType			; save for use in low level driver
0713: FB50     7E         	MOV		A,M					; get another copy
0714: FB51     E680       	ANI		NeedDeblocking		; determin if deblocking is required and
0715: FB53     32F9FB     	STA		DeblockingRequired	; save for low level driver
0716: FB56     E1         	POP		H					; recover DPH pointer
0717: FB57     C9         	RET                
0718: FB58                                    
0719: FB58                ;**********************	
0720: FB58                ;SETTRK - Set logical track for next read or write
0721: FB58                ;		Track is in BC   
0722: FB58                ;**********************	
0723: FB58                SETTRK:             
0724: FB58     60         	MOV		H,B					; select track in BC on entry
0725: FB59     69         	MOV		L,C           
0726: FB5A     22EBFB     	SHLD	SelectedTrack		; save for low level driver	
0727: FB5D     C9         	RET                
0728: FB5E                	                   
0729: FB5E                ;**********************	
0730: FB5E                ;SETSEC - Set logical sector for next read or write
0731: FB5E                ;		Sector is in C   
0732: FB5E                ;**********************
0733: FB5E                SETSEC:             
0734: FB5E     79         	MOV		A,C           
0735: FB5F     32EDFB     	STA		SelectedSector		; save for low level driver	
0736: FB62     C9         	RET                
0737: FB63                	                   
0738: FB63                ;**********************
0739: FB63                ;SetDMA - Set DMA (input/output) address for next read or write
0740: FB63                ;       Address in BC
0741: FB63                ;**********************
0742: FB63     0000       DMAAddress:	DW	0				; DMA address
0743: FB65                SETDMA:             
0744: FB65     69         	MOV		L,C					; select address in BC on entry
0745: FB66     60         	MOV		H,B           
0746: FB67     2263FB     	SHLD	DMAAddress			; save for low level driver	
0747: FB6A     C9         	RET                
0748: FB6B                	                   
0749: FB6B                			; Translate logical sector number to physical
0750: FB6B                			                 
0751: FB6B                			; Sector translation tables
0752: FB6B                			; These tables are indexed using the logical sector number
0753: FB6B                			; and contain the corresponding physical sector number
0754: FB6B                                    
0755: FB6B                                    
0756: FB6B                ;**********************
0757: FB6B                ;	Skew tables       
0758: FB6B                ;**********************
0759: FB6B                                    
0760: FB6B                Floppy5SkewTable:			; each physical sector contains four
0761: FB6B                							;  128-byte sectors
0762: FB6B                							             
0763: FB6B                ;	,		Physical 128b 	Logical 128b	Physical 512-byte
0764: FB6B     00010203   	DB		00,01,02,03		;00,01,02,03				0	)
0765: FB6F     10111213   	DB		16,17,18,19		;04,05,06,07				4	)
0766: FB73     20212223   	DB		32,33,34,35		;08,09,10,11				8	)
0767: FB77     0C0D0E0F   	DB		12,13,14,15		;12,13,14,15				3	)Head
0768: FB7B     1C1D1E1F   	DB		28,29,30,31		;16,17,18,19				7	) 0
0769: FB7F     08090A0B   	DB		08,09,10,11		;20,21,22,23				2	)
0770: FB83     18191A1B   	DB		24,25,26,27		;24,25,26,27				6	)
0771: FB87     04050607   	DB		04,05,06,07		;28,29,30,31				1	)
0772: FB8B     14151617   	DB		20,21,22,23		;32,33,34,35				5	)
0773: FB8F                	                   
0774: FB8F     24252627   	DB		36,37,38,39		;36,37,38,39				0	]
0775: FB93     34353637   	DB		52,53,54,55		;40,41,42,43				4	]
0776: FB97     44454647   	DB		68,69,70,71		;44,45,46,47				8	]
0777: FB9B     30313233   	DB		48,49,50,51		;48,49,50,51				3	]Head
0778: FB9F     40414243   	DB		64,65,66,67		;52,53,54,55				7	] 0
0779: FBA3     2C2D2E2F   	DB		44,45,46,47		;56,57,58,59				2	]
0780: FBA7     3C3D3E3F   	DB		60,61,62,63		;60,61,62,63				6	]
0781: FBAB     28292A2B   	DB		40,41,42,43		;63,65,66,67				1	]
0782: FBAF     38393A3B   	DB		56,57,58,59		;68,69,70,71				5	]
0783: FBB3                	                   
0784: FBB3                Floppy8SkewTable:			; Standard 8" Driver
0785: FBB3                	;		01,02,03,04,05,06,07,08,09,10		; Logical Sectors
0786: FBB3     01070D1319050B111703 	DB		01,07,13,19,25,05,11,17,23,03		; Physical Sectors
0787: FBBD                	                   
0788: FBBD                	;		11,12,13,14,15,16,17,18,19,20		; Logical Sectors	
0789: FBBD     090F1502080E141A060C 	DB		09,15,21,02,08,14,20,26,06,12		; Physical Sectors
0790: FBC7                	                   
0791: FBC7                	;		21,22,23,24,25,26					; Logical Sectors	
0792: FBC7     1218040A1016 	DB		18,24,04,10,16,22					; Physical Sectors
0793: FBCD                	                   
0794: FBCD                ;**********************
0795: FBCD                ;SECTRAN - Translate logical sector to physical
0796: FBCD                ;	on Entry:	BC= logical sector number
0797: FBCD                ;				DE-> appropriate skew table
0798: FBCD                ;	on Exit:	HL = physical sector number
0799: FBCD                ;**********************
0800: FBCD                SECTRAN:            
0801: FBCD     EB         	XCHG			;HL -> skew table base
0802: FBCE     09         	DAD		B		; Add on logical sector number
0803: FBCF     6E         	MOV		L,M		; Get physical sector number
0804: FBD0     2600       	MVI		H,00H	; make into a word
0805: FBD2     C9         	RET                
0806: FBD3                	                   
0807: FBD3                ;**********************
0808: FBD3                ;HOME - Home the selected logical disk to track 0.
0809: FBD3                ;	Before doing this, a check must be made to see if the
0810: FBD3                ;	physical disk buffer has information that must be
0811: FBD3                ;	written out. This is indicated by a flag, MustWriteBuffer,
0812: FBD3                ;	set in the de-blocking code
0813: FBD3                ;**********************	
0814: FBD3                HOME:               
0815: FBD3     3AE9FB     	LDA		MustWriteBuffer		; check flag
0816: FBD6     B7         	ORA		A             
0817: FBD7     C2DDFB     	JNZ		HomeNoWrite   
0818: FBDA     32E8FB     	STA		DataInDiskBuffer	; no, so indicate empty buffer
0819: FBDD                HomeNoWrite:        
0820: FBDD     0E00       	MVI		C,00H				; Set to track 0
0821: FBDF     CD58FB     	CALL	SETTRK				; no, physical, only logical
0822: FBE2     C9         	RET                
0823: FBE3                                    
0824: FBE3                ;*******************************************************************************
0825: FBE3                ;					 More tables  
0826: FBE3                ; Data written to or read from the mini-floppy drive is transferred via a
0827: FBE3                ; physical buffer that is actually 512 bytes long (it was declared at the front
0828: FBE3                ; of the BIOS and holds the "one-time" initialization code used for the
0829: FBE3                ; cold boot procedure.)
0830: FBE3                ;                   
0831: FBE3                ; The blocking/de-blocking code attempts to minimize the amount of actual
0832: FBE3                ; disk I/O by storing the disk,track, and physical sector currently residing
0833: FBE3                ; in the Physical Buffer. If a read request is for a 128 byte CP/M "sector"
0834: FBE3                ; that is already in the physical buffer, then no disk access occurs
0835: FBE3                ;*******************************************************************************
0836: FBE3                AllocationBlockSize		EQU		0800H		; 2048
0837: FBE3                PhysicalSecPerTrack		EQU		012H		; 18
0838: FBE3                CPMSecPerPhysical		EQU		PhysicalSectorSize/128
0839: FBE3                CPMSecPerTrack			EQU		CPMSecPerPhysical * PhysicalSecPerTrack
0840: FBE3                SectorMask				EQU		CPMSecPerPhysical - 1
0841: FBE3                SectorBitShift			EQU		02H			; LOG2(CPMSecPerPhysical)
0842: FBE3                                    
0843: FBE3                ;*******************************************************************************
0844: FBE3                ; These are the values handed over by the BDOS when it calls the Writer operation
0845: FBE3                ; The allocated.unallocated indicates whether the BDOS is set to write to an
0846: FBE3                ; unallocated allocation block (it only indicates this for the first 128 byte
0847: FBE3                ; sector write) or to an allocation block that has already been allocated to a
0848: FBE3                ; file. The BDOS also indicates if it is set to write to the file directory
0849: FBE3                ;*******************************************************************************
0850: FBE3                WriteAllocated			EQU		00H
0851: FBE3                WriteDirectory			EQU		01H
0852: FBE3                WriteUnallocated		EQU		02H
0853: FBE3                                    
0854: FBE3     00         WriteType:				DB		00H		; The type of write indicated by BDOS
0855: FBE4                                    
0856: FBE4                	;       variables for physical sector
0857: FBE4                	; These are moved and compared as a group, DO NOT ALTER
0858: FBE4                InBufferDkTrkSec:   
0859: FBE4     00         InBufferDisk:			DB		00H
0860: FBE5     0000       InBufferTrack:			DW		00H
0861: FBE7     00         InBufferSector:			DB		00H
0862: FBE8                                    
0863: FBE8     00         DataInDiskBuffer:		DB		00H		; when non-zero, the disk buffer has data from disk
0864: FBE9                                    
0865: FBE9     00         MustWriteBuffer:		DB		00H		; Non-zero when data has been written into DiskBuffer,
0866: FBEA                										;	but not yet written out to the disk
0867: FBEA                										          
0868: FBEA                	;     variables for selected disk, track and sector
0869: FBEA                	; These are moved and compared as a group, DO NOT ALTER
0870: FBEA                SelectedDkTrkSec:   
0871: FBEA     00         SelectedDisk:			DB		00H
0872: FBEB     0000       SelectedTrack:			DW		00H
0873: FBED     00         SelectedSector:			DB		00H
0874: FBEE                                    
0875: FBEE                	;Selected physical sector derived from selected (CP/M) sector by shifting it
0876: FBEE                	;	right the number of of bits specified by SectorBitShift
0877: FBEE     00         SelectedPhysicalSector:	DB		00H
0878: FBEF                                    
0879: FBEF     00         SelectedDiskType:		DB		00H		; Set by SELDSK to indicate either , 8" or 5 1/4" floppy 
0880: FBF0     00         SelectedDiskDeblock:	DB		00H		; Set by SELDSK to indicate whether de-blocking is required
0881: FBF1                                    
0882: FBF1                	; Parameters for writing to a previously unallocated allocation block
0883: FBF1                	; These are moved and compared as a group, DO NOT ALTER
0884: FBF1                UnallocatedDkTrkSec:
0885: FBF1     00         UnallocatedDisk:		DB		00H
0886: FBF2     0000       UnallocatedTrack:		DW		00H
0887: FBF4     00         UnallocatedSector:		DB		00H
0888: FBF5     00         UnalocatedlRecordCount:	DB		00H		; Number of unallocated "records"in current previously unallocated allocation block.
0889: FBF6                                    
0890: FBF6     00         DiskErrorFlag:			DB		00H		; Non-Zero - unrecoverable error output "Bad Sector" message
0891: FBF7                                    
0892: FBF7                	; Flags used inside the de-blocking code
0893: FBF7     00         PrereadSectorFlag:		DB		00H		; non-zero if physical sector must be read into the disk buffer
0894: FBF8                										; either before a write to a allocated block can occur, or
0895: FBF8                										; for a normal CP/M 128 byte sector read
0896: FBF8     00         ReadFlag:				DB		00H		; Non-zero when a CP/M 128 byte sector is to be read
0897: FBF9     00         DeblockingRequired:		DB		00H		; Non-zero when the selected disk needs de-blocking (set in SELDSK)
0898: FBFA     00         DiskType:				DB		00H		; Indicate 8" or 5 1/4" selected  (set in SELDSK)
0899: FBFB                                    
0900: FBFB                ; 180/493           
0901: FBFB                                    
0902: FBFB                ;************************************************************************************************
0903: FBFB                ;        READ       
0904: FBFB                ; Read in the 128-byte CP/M sector specified by previous calls to select disk and to set track  and 
0905: FBFB                ; sector. The sector will be read into the address specified in the previous call to set DMA address
0906: FBFB                ;                   
0907: FBFB                ; If reading from a disk drive using sectors larger than 128 bytes, de-blocking code will be used
0908: FBFB                ; to unpack a 128-byte sector from  the physical sector. 
0909: FBFB                ;************************************************************************************************
0910: FBFB                READ:               
0911: FBFB     3AF9FB     		LDA		DeblockingRequired
0912: FBFE     B7         		ORA		A            
0913: FBFF     CA4EFD     		JZ		ReadNoDeblock			; if 0 use normal non-blocked read (128 byte sectors)
0914: FC02                ; The de-blocking algorithm used is such that a read operation can be viewed UP until the actual
0915: FC02                ; data transfer as though it was the first write to an unallocated allocation block. 
0916: FC02                										; else its a 512 byte sector
0917: FC02     AF         		XRA		A						; set record count to 0
0918: FC03     32F5FB     		STA		UnalocatedlRecordCount
0919: FC06     3C         		INR		A            
0920: FC07     32F8FB     		STA		ReadFlag			; Set to non zero to indicate that this is a read
0921: FC0A     32F7FB     		STA		PrereadSectorFlag		; force pre-read
0922: FC0D     3E02       		MVI		A,WriteUnallocated		; fake de-blocking code into responding as if this
0923: FC0F     32E3FB     		STA		WriteType				;  is the first write to an unallocated allocation block
0924: FC12     C36EFC     		JMP		PerformReadWrite		; use common code to execute read
0925: FC15                		                  
0926: FC15                ;************************************************************************************************
0927: FC15                ;		WRITE            
0928: FC15                ;Write a 128-byte sector from the current DMA address to the previously $elected disk, track, and sector.
0929: FC15                ;                   
0930: FC15                ; On arrival here, the BOOS will have set register C to indicate whether this write operation is to:
0931: FC15                ;	00H [WriteAllocated]	 An already allocated allocation block (which means a pre-read of the sector may be needed),
0932: FC15                ;	01H [WriteDirectory]	 To the directory (in which case the data will be written to the disk immediately),
0933: FC15                ;	02H	[WriteUnallocated]	 To the first 128-byte sector of a previously unallocated allocation block (In which case no pre-read is required).
0934: FC15                ;                   
0935: FC15                ; Only writes to the directory take place immediately.
0936: FC15                ; In all other cases, the data will be moved from the DMA address into the disk buffer,
0937: FC15                ; and only written out when circumstance, force the transfer.
0938: FC15                ; The number of physical disk operations can therefore be reduced considerably.
0939: FC15                ;************************************************************************************************
0940: FC15                WRITE:              
0941: FC15     3AF9FB     		LDA		DeblockingRequired
0942: FC18     B7         		ORA		A            
0943: FC19     CA49FD     		JZ		WriteNoDeblock			; if 0 use non-blocked write
0944: FC1C                ; Buffered I/O      
0945: FC1C     AF         		XRA		A            
0946: FC1D     32F8FB     		STA		ReadFlag				; Set to zero to indicate that this is not a read
0947: FC20     79         		MOV		A,C          
0948: FC21     32E3FB     		STA		WriteType				; save the BDOS write type
0949: FC24     FE02       		CPI		WriteUnallocated		; first write to an unallocated allocation block ?
0950: FC26     C237FC     		JNZ		CheckUnallocatedBlock	; No, - in the middle of writing to an unallocated block ?
0951: FC29                										; Yes, It is the first write to unallocated allocation block.
0952: FC29                ; Initialize  variables associated with unallocated writes
0953: FC29     3E10       		MVI		A,AllocationBlockSize/ 128	; Number of 128 byte sectors
0954: FC2B     32F5FB     		STA		UnalocatedlRecordCount
0955: FC2E     21EAFB     		LXI		H,SelectedDkTrkSec		; copy disk, track & sector into unallocated variables
0956: FC31     11F1FB     		LXI		D,UnallocatedDkTrkSec
0957: FC34     CD31FD     		CALL 	MoveDkTrkSec
0958: FC37                		                  
0959: FC37                	; Check if this is not the first write to an unallocated allocation block -- if it is,
0960: FC37                	; the unallocated record count has just been set to the number of 128-byte sectors in the allocation block
0961: FC37                CheckUnallocatedBlock:
0962: FC37     3AF5FB     		LDA		UnalocatedlRecordCount
0963: FC3A     B7         		ORA		A            
0964: FC3B     CA66FC     		JZ		RequestPreread			; No - write to an unallocated block
0965: FC3E     3D         		DCR		A						; decrement 128 byte sectors left
0966: FC3F     32F5FB     		STA		UnalocatedlRecordCount
0967: FC42                		                  
0968: FC42     21EAFB     		LXI		H,SelectedDkTrkSec		; same Disk, Track & sector as for those in an unallocated block
0969: FC45     11F1FB     		LXI		D,UnallocatedDkTrkSec
0970: FC48     CD25FD     		CALL	CompareDkTrkSec			; are they the same
0971: FC4B     C266FC     		JNZ		RequestPreread			; NO - do a pre-read
0972: FC4E                										;Compare$DkSTrkSec  returns with  DE -> Unallocated$Sector , HL -> UnallocatedSSector 
0973: FC4E     EB         		XCHG              
0974: FC4F     34         		INR	M             
0975: FC50     7E         		MOV		A,M          
0976: FC51     FE48       		CPI		CPMSecPerTrack			; Sector > maximum on track ?
0977: FC53     DA5FFC     		JC		NoTrackChange			; No ( A < M)
0978: FC56     3600       		MVI		M,00H					; Yes
0979: FC58     2AF2FB     		LHLD	UnallocatedTrack
0980: FC5B     23         		INX		H						; increment track 
0981: FC5C     22F2FB     		SHLD	UnallocatedTrack
0982: FC5F                NoTrackChange:      
0983: FC5F     AF         		XRA		A            
0984: FC60     32F7FB     		STA		PrereadSectorFlag		; clear flag
0985: FC63     C36EFC     		JMP		PerformReadWrite
0986: FC66                		                  
0987: FC66                RequestPreread:     
0988: FC66     AF         		XRA		A            
0989: FC67     32F5FB     		STA		UnalocatedlRecordCount	; not a write into an unallocated block
0990: FC6A     3C         		INR		A            
0991: FC6B     32F7FB     		STA		PrereadSectorFlag		; set flag
0992: FC6E                ;*******************************************************
0993: FC6E                ; Common code to execute both reads and writes of 128-byte sectors	
0994: FC6E                ;*******************************************************	
0995: FC6E                PerformReadWrite:   
0996: FC6E     AF         		XRA		A						; Assume no disk error will occur
0997: FC6F     32F6FB     		STA		DiskErrorFlag
0998: FC72     3AEDFB     		LDA		SelectedSector
0999: FC75     1F         		RAR								; Convert selected 128-byte sector
1000: FC76     1F         		RAR								; into physical sector by dividing by 4
1001: FC77     E63F       		ANI		03FH					; remove unwanted bits
1002: FC79     32EEFB     		STA		SelectedPhysicalSector
1003: FC7C     21E8FB     		LXI		H,DataInDiskBuffer		; see if there is any data here ?
1004: FC7F     7E         		MOV		A,M          
1005: FC80     3601       		MVI		M,001H					; force there is data here for after the actual read
1006: FC82     B7         		ORA		A						; really is there any data here ?
1007: FC83     CAA3FC     		JZ		ReadSectorIntoBuffer	; NO - go read into buffer
1008: FC86                ;                   
1009: FC86                		; The buffer does have a physical sector in it, Note: The disk, track, and PHYSICAL sector
1010: FC86                		; in the buffer need to be checked, hence the use of the CompareDkTrk subroutine.
1011: FC86     11E4FB     		LXI		D,InBufferDkTrkSec
1012: FC89     21EAFB     		LXI		H,SelectedDkTrkSec		; get the requested sector
1013: FC8C     CD20FD     		CALL	CompareDkTrk			; is it in the buffer ? 
1014: FC8F     C29CFC     		JNZ		SectorNotInBuffer		; NO, it must be read
1015: FC92                		; Yes, it is in the buffer
1016: FC92     3AE7FB     		LDA		InBufferSector			; get the sector
1017: FC95     21EEFB     		LXI		H,SelectedPhysicalSector
1018: FC98     BE         		CMP		M						; Check if correct physical sector
1019: FC99     CAC0FC     		JZ		SectorInBuffer			; Yes - it is already in memory
1020: FC9C                		; No, it will have to be read in over current contents of buffer
1021: FC9C                SectorNotInBuffer:  
1022: FC9C     3AE9FB     		LDA		MustWriteBuffer
1023: FC9F     B7         		ORA		A						; do we need to write ?
1024: FCA0     C491FD     		CNZ		WritePhysical			; if yes - write it out
1025: FCA3                                    
1026: FCA3                ReadSectorIntoBuffer:
1027: FCA3                		; indicate the  selected disk, track, and sector now residing in buffer
1028: FCA3     3AEAFB     		LDA		SelectedDisk 
1029: FCA6     32E4FB     		STA		InBufferDisk 
1030: FCA9     2AEBFB     		LHLD	SelectedTrack
1031: FCAC     22E5FB     		SHLD	InBufferTrack
1032: FCAF     3AEEFB     		LDA		SelectedPhysicalSector
1033: FCB2     32E7FB     		STA		InBufferSector
1034: FCB5                		                  
1035: FCB5     3AF7FB     		LDA		PrereadSectorFlag		; do we need to pre-read
1036: FCB8     B7         		ORA		A            
1037: FCB9     C496FD     		CNZ		ReadPhysical			; yes - pre-read the sector
1038: FCBC                		                  
1039: FCBC                ; At this point the data is in the buffer.
1040: FCBC                ; Either it was already here, or we returned from ReadPhysical
1041: FCBC                                    
1042: FCBC     AF         		XRA		A						; reset the flag
1043: FCBD     32E9FB     		STA		MustWriteBuffer			; and store it away
1044: FCC0                		                  
1045: FCC0                ; Selected sector on correct track and  disk is already 1n the buffer.
1046: FCC0                ; Convert the selected CP/M(128-byte sector into relative address down the buffer. 
1047: FCC0                SectorInBuffer:     
1048: FCC0     3AEDFB     		LDA		SelectedSector
1049: FCC3     E603       		ANI		SectorMask				; only want the least bits
1050: FCC5     6F         		MOV		L,A						; to calculate offset into 512 byte buffer
1051: FCC6     2600       		MVI		H,00H					; Multiply by 128
1052: FCC8     29         		DAD		H						; *2  
1053: FCC9     29         		DAD		H						; *4  
1054: FCCA     29         		DAD		H						; *8  
1055: FCCB     29         		DAD		H						; *16 
1056: FCCC     29         		DAD		H						; *32 
1057: FCCD     29         		DAD		H						; *64 
1058: FCCE     29         		DAD		H						; *128
1059: FCCF     1133F6     		LXI		D,DiskBuffer 
1060: FCD2     19         		DAD		D						; HL -> 128-byte sector number start address
1061: FCD3     EB         		XCHG							; DE -> sector in the disk buffer
1062: FCD4     2A63FB     		LHLD	DMAAddress				; Get DMA address (set in SETDMA)
1063: FCD7     EB         		XCHG							; assume a read so :
1064: FCD8                										; DE -> DMA Address & HL -> sector in disk buffer
1065: FCD8     0E10       		MVI		C,128/8					; 8 bytes per move (loop count)
1066: FCDA                ;                   
1067: FCDA                ;  At this point -  
1068: FCDA                ;	C	->	loop count   
1069: FCDA                ;	DE	->	DMA address 
1070: FCDA                ;	HL	->	sector in disk buffer
1071: FCDA                ;                   
1072: FCDA     3AF8FB     		LDA		ReadFlag				; Move into or out of buffer /
1073: FCDD     B7         		ORA		A						; 0 => Write, non Zero => Read
1074: FCDE     C2E6FC     		JNZ		BufferMove				; Move out of buffer
1075: FCE1                		                  
1076: FCE1     3C         		INR		A						; going to force a write
1077: FCE2     32E9FB     		STA		MustWriteBuffer
1078: FCE5     EB         		XCHG							; DE <--> HL
1079: FCE6                		                  
1080: FCE6                ;The following move loop moves eight bytes at a time from (HL> to (DE), C contains the loop count
1081: FCE6                BufferMove:         
1082: FCE6     7E         		MOV		A,M						; Get byte from source
1083: FCE7     12         		STAX	D						; Put into destination
1084: FCE8     13         		INX		D						; update pointers
1085: FCE9     23         		INX		H            
1086: FCEA                		                  
1087: FCEA     7E         		MOV		A,M	         
1088: FCEB     12         		STAX	D            
1089: FCEC     13         		INX		D            
1090: FCED     23         		INX		H            
1091: FCEE                		                  
1092: FCEE     7E         		MOV		A,M          
1093: FCEF     12         		STAX	D            
1094: FCF0     13         		INX		D            
1095: FCF1     23         		INX		H            
1096: FCF2                		                  
1097: FCF2     7E         		MOV		A,M	         
1098: FCF3     12         		STAX	D            
1099: FCF4     13         		INX		D            
1100: FCF5     23         		INX		H            
1101: FCF6                		                  
1102: FCF6     7E         		MOV		A,M          
1103: FCF7     12         		STAX	D            
1104: FCF8     13         		INX		D            
1105: FCF9     23         		INX		H            
1106: FCFA                		                  
1107: FCFA     7E         		MOV		A,M          
1108: FCFB     12         		STAX	D            
1109: FCFC     13         		INX		D            
1110: FCFD     23         		INX		H            
1111: FCFE                		                  
1112: FCFE     7E         		MOV		A,M	         
1113: FCFF     12         		STAX	D            
1114: FD00     13         		INX		D            
1115: FD01     23         		INX		H            
1116: FD02                		                  
1117: FD02     7E         		MOV		A,M          
1118: FD03     12         		STAX	D            
1119: FD04     13         		INX		D            
1120: FD05     23         		INX		H            
1121: FD06                		                  
1122: FD06     0D         		DCR		C						; count down on loop counter
1123: FD07     C2E6FC     		JNZ		BufferMove				; repeat till done (CP/M sector moved)
1124: FD0A                ; end of loop       
1125: FD0A                		                  
1126: FD0A     3AE3FB     		LDA		WriteType				; write to directory ?
1127: FD0D     FE01       		CPI		WriteDirectory
1128: FD0F     3AF6FB     		LDA		DiskErrorFlag			; get flag in case of a delayed read or write
1129: FD12     C0         		RNZ								; return if delayed read or write
1130: FD13                		                  
1131: FD13     B7         		ORA		A						; Any disk errors ?
1132: FD14     C0         		RNZ								; yes - abandon attempt to write to directory
1133: FD15                		                  
1134: FD15     AF         		XRA		A            
1135: FD16     32E9FB     		STA		MustWriteBuffer			; clear flag
1136: FD19     CD91FD     		CALL	WritePhysical
1137: FD1C     3AF6FB     		LDA		DiskErrorFlag			; return error flag to caller
1138: FD1F     C9         		RET               
1139: FD20                ;********************************************************************
1140: FD20                                    
1141: FD20                		                  
1142: FD20                                    
1143: FD20                ; Compares just the disk and track   pointed to by DE and HL (used for Blocking/Deblocking)
1144: FD20                CompareDkTrk:			    
1145: FD20     0E03       		MVI		C,03H			; Disk(1), Track(2)
1146: FD22     C327FD     		JMP		CompareDkTrkSecLoop
1147: FD25                CompareDkTrkSec:				;Compares just the disk and track   pointed to by DE and HL 
1148: FD25     0E04       		MVI		C,04H			; Disk(1), Track(2), Sector(1)
1149: FD27                CompareDkTrkSecLoop:
1150: FD27     1A         		LDAX	D            
1151: FD28     BE         		CMP		M            
1152: FD29     C0         		RNZ						; Not equal
1153: FD2A     13         		INX	D             
1154: FD2B     23         		INX	H             
1155: FD2C     0D         		DCR		C            
1156: FD2D     C8         		RZ						; return they match (zero flag set)
1157: FD2E     C327FD     		JMP		CompareDkTrkSecLoop	; keep going
1158: FD31                                    
1159: FD31                ;********************************************************************
1160: FD31                                    
1161: FD31                ;Moves the disk, track, and sector variables pointed at by HL to those pointed at by DE 
1162: FD31                MoveDkTrkSec:       
1163: FD31     0E04       		MVI		C,04H			; Disk(1), Track(2), Sector(1)
1164: FD33                MoveDkTrkSecLoop:   
1165: FD33     7E         		MOV		A,M          
1166: FD34     12         		STAX	D            
1167: FD35     13         		INX		D            
1168: FD36     23         		INX		H            
1169: FD37     0D         		DCR		C            
1170: FD38     C8         		RZ					; exit loop done
1171: FD39     C333FD     		JMP		MoveDkTrkSecLoop
1172: FD3C                		                  
1173: FD3C                ;**************************************************************************************************
1174: FD3C                ;  There are two "smart" disk controllers on this system, one for the 8" floppy diskette drives,
1175: FD3C                ; and one for the 5 1/4" mini-diskette drives
1176: FD3C                ;                   
1177: FD3C                ;  The controllers are "hard-wired" to monitor certain locations in memory to detect when they are to
1178: FD3C                ; perform some disk operation. The 8" controller monitors location 0040H, and the 5 1/4 controller
1179: FD3C                ; monitors location 0045H. These are called their disk control bytes.
1180: FD3C                ; If the most significant bit of  disk control byte is set, the controller will look at the word
1181: FD3C                ; following the respective control bytes. This word must contain the address of  valid disk control
1182: FD3C                ; table that specifies the exact disk operation to be performed.
1183: FD3C                ;                   
1184: FD3C                ;  Once the operation has been completed. the controller resets its disk control byte to OOH.
1185: FD3C                ; This indicates completion to the disk driver code.
1186: FD3C                ;                   
1187: FD3C                ;  The controller also sets a return code in a disk status block -both controllers use the SAME location
1188: FD3C                ; for this, 0043H. If the first byte of this status block is less than 80H. then a disk error
1189: FD3C                ; has occurred. For this simple BIOS. no further details of the status settings are relevant.
1190: FD3C                ; Note that the disk controller has built-in retry logic -- reads and writes are attempted
1191: FD3C                ; ten times before the controller returns an error
1192: FD3C                ;                   
1193: FD3C                ;  The disk control table layout is shown below. Note that the controllers have the capability
1194: FD3C                ; for control tables to be chained together so that a sequence of disk operations can be initiated.
1195: FD3C                ; In this BIOS this feature is not used. However. the controller requires that the chain pointers
1196: FD3C                ; in the disk control tables be pointed back to the main control bytes in order to indicate
1197: FD3C                ; the end of the chain
1198: FD3C                ;**************************************************************************************************
1199: FD3C                                    
1200: FD3C                DiskControl8				EQU	040H	; 8" control byte
1201: FD3C                CommandBlock8				EQU	041H	; Control Table Pointer
1202: FD3C                                    
1203: FD3C                DiskStatusBlock				EQU	043H	; 8" and 5 1/4" status block
1204: FD3C                                    
1205: FD3C                DiskControl5				EQU	045H	; 8" control byte
1206: FD3C                CommandBlock5				EQU	046H	; Control Table Pointer
1207: FD3C                                    
1208: FD3C                DiskReadCode				EQU	01H		; Code for Read
1209: FD3C                DiskWriteCode				EQU	02H		; Code for Write
1210: FD3C                ;***************************************************************************
1211: FD3C                ;					Disk Control tables
1212: FD3C                ;***************************************************************************
1213: FD3C                DiskControlTable:   
1214: FD3C     00         DCTCommand:				DB	00H		; Command
1215: FD3D     00         DCTUnit:					DB	00H		; unit (drive) number = 0 or 1
1216: FD3E     00         DCTHead:					DB	00H		; head number = 0 or 1
1217: FD3F     00         DCTTrack:				DB	00H		; track number
1218: FD40     00         DCTSector:				DB	00H		; sector number
1219: FD41     0000       DCTByteCount:			DW	0000H	; number of bytes to read/write
1220: FD43     0000       DCTDMAAddress:			DW	0000H	; transfer address
1221: FD45     0000       DCTNextStatusBlock:		DW	0000H	; pointer to next status block
1222: FD47     0000       DCTNextControlLocation:	DW	0000H	; pointer to next control byte
1223: FD49                                    
1224: FD49                ; Write contents of disk buffer to correct sector
1225: FD49                WriteNoDeblock:     
1226: FD49     3E02       	MVI		A,DiskWriteCode	; get write function code
1227: FD4B     C350FD     	JMP		CommonNoDeblock
1228: FD4E                ;Read previously selected sector into disk buffer
1229: FD4E                ReadNoDeblock:      
1230: FD4E     3E01       	MVI		A,DiskReadCode	; get read function code
1231: FD50                CommonNoDeblock:    
1232: FD50     323CFD     	STA		DCTCommand		; set the correct command code
1233: FD53     218000     	LXI		H,128				; bytes per sector
1234: FD56     2241FD     	SHLD	DCTByteCount  
1235: FD59     AF         	XRA		A					; 8" has only head 0
1236: FD5A     323EFD     	STA		DCTHead       
1237: FD5D                	                   
1238: FD5D     3AEAFB     	LDA		SelectedDisk		; insure only disk 0 or 1
1239: FD60     E601       	ANI		01H           
1240: FD62     323DFD     	STA		DCTUnit			; set the unit number
1241: FD65                	                   
1242: FD65     3AEBFB     	LDA		SelectedTrack 
1243: FD68     323FFD     	STA		DCTTrack			; set track number
1244: FD6B                	                   
1245: FD6B     3AEDFB     	LDA		SelectedSector
1246: FD6E     3240FD     	STA		DCTSector		; set sector
1247: FD71                	                   
1248: FD71     2A63FB     	LHLD	DMAAddress    
1249: FD74     2243FD     	SHLD	DCTDMAAddress	; set transfer address
1250: FD77                	                   
1251: FD77                ;  The disk controller can accept chained disk control tables, but in this case
1252: FD77                ; they are not used. so the "Next" pointers must be pointed back at the initial
1253: FD77                ; control bytes in the base page. 
1254: FD77     214300     	LXI		H,DiskStatusBlock
1255: FD7A     2245FD     	SHLD	DCTNextStatusBlock	; set pointer back to start
1256: FD7D     214000     	LXI		H,DiskControl8
1257: FD80     2247FD     	SHLD	DCTNextControlLocation	; set pointer back to start
1258: FD83     213CFD     	LXI		H,DCTCommand  
1259: FD86     224100     	SHLD	CommandBlock8 
1260: FD89                	                   
1261: FD89     214000     	LXI		H,DiskControl8
1262: FD8C     3680       	MVI		M,080H				; activate the controller to perform operation
1263: FD8E     C3F3FD     	JMP		WaitForDiskComplete
1264: FD91                	                   
1265: FD91                ;Write contents of disk buffer to correct sector
1266: FD91                WritePhysical:      
1267: FD91     3E02       	MVI		A,DiskWriteCode	; get write function
1268: FD93     C398FD     	JMP		CommonPhysical
1269: FD96                ReadPhysical:       
1270: FD96     3E01       	MVI		A,DiskReadCode	; get read function
1271: FD98                CommonPhysical:     
1272: FD98     323CFD     	STA		DCTCommand		; set the command
1273: FD9B                	                   
1274: FD9B     3AFAFB     	LDA		DiskType      
1275: FD9E     FE01       	CPI		Floppy5				; is it 5 1/4 ?
1276: FDA0     CAA9FD     	JZ		CorrectDisktype		; yes
1277: FDA3     3E01       	MVI		A,1           
1278: FDA5     3205FE     	STA		DiskError			; no set error and exit
1279: FDA8     C9         	RET                
1280: FDA9                CorrectDisktype:    
1281: FDA9     3AE4FB     	LDA		InBufferDisk  
1282: FDAC     E601       	ANI		01H					; only units 0 or 1
1283: FDAE     323DFD     	STA		DCTUnit			; set disk
1284: FDB1     2AE5FB     	LHLD	InBufferTrack 
1285: FDB4     7D         	MOV		A,L					; for this controller it is a byte value
1286: FDB5     323FFD     	STA		DCTTrack			; set track
1287: FDB8                ;  The sector must be converted into a head number and sector number.
1288: FDB8                ; Sectors 0 - 8 are head 0, 9 - 17 , are head 1 
1289: FDB8     0600       	MVI		B,0					; assume head 0
1290: FDBA     3AE7FB     	LDA		InBufferSector
1291: FDBD     4F         	MOV		C,A					; save copy
1292: FDBE     FE09       	CPI		09H           
1293: FDC0     DAC7FD     	JC		Head0          
1294: FDC3     D609       	SUI		09H					; Modulo sector
1295: FDC5     4F         	MOV		C,A           
1296: FDC6     04         	INR		B					; set head to 1
1297: FDC7                Head0:              
1298: FDC7     78         	MOV		A,B           
1299: FDC8     323EFD     	STA		DCTHead			; set head number
1300: FDCB     79         	MOV		A,C           
1301: FDCC     3C         	INR		A					; physical sectors start at 1
1302: FDCD     3240FD     	STA		DCTSector		; set sector
1303: FDD0     210002     	LXI		H,PhysicalSectorSize
1304: FDD3     2241FD     	SHLD	DCTByteCount		; set byte count
1305: FDD6     2133F6     	LXI		H,DiskBuffer  
1306: FDD9     2243FD     	SHLD	DCTDMAAddress	; set transfer address
1307: FDDC                ;	As only one control table is in use, close the status and busy chain pointers
1308: FDDC                ;  back to the main control bytes
1309: FDDC     214300     	LXI		H,DiskStatusBlock
1310: FDDF     2245FD     	SHLD	DCTNextStatusBlock
1311: FDE2     214500     	LXI		H,DiskControl5
1312: FDE5     2247FD     	SHLD	DCTNextControlLocation
1313: FDE8     213CFD     	LXI		H,DCTCommand  
1314: FDEB     224600     	SHLD	CommandBlock5 
1315: FDEE                	                   
1316: FDEE     214500     	LXI		H,DiskControl5		; activate 5 1/4" disk controller
1317: FDF1     3680       	MVI		M,080H        
1318: FDF3                                    
1319: FDF3                ;Wait until Disk Status Block indicates , operation complete, then check 
1320: FDF3                ; if any errors occurred. ,On entry HL -> disk control byte	
1321: FDF3                WaitForDiskComplete:
1322: FDF3     7E         	MOV		A,M				; get control bytes
1323: FDF4     B7         	ORA		A             
1324: FDF5     C2F3FD     	JNZ		WaitForDiskComplete	; operation not done
1325: FDF8                	                   
1326: FDF8     3A4300     	LDA		DiskStatusBlock		; done , so now check status
1327: FDFB     FE80       	CPI		080H          
1328: FDFD     DA05FE     	JC		DiskError      
1329: FE00     AF         	XRA		A             
1330: FE01     32F6FB     	STA		DiskErrorFlag		; clear the flag
1331: FE04     C9         	RET                
1332: FE05                	                   
1333: FE05                DiskError:          
1334: FE05     3E01       	MVI		A,1           
1335: FE07     32F6FB     	STA		DiskErrorFlag		; set the error flag
1336: FE0A     C9         	RET                
1337: FE0B                	                   
1338: FE0B                ;**********************************************************************************
1339: FE0B                ;		Disk Control table image for warm boot
1340: FE0B                ;**********************************************************************************
1341: FE0B                BootControlPart1:   
1342: FE0B     01         	DB		01H				; Read function
1343: FE0C     00         	DB		00H				; unit number
1344: FE0D     00         	DB		00H				; head number
1345: FE0E     00         	DB		00H				; track number
1346: FE0F     02         	DB		02H				; Starting sector number (skip cold boot sector)
1347: FE10     0010       	DW		8 * 512			; Number of bytes to read ( rest of the head)
1348: FE12     00E0       	DW		CCPEntry		; read into this address
1349: FE14     4300       	DW		DiskStatusBlock	; pointer to next block - no linking
1350: FE16     4500       	DW		DiskControl5	; pointer to next table- no linking
1351: FE18                BootControlPart2:   
1352: FE18     01         	DB		01H				; Read function
1353: FE19     00         	DB		00H				; unit number
1354: FE1A     01         	DB		01H				; head number - next head
1355: FE1B     00         	DB		00H				; track number
1356: FE1C     01         	DB		01H				; Starting sector number
1357: FE1D     0006       	DW		3 * 512			; Number of bytes to read (Rest of BDOS)
1358: FE1F     00F0       	DW		CCPEntry + ( 8 * 512)		; Pick up where 1st read left off
1359: FE21     4300       	DW	DiskStatusBlock		; pointer to next block - no linking
1360: FE23     4500       	DW	DiskControl5		; pointer to next table - no linking
1361: FE25                                    
1362: FE25                ;**********************************************************************************	
1363: FE25                ;						Warm Boot    
1364: FE25                ;  On warm boot. the CCP and BDOS must be reloaded into memory.
1365: FE25                ; In this BIOS. only the 5 1/4" diskettes will be used.
1366: FE25                ; Therefore this code is hardware specific to the controller.
1367: FE25                ; Two prefabricated control tables are used.
1368: FE25                ;**********************************************************************************	
1369: FE25                WBOOT:              
1370: FE25     318000     	LXI		SP,DefaultDiskBuffer
1371: FE28     110BFE     	LXI		D,BootControlPart1
1372: FE2B     CD37FE     	CALL	WarmBootRead  
1373: FE2E                	                   
1374: FE2E     1118FE     	LXi		D,BootControlPart2
1375: FE31     CD37FE     	CALL	WarmBootRead  
1376: FE34     C340F8     	JMP		EnterCPM      
1377: FE37                	                   
1378: FE37                WarmBootRead:       
1379: FE37     213CFD     	LXI		H,DiskControlTable			; get pointer to the Floppy's Device Control Table
1380: FE3A     224600     	SHLD	CommandBlock5		; put it into the Command block for drive A:
1381: FE3D     0E0D       	MVI		C,13				; set byte count for move
1382: FE3F                WarmByteMove:       
1383: FE3F     1A         	LDAX	D					; Move the coded Control block into the Command Block
1384: FE40     77         	MOV		M,A           
1385: FE41     23         	INX		H             
1386: FE42     13         	INX		D             
1387: FE43     0D         	DCR		C             
1388: FE44     C23FFE     	JNZ		WarmByteMove  
1389: FE47                	                   
1390: FE47     214500     	LXI		H,DiskControl5
1391: FE4A     3680       	MVI		M,080H				; activate the controller 
1392: FE4C                	                   
1393: FE4C                WaitForBootComplete:
1394: FE4C     7E         	MOV		A,M					; Get the control byte
1395: FE4D     B7         	ORA		A					; Reset to 0 (Completed operation) ?
1396: FE4E     C24CFE     	JNZ		WaitForBootComplete	; if not try again
1397: FE51                	                   
1398: FE51     3A4300     	LDA		DiskStatusBlock		; after operation what's the status?
1399: FE54     FE80       	CPI		080H				; any errors ?
1400: FE56     DA5AFE     	JC		WarmBootError		; Yup
1401: FE59     C9         	RET							; else we are done!
1402: FE5A                                    
1403: FE5A                WarmBootError:      
1404: FE5A     2163FE     	LXI		H,WarmBootErroMessage	; point at error message
1405: FE5D     CD33F8     	CALL	DisplayMessage			; sent it. and
1406: FE60     C325FE     	JMP		WBOOT					; try again.
1407: FE63                	                   
1408: FE63                WarmBootErroMessage:
1409: FE63     0D0A       	DB		CR,LF          
1410: FE65     5741524D20424F4F54202D 	DB		'Warm Boot -'  
1411: FE70     205245545259494E472E 	DB		' Retrying.'   
1412: FE7A     0D0A       	DB		CR,LF          
1413: FE7C     00         	DB		EndOfMessage   
1414: FE7D                CodeEnd:            
1415: FE7D                End:                
1416: FE7D                                    




                                    Xref


0000	0000	$                             		

0089	F833	AFTERDISKBUFFER               		  0192,
0836	0800	ALLOCATIONBLOCKSIZE           		  0953,

0035	E806	BDOSENTRY                     		  0046,  0216,
0025	0E00	BDOSLENGTH                    		  0028,  0029,  0036,
0036	F600	BIOSENTRY                     		  0063,
0026	0A00	BIOSLENGTH                    		  0028,  0029,
0149	F6F9	BOOT                          		  0067,
1341	FE0B	BOOTCONTROLPART1              		  1371,
1351	FE18	BOOTCONTROLPART2              		  1374,
1081	FCE6	BUFFERMOVE                    		  1074,  1123,

0033	E000	CCPENTRY                      		  0035,  0036,  0225,  1348,  1358,
0024	0800	CCPLENGTH                     		  0028,  0029,  0035,  0036,
0961	FC37	CHECKUNALLOCATEDBLOCK         		  0950,
1414	FE7D	CODEEND                       		
0064	F600	CODESTART                     		
1206	0046	COMMANDBLOCK5                 		  1314,  1380,
1201	0041	COMMANDBLOCK8                 		  1259,
1231	FD50	COMMONNODEBLOCK               		  1227,
1271	FD98	COMMONPHYSICAL                		  1268,
0374	00DF	COMMUNICATIONBAUDMODE         		  0111,
0375	00DE	COMMUNICATIONBAUDRATE         		  0115,
0370	00EC	COMMUNICATIONDATAPORT         		  0389,
0430	F92F	COMMUNICATIONINPUT            		  0262,
0372	0002	COMMUNICATIONINPUTREADY       		  0391,
0402	F902	COMMUNICATIONINSTATUS         		  0247,
0443	F944	COMMUNICATIONOUTPUT           		  0274,  0308,  0321,  0332,
0371	0001	COMMUNICATIONOUTPUTREADY      		  0390,
0415	F917	COMMUNICATIONOUTSTATUS        		  0296,
0369	00ED	COMMUNICATIONSTATUSPORT       		  0388,
0387	F8F2	COMMUNICATIONTABLE            		  0403,  0416,  0431,  0444,
1144	FD20	COMPAREDKTRK                  		  1013,
1147	FD25	COMPAREDKTRKSEC               		  0970,
1149	FD27	COMPAREDKTRKSECLOOP           		  1146,  1157,
0250	F878	CONIN                         		  0071,
0265	F886	CONOUT                        		  0072,  0203,
0235	F862	CONST                         		  0070,
1280	FDA9	CORRECTDISKTYPE               		  1276,
0838	0004	CPMSECPERPHYSICAL             		  0839,  0840,
0839	0048	CPMSECPERTRACK                		  0976,
0010	000D	CR                            		  0133,  0135,  0136,  0138,  0139,  0140,  0141,  1409,  1412,

0863	FBE8	DATAINDISKBUFFER              		  0818,  1003,
0019	3235	DAY                           		  0130,
1219	FD41	DCTBYTECOUNT                  		  1234,  1304,
1214	FD3C	DCTCOMMAND                    		  1232,  1258,  1272,  1313,
1220	FD43	DCTDMAADDRESS                 		  1249,  1306,
1216	FD3E	DCTHEAD                       		  1236,  1299,
1222	FD47	DCTNEXTCONTROLLOCATION        		  1257,  1312,
1221	FD45	DCTNEXTSTATUSBLOCK            		  1255,  1310,
1218	FD40	DCTSECTOR                     		  1246,  1302,
1217	FD3F	DCTTRACK                      		  1243,  1286,
1215	FD3D	DCTUNIT                       		  1240,  1283,
0897	FBF9	DEBLOCKINGREQUIRED            		  0715,  0911,  0941,
0044	0004	DEFAULTDISK                   		  0185,  0223,
0057	0080	DEFAULTDISKBUFFER             		  0219,  1370,
0600	F9C1	DIRECTORYBUFFER               		  0565,  0575,  0585,  0595,
0666	FAC1	DISKAALLOCATIONVECTOR         		  0568,
0653	FA61	DISKAWORKAREA                 		  0567,
0667	FAD7	DISKBALLOCATIONVECTOR         		  0578,
0087	F633	DISKBUFFER                    		  0091,  1059,  1305,
0654	FA81	DISKBWORKAREA                 		  0577,
0669	FAED	DISKCALLOCATIONVECTOR         		  0588,
1205	0045	DISKCONTROL5                  		  1311,  1316,  1350,  1360,  1390,
1200	0040	DISKCONTROL8                  		  1256,  1261,
1213	FD3C	DISKCONTROLTABLE              		  1379,
0655	FAA1	DISKCWORKAREA                 		  0587,
0670	FB0C	DISKDALLOCATIONVECTOR         		  0598,
0656	FAB1	DISKDWORKAREA                 		  0597,
1333	FE05	DISKERROR                     		  1278,  1328,
0890	FBF6	DISKERRORFLAG                 		  0997,  1128,  1137,  1330,  1335,
0558	F981	DISKPARAMETERHEADERS          		  0697,
1208	0001	DISKREADCODE                  		  1230,  1270,
1203	0043	DISKSTATUSBLOCK               		  1254,  1309,  1326,  1349,  1359,  1398,
0898	FBFA	DISKTYPE                      		  0712,  1274,
1209	0002	DISKWRITECODE                 		  1226,  1267,
0196	F833	DISPLAYMESSAGE                		  0182,  0206,  1405,
0742	FB63	DMAADDRESS                    		  0746,  1062,  1248,
0433	F935	DUMMYINPUT                    		  0263,
0405	F908	DUMMYINSTATUS                 		  0248,
0446	F94A	DUMMYOUTPUT                   		  0275,  0309,  0320,  0331,
0418	F91D	DUMMYOUTSTATUS                		  0297,

1415	FE7D	END                           		
0012	0000	ENDOFMESSAGE                  		  0144,  1413,
0208	F840	ENTERCPM                      		  0188,  1376,

0053	005C	FCB                           		
0603	0001	FLOPPY5                       		  0615,  1275,
0617	FA42	FLOPPY5PARAMETERBLOCK         		  0566,  0576,
0760	FB6B	FLOPPY5SKEWTABLE              		  0561,  0571,  0591,
0604	0002	FLOPPY8                       		  0632,
0635	FA52	FLOPPY8PARAMETERBLOCK         		  0586,  0596,
0784	FBB3	FLOPPY8SKEWTABLE              		  0581,

0242	F86A	GETCONSOLESTATUS              		  0236,
0289	F89C	GETLISTSTATUS                 		  0283,

1297	FDC7	HEAD0                         		  1293,
0814	FBD3	HOME                          		  0076,
0819	FBDD	HOMENOWRITE                   		  0817,

0859	FBE4	INBUFFERDISK                  		  1029,  1281,
0858	FBE4	INBUFFERDKTRKSEC              		  1011,
0861	FBE7	INBUFFERSECTOR                		  1016,  1033,  1290,
0860	FBE5	INBUFFERTRACK                 		  1031,  1284,
0178	F713	INITIALIZECOMPLETE            		  0161,
0158	F6FD	INITIALIZELOOP                		  0175,
0166	F707	INITIALIZENEXTBYTE            		  0173,
0170	F70A	INITIALIZEPORT                		  0163,
0093	F633	INITIALIZESTREAM              		  0157,
0004	00DB	INOPCODE                      		  0456,  0468,  0484,
0476	F960	INPUTDATA                     		  0424,  0427,  0432,  0480,
0485	F96E	INPUTDATAPORT                 		  0483,
0453	F94B	INPUTSTATUS                   		  0398,  0401,  0404,  0478,
0457	F950	INPUTSTATUSPORT               		  0455,
0042	0003	IOBYTE                        		  0180,  0243,  0257,  0269,  0290,  0302,  0314,  0327,

0029	2000	LENGTHINBYTES                 		
0028	0009	LENGTHINK                     		
0011	000A	LF                            		  0133,  0135,  0136,  0138,  0139,  0140,  0141,  1409,  1412,
0299	F8AC	LIST                          		  0073,
0277	F894	LISTST                        		  0083,

0022	0040	MEMORYSIZE                    		
0018	3038	MONTH                         		  0128,
1162	FD31	MOVEDKTRKSEC                  		  0957,
1164	FD33	MOVEDKTRKSECLOOP              		  1171,
0865	FBE9	MUSTWRITEBUFFER               		  0815,  1022,  1043,  1077,  1135,

0607	0080	NEEDDEBLOCKING                		  0615,  0714,
0982	FC5F	NOTRACKCHANGE                 		  0977,
0672	0004	NUMBEROFLOGICALDISKS          		  0685,

0005	00D3	OUTOPCODE                     		  0169,  0498,
0489	F970	OUTPUTDATA                    		  0439,  0442,  0445,  0493,
0499	F97F	OUTPUTDATAPORT                		  0496,
0465	F956	OUTPUTSTATUS                  		  0411,  0414,  0417,  0491,
0469	F95B	OUTPUTSTATUSPORT              		  0467,

0040	0000	PAGEZERO                      		
0995	FC6E	PERFORMREADWRITE              		  0924,  0985,
0837	0012	PHYSICALSECPERTRACK           		  0839,
0086	0200	PHYSICALSECTORSIZE            		  0088,  0838,  1303,
0893	FBF7	PREREADSECTORFLAG             		  0921,  0984,  0991,  1035,
0311	F8BC	PUNCH                         		  0074,

0055	007D	RANDOMRECORDPOSITION          		
0910	FBFB	READ                          		  0081,
0324	F8CD	READER                        		  0075,
0896	FBF8	READFLAG                      		  0920,  0946,  1072,
1229	FD4E	READNODEBLOCK                 		  0913,
1269	FD96	READPHYSICAL                  		  1037,
1026	FCA3	READSECTORINTOBUFFER          		  1007,
0987	FC66	REQUESTPREREAD                		  0964,  0971,

0841	0002	SECTORBITSHIFT                		
1047	FCC0	SECTORINBUFFER                		  1019,
0840	0003	SECTORMASK                    		  1049,
1021	FC9C	SECTORNOTINBUFFER             		  1014,
0800	FBCD	SECTRAN                       		  0084,
0682	FB2B	SELDSK                        		  0077,
0871	FBEA	SELECTEDDISK                  		  0688,  1028,  1238,
0880	FBF0	SELECTEDDISKDEBLOCK           		
0879	FBEF	SELECTEDDISKTYPE              		
0870	FBEA	SELECTEDDKTRKSEC              		  0955,  0968,  1012,
0877	FBEE	SELECTEDPHYSICALSECTOR        		  1002,  1017,  1032,
0873	FBED	SELECTEDSECTOR                		  0735,  0998,  1048,  1245,
0872	FBEB	SELECTEDTRACK                 		  0726,  1030,  1242,
0335	F8DC	SELECTROUTINE                 		  0244,  0258,  0270,  0293,  0305,  0318,  0329,
0343	F8DD	SELECTROUTINE21               		
0743	FB65	SETDMA                        		  0080,  0220,
0733	FB5E	SETSEC                        		  0079,
0723	FB58	SETTRK                        		  0078,  0821,
0123	F643	SIGNONMESSAGE                 		  0181,
0008	002F	SLASH                         		  0129,  0131,
0007	0020	SPACE                         		  0127,

0365	0001	TERMINALDATAPORT              		  0384,
0425	F926	TERMINALINPUT                 		  0261,
0367	007F	TERMINALINPUTREADY            		  0386,
0399	F8FC	TERMINALINSTATUS              		  0246,
0440	F93E	TERMINALOUTPUT                		  0273,  0307,  0322,  0333,
0366	0080	TERMINALOUTPUTREADY           		  0385,
0412	F911	TERMINALOUTSTATUS             		  0295,
0364	0002	TERMINALSTATUSPORT            		  0383,
0382	F8EE	TERMINALTABLE                 		  0400,  0413,  0426,  0441,
0360	00EC	TTYDATAPORT                   		  0379,
0422	F920	TTYINPUT                      		  0260,
0362	0002	TTYINPUTREADY                 		  0381,
0396	F8F6	TTYINSTATUS                   		  0245,
0437	F938	TTYOUTPUT                     		  0272,  0306,  0319,  0330,
0361	0001	TTYOUTPUTREADY                		  0380,
0409	F90B	TTYOUTSTATUS                  		  0294,
0359	00ED	TTYSTATUSPORT                 		  0378,
0377	F8EA	TTYTABLE                      		  0397,  0410,  0423,  0438,

0885	FBF1	UNALLOCATEDDISK               		
0884	FBF1	UNALLOCATEDDKTRKSEC           		  0956,  0969,
0887	FBF4	UNALLOCATEDSECTOR             		
0886	FBF2	UNALLOCATEDTRACK              		  0979,  0981,
0888	FBF5	UNALOCATEDLRECORDCOUNT        		  0918,  0954,  0962,  0966,  0989,

0017	3041	VERSION                       		  0126,

1393	FE4C	WAITFORBOOTCOMPLETE           		  1396,
1321	FDF3	WAITFORDISKCOMPLETE           		  1263,  1324,
0068	F603	WARMBOOTENTRY                 		  0041,  0213,
1408	FE63	WARMBOOTERROMESSAGE           		  1404,
1403	FE5A	WARMBOOTERROR                 		  1400,
1378	FE37	WARMBOOTREAD                  		  1372,  1375,
1382	FE3F	WARMBYTEMOVE                  		  1388,
1369	FE25	WBOOT                         		  0069,  1406,
0940	FC15	WRITE                         		  0082,
0850	0000	WRITEALLOCATED                		
0851	0001	WRITEDIRECTORY                		  1127,
1225	FD49	WRITENODEBLOCK                		  0943,
1266	FD91	WRITEPHYSICAL                 		  1024,  1136,
0854	FBE3	WRITETYPE                     		  0923,  0948,  1126,
0852	0002	WRITEUNALLOCATED              		  0922,  0949,

0020	3435	YEAR                          		  0132,
