0001: 0000                ;	Pages 165/493 &  204/493  Programmers CPM Handbook by Andy Johnston-Laird
0002: 0000                					               
0003: 0000                                    
0004: 0000                INopCode	EQU		0DBH  
0005: 0000                OUTopCode	EQU		0D3H 
0006: 0000                ; programmers CPM Handbook by Andy Johnson
0007: 0000                                    
0008: 0000                VERSION		EQU		03130H		;Equates for the sign-on Screen
0009: 0000                MONTH		EQU		03830H		; '08'
0010: 0000                DAY			EQU		03930H		; '09'
0011: 0000                Year		EQU		03531H		; '15'
0012: 0000                                    
0013: 0000                MemorySize	EQU 64   
0014: 0000                                    
0015: 0000                CCPLength	EQU 0800H	; Constant
0016: 0000                BDOSLength	EQU 0E00H	; Constant	0E00H
0017: 0000                BIOSLength	EQU 0A00H	; Constant 0900H
0018: 0000                                    
0019: 0000                LengthInK	EQU ((CCPLength + BDOSLength + BIOSLength) /1024) + 1
0020: 0000                LengthInBytes	EQU (CCPLength + BDOSLength + BIOSLength)
0021: 0000                                    
0022: 0000                                    
0023: 0000                ;CCPEntry	EQU	((MemorySize - LengthInK) * (0 + 1024))
0024: 0000                CCPEntry	EQU 0E000H		; forced calculation
0025: 0000                                    
0026: 0000                BDOSEntry	EQU	CCPEntry + CCPLength + 6
0027: 0000                BIOSEntry	EQU	CCPEntry + CCPLength + BDOSLength
0028: 0000                                    
0029: 0000                                    
0030: 0000                ;;;	DefaultDisk	EQU	0004H
0031: 0000                PageZero:	ORG 0000H		; Start of page Zero
0032: 0000     C303F6     	JMP		WarmBootEntry	; warm start
0033: 0003                IOBYTE:             
0034: 0003     01         	DB		01H				; IOBYTE- Console is assigned the CRT device
0035: 0004                DefaultDisk:        
0036: 0004     00         	DB		00H				; Current default drive (A)
0037: 0005     C306E8     	JMP		BDOSEntry		; jump to BDOS entry
0038: 0008                	DS		028H			; interrupt locations 1-5 not used
0039: 0030                	DS		008H			; interrupt location 6 is reserved
0040: 0038     C30000     	JMP		0000H			; rst 7 used only by DDT & SID programs
0041: 003B                	DS		005H			; not currently used
0042: 0040                	DS		010H			; reserved for scratch by CBIOS- not used by CP/M
0043: 0050                	DS		00CH			; not currently used
0044: 005C                FCB:                
0045: 005C                	DS		021H			; Default FCB for transient programs
0046: 007D                RandomRecordPosition:
0047: 007D                	DS		003H			; optional random record position
0048: 0080                DefaultDiskBuffer:  
0049: 0080                	DS		080H			; default 128- byte disk buffer,
0050: 0100                							; also filled with the command line from CCP
0051: 0100                	                   
0052: 0100                                    
0053: 0100                                    
0054: 0100                	ORG		BIOSEntry		; Assemble code at BIOS address
0055: F600                CodeStart:		        
0056: F600                		; BIOS jum Vector 
0057: F600                		                  
0058: F600     C3F9F6     	JMP	BOOT			; 00 Checked
0059: F603                WarmBootEntry:      
0060: F603     C325FE     	JMP	WBOOT			; 01 Checked
0061: F606     C362F8     	JMP	CONST			; 02 Checked
0062: F609     C378F8     	JMP	CONIN			; 03 Checked
0063: F60C     C386F8     	JMP	CONOUT			; 04 Checked
0064: F60F     C3ACF8     	JMP	LIST			; 05 Not Yet Checked
0065: F612     C3BCF8     	JMP	PUNCH			; 06 Not Yet Checked
0066: F615     C3CDF8     	JMP	READER			; 07 Not Yet Checked
0067: F618     C3D3FB     	JMP	HOME			; 08 Not Yet Checked			302		FBD3
0068: F61B     C32BFB     	JMP	SELDSK			; 09 Checked	
0069: F61E     C358FB     	JMP	SETTRK			; 0A Checked
0070: F621     C35EFB     	JMP	SETSEC			; 0B Checked			221		FB5E
0071: F624     C365FB     	JMP	SETDMA			; 0C Checked			230		FB65
0072: F627     C3FBFB     	JMP	READ			; 0D Not Yet Checked			398		FBFB
0073: F62A     C315FC     	JMP	WRITE			; 0E Not Yet Checked			426		FC15
0074: F62D     C394F8     	JMP	LISTST			; 0F Not Yet Checked
0075: F630     C3CDFB     	JMP	SECTRAN			; 10 Not Yet Checked
0076: F633                	                   
0077: F633                PhysicalSectorSize	EQU	512			; for the 5.25" disk the 8" size is 128, 
0078: F633                DiskBuffer:         
0079: F633                	DS	PhysicalSectorSize	
0080: F833                AfterDiskBuffer		EQU	$
0081: F833                                    
0082: F833                		ORG		DiskBuffer		; wind the location counter back
0083: F633                                    
0084: F633                InitializeStream:		; used by the initialization subroutine. Layout:
0085: F633                						;	DB	Port number to be initialized
0086: F633                						;	DB	Number of bytes to be output
0087: F633                						;	DB	xx.xx.xx.xx.xx.xx data to be output
0088: F633                						;	:           
0089: F633                						;	:           
0090: F633                						;	DB	Port numbe of 00H terminator
0091: F633                						;	Console does not need to be initalized. it was done in the PROM
0092: F633                                    
0093: F633     00         		DB	00H			; no setup needed !!CommunicationStatusPort	; intel 8251 ?
0094: F634     06         		DB	06H		; number of bytes
0095: F635     00         		DB	0		; get chip ready by sending data out to it
0096: F636     00         		DB	0              
0097: F637     00         		DB	0              
0098: F638     42         		DB	042H;	; Reset and raise data terminal ready
0099: F639     6E         		DB	06Eh	; 1 stop bit, no parity, 8bits/char baud rate / 16
0100: F63A     25         		DB	025H	;Raise request to send, and enable transmit and receive
0101: F63B                		                  
0102: F63B     DF         		DB	CommunicationBaudMode;	Intel 8253 time
0103: F63C     01         		DB	01H		; number of bytes
0104: F63D     B6         		DB	0B6H	; select counter2, load LS Byte
0105: F63E                		                  
0106: F63E     DE         		DB	CommunicationBaudRate
0107: F63F     02         		DB	02H		; number of bytes
0108: F640     3800       		DW	0038H	; 1200 baud rate
0109: F642                		                  
0110: F642     00         		DB	0		; port number of 0 terminates
0111: F643                		                  
0112: F643                ;  Equates for the sign in message
0113: F643                                    
0114: F643                CR		EQU	0DH		; Carriage Return
0115: F643                LF		EQU	0AH		; Line Feed
0116: F643                                    
0117: F643                SignOnMessage:		; Main sign on message
0118: F643     43502F4D20 		DB	43H,50H,2FH,4DH,20H		; CP/M 2.2.
0119: F648     322E322E   		DB	32H,2EH,32H,2EH			;(2.2.)
0120: F64C     3031       		DW	VERSION        
0121: F64E                ;		DB	30H,30H		; VERSION
0122: F64E     20         		DB	20H            
0123: F64F     3038       		DW	MONTH          
0124: F651                ;		DB	30H,37H		; MONTH
0125: F651     2F         		DB	2FH			; /      
0126: F652     3039       		DW	DAY            
0127: F654                ;		DB	31H,35H		; DAY
0128: F654     2F         		DB	2FH			; /      
0129: F655     3135       		DW	YEAR           
0130: F657                ;		DB	38H,32H		; YEAR
0131: F657     0D0A0A     		DB	CR,LF,LF       
0132: F65A                		                  
0133: F65A     53696D706C 		DB	53H,69H,6DH,70H,6CH		;Simple BIOS
0134: F65F     652042494F53 		DB	65H,20H,42H,49H,4fH,53H
0135: F665     0D0A0A     		DB	CR,LF,LF       
0136: F668                		                  
0137: F668     4469736B20 		DB	44H,69H,73H,6BH,20H		; Disk configuration :
0138: F66D     636F6E6669 		DB 	63H,6FH,6EH,66H,69H
0139: F672     6775726174 		DB	67H,75H,72H,61H,74H
0140: F677     696F6E203A 		DB	69H,6FH,6EH,20H,3Ah
0141: F67C     0D0A0A     		DB	CR,LF,LF       
0142: F67F                		                  
0143: F67F     2020202020 		DB	20H,20H,20H,20H,20H		; A: 0.35 Mbyte 5" Floppy' 
0144: F684     413A20302E3335 		DB	41H,3AH,20H,30H,2EH,33H,35H
0145: F68B     204D62797465 		DB	20H,4DH,62H,79H,74H,65H
0146: F691     20352220   		DB	20H,35H,22H,20H
0147: F695     466C6F707079 		DB	46H,6CH,6FH,70H,70H,79H
0148: F69B     0D0A       		DB	CR,LF          
0149: F69D                		                  
0150: F69D     2020202020 		DB	20H,20H,20H,20H,20H		; B: 0.35 Mbyte 5" Floppy'
0151: F6A2     423A20302E3335 		DB	42H,3AH,20H,30H,2EH,33H,35H
0152: F6A9     204D62797465 		DB	20H,4DH,62H,79H,74H,65H
0153: F6AF     20352220   		DB	20H,35H,22H,20H
0154: F6B3     466C6F707079 		DB	46H,6CH,6FH,70H,70H,79H
0155: F6B9     0D0A0A     		DB	CR,LF,LF       
0156: F6BC                		                  
0157: F6BC     2020202020 		DB	20H,20H,20H,20H,20H		; C: 0.24 Mbyte 8" Floppy
0158: F6C1     433A20302E3234 		DB	43H,3AH,20H,30H,2EH,32H,34H
0159: F6C8     204D62797465 		DB	20H,4DH,62H,79H,74H,65H
0160: F6CE     20352220   		DB	20H,35H,22H,20H
0161: F6D2     466C6F707079 		DB	46H,6CH,6FH,70H,70H,79H
0162: F6D8     0D0A       		DB	CR,LF          
0163: F6DA                		                  
0164: F6DA     2020202020 		DB	20H,20H,20H,20H,20H		; D: 0.24 Mbyte 8" Floppy
0165: F6DF     443A20302E3234 		DB	44H,3AH,20H,30H,2EH,32H,34H
0166: F6E6     204D62797465 		DB	20H,4DH,62H,79H,74H,65H
0167: F6EC     20352220   		DB	20H,35H,22H,20H
0168: F6F0     466C6F707079 		DB	46H,6CH,6FH,70H,70H,79H
0169: F6F6     0D0A       		DB	CR,LF          
0170: F6F8                		                  
0171: F6F8                ;		DB	20H,20H,20H,20H,20H
0172: F6F8                ;		DB	20H,20H,20H,20H,20H
0173: F6F8                ;		DB	20H,20H,20H,20H,20H
0174: F6F8                ;		DB	20H,20H,20H,20H,20H
0175: F6F8                		                  
0176: F6F8                ;		DS	84H		; 132  sign on message goes here
0177: F6F8                		                  
0178: F6F8     00         		DB	00             
0179: F6F9                		                  
0180: F6F9                	                   
0181: F6F9                ;219--------------------BOOT-----------------------------	
0182: F6F9                	                   
0183: F6F9                	BOOT:		; entered directly from the BIOS JMP vector
0184: F6F9                				; Control transfered by the CP/M bootstrap loader
0185: F6F9                				; initial state will be determined by the PROM
0186: F6F9                				                
0187: F6F9                				; setting up 8251 & 8253 --
0188: F6F9     F3         	DI                 
0189: F6FA                					; on this system the console is already initialized so the
0190: F6FA                					; InitializeStream is not used here
0191: F6FA     2133F6     	LXI		H,InitializeStream		;HL-> Data stream for port initialization (none here)
0192: F6FD                InitializeLoop:     
0193: F6FD     7E         	MOV		A,M					; get port #
0194: F6FE     B7         	ORA		A					; if 00H then done
0195: F6FF     CA13F7     	JZ		InitializeComplete
0196: F702                	                   
0197: F702     320AF7     	STA		InitializePort		; set up OUT instruction
0198: F705     23         	INX		H					; HL -> count # of bytes to output
0199: F706     4E         	MOV		C,M					; get byte count
0200: F707                InitializeNextByte: 
0201: F707     23         	INX		H	            
0202: F708     7E         	MOV		A,M					; get next byte
0203: F709     D3         	DB		OUTopCode			; OUT instruction output to correct port
0204: F70A                InitializePort:     
0205: F70A     00         	DB		0					; set by above code (self modifying code!!!!!)
0206: F70B     0D         	DCR		C					; Count down
0207: F70C     C207F7     	JNZ		InitializeNextByte
0208: F70F     23         	INX		H					; HL-> next port number
0209: F710     C3FDF6     	JMP		InitializeLoop		; go back for more
0210: F713                ;----------- above not needed with the console ------------------------	
0211: F713                                    
0212: F713                InitializeComplete: 
0213: F713     3E01       	MVI		A,01H				; set up for terminal to be console
0214: F715     320300     	STA		IOBYTE				; save in Page 0
0215: F718     2143F6     	LXI		H,SignonMessage
0216: F71B     CD33F8     	CALL	DisplayMessage		; display the signon message
0217: F71E                	                   
0218: F71E     AF         	XRA		A					; Set default disk to A: (0)
0219: F71F     320400     	STA		DefaultDisk   
0220: F722     FB         	EI							; enable the interrupts
0221: F723                	                   
0222: F723     C340F8     	JMP		EnterCPM			; Complete initialization and enter CP/M
0223: F726                								; by going to the Console Command Processor
0224: F726                ;271---------------End of Cold Boot Initialization Code--------------
0225: F726                                    
0226: F726                		ORG AfterDiskBuffer		; reset Location Counter
0227: F833                		                  
0228: F833                		                  
0229: F833                						; HL points at a Zero-Byte terminated string to be output
0230: F833                DisplayMessage:     
0231: F833     7E         	MOV		A,M					; get next message byte
0232: F834     B7         	ORA		A					; terminator (a = 0)?
0233: F835     C8         	RZ							; Yes, thes return to caller
0234: F836                	                   
0235: F836     4F         	MOV		C,A					; prepare for output
0236: F837     E5         	PUSH	HL					; save message pointer
0237: F838     CD86F8     	CALL	CONOUT				; go to main console output routine	*******
0238: F83B     E1         	POP		H             
0239: F83C     23         	INX		H 					; point at next character
0240: F83D     C333F8     	JMP		DisplayMessage		; loop till done
0241: F840                	                   
0242: F840                EnterCPM:           
0243: F840     3EC3       	MVI		A,0C3H				; JMP op code
0244: F842     320000     	STA		0000H				; set up the jump in location 0000H
0245: F845     320500     	STA		0005H				; and at location 0005H
0246: F848                	                   
0247: F848     2103F6     	LXI		H,WarmBootEntry		; get BIOS vector address
0248: F84B     220100     	SHLD	0001H				; put address in location 1
0249: F84E                	                   
0250: F84E     2106E8     	LXI		H,BDOSEntry			; Get BDOS entry point address
0251: F851     220600     	SHLD	0006H				; put address at location 5
0252: F854                	                   
0253: F854     018000     	LXI		B,DefaultDiskBuffer	; set disk I/O address to default
0254: F857     CD65FB     	CALL	SETDMA				; use normal BIOS routine		****************************************************************
0255: F85A                	                   
0256: F85A     FB         	EI                 
0257: F85B     3A0400     	LDA		DefaultDisk		; Transfer current default disk to
0258: F85E     4F         	MOV		C,A				; Console Command Processor
0259: F85F     C300E0     	JMP		CCPEntry		; transfer to CCP
0260: F862                		                  
0261: F862                		                  
0262: F862                		                  
0263: F862                ;IOBYTE	EQU		0003H		;I/O redirection byte
0264: F862                                    
0265: F862                ;333--------------------CONST----------------------------
0266: F862                	; Entered directly from BIOS JMP vector, returns Register A
0267: F862                	; 00H -> No data   
0268: F862                	; 0FFH -> there is data
0269: F862                CONST:              
0270: F862     CD6AF8     	CALL	GetConsoleStatus	; return A= zero or not zero
0271: F865     B7         	ORA		A             
0272: F866     C8         	RZ							; if 0 no returning data
0273: F867     3EFF       	MVI		A,0FFH				; else indicate there is data
0274: F869     C9         	RET                
0275: F86A                	                   
0276: F86A                GetConsoleStatus:   
0277: F86A     3A0300     	LDA		IOBYTE		; Get IO redirection byte
0278: F86D     CDDCF8     	CALL	SelectRoutine	; these routines return to the caller of GetConsoleStatus
0279: F870     F6F8       	DW		TTYInStatus				; 00  <- IOBYTE bits 1,0
0280: F872     FCF8       	DW		TerminalInStatus		; 01
0281: F874     02F9       	DW		CommunicationInStatus	; 10
0282: F876     08F9       	DW		DummyInStatus			; 11
0283: F878                	                   
0284: F878                CONIN:              
0285: F878                	; Get console Input character entered directly from the BIOS jmp Vector
0286: F878                	; return the character from the console in the A register.
0287: F878                	; most significant bit will be 0. except when "reader" (communication)
0288: F878                	; port has input , all 8 bits are reurned
0289: F878                	;                  
0290: F878                	; normally this follows a call to CONST ( a blocking call) to indicates a char is ready.
0291: F878     3A0300     	LDA		IOBYTE				; get i/o redirection byte
0292: F87B     CDDCF8     	CALL 	SelectRoutine
0293: F87E                			; Vectors to device routines
0294: F87E     20F9       	DW		TTYInput			; 00 <- IOBYTE bits 1,0
0295: F880     26F9       	DW		TerminalInput		; 01
0296: F882     2FF9       	DW		CommunicationInput	; 10
0297: F884     35F9       	DW		DummyInput			; 11
0298: F886                	                   
0299: F886                CONOUT:             
0300: F886                	; Console output, entered directly from BIOS JMP Vector. it outputs the 
0301: F886                	; character in the C register to the appropriate device according to
0302: F886                	; bits 1,0 of IOBYTE
0303: F886     3A0300     	LDA		IOBYTE				; get i/o redirection byte
0304: F889     CDDCF8     	CALL 	SelectRoutine
0305: F88C                			; Vectors to device routines
0306: F88C     38F9       	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0307: F88E     3EF9       	DW		TerminalOutput		; 01
0308: F890     44F9       	DW		CommunicationOutput	; 10
0309: F892     4AF9       	DW		DummyOutput			; 11
0310: F894                	                   
0311: F894                LISTST:             
0312: F894                	; List Device (output) status entered directly from the BIOS JMP Vector
0313: F894                	; returns in A the list device status that indicates if the device will
0314: F894                	; accept another character the IOBYTE's bits 7,6 determin the physical device
0315: F894                	; A = 00H (zero flag set): cannot accpet data
0316: F894                	; A = 0FFH ( zero flag cleared): can accept data
0317: F894     CD9CF8     	CALL	GetListStatus	; return  A = 0 or non-zero	
0318: F897     B7         	ORA		A				; set flags
0319: F898     C8         	RZ						; exit if not ready
0320: F899     3EFF       	MVI		a,0FFH			; else set retuen value for ok
0321: F89B     C9         	RET	               
0322: F89C                	; exit             
0323: F89C                GetListStatus:      
0324: F89C     3A0300     	LDA		IOBYTE        
0325: F89F     07         	RLC						; move bits 7,6
0326: F8A0     07         	RLC						; to 1,0  
0327: F8A1     CDDCF8     	CALL	SelectRoutine 
0328: F8A4     0BF9       	DW		TTYOutStatus			; 00 <- IOBYTE bits 1,0
0329: F8A6     11F9       	DW		TerminalOutStatus		; 01
0330: F8A8     17F9       	DW		CommunicationOutStatus	; 10
0331: F8AA     1DF9       	DW		DummyOutStatus			; 11
0332: F8AC                	                   
0333: F8AC                LIST:					; List output
0334: F8AC                						; entered directly from the BIOS JMP Vector
0335: F8AC                						; outputs the data in Register C
0336: F8AC     3A0300     	LDA		IOBYTE        
0337: F8AF     07         	RLC						; move bits 7,6
0338: F8B0     07         	RLC						; to 1,0  
0339: F8B1     CDDCF8     	CALL	SelectRoutine 
0340: F8B4     38F9       	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0341: F8B6     3EF9       	DW		TerminalOutput		; 01
0342: F8B8     44F9       	DW		CommunicationOutput	; 10
0343: F8BA     4AF9       	DW		DummyOutput			; 11
0344: F8BC                	                   
0345: F8BC                PUNCH:					; Punch output
0346: F8BC                						; entered directly from the BIOS JMP Vector
0347: F8BC                						; outputs the data in Register C
0348: F8BC     3A0300     	LDA		IOBYTE        
0349: F8BF     07         	RLC						; move bits 5,4
0350: F8C0     07         	RLC                
0351: F8C1     07         	RLC						; to 1,0  
0352: F8C2     CDDCF8     	CALL	SelectRoutine 
0353: F8C5     38F9       	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0354: F8C7     4AF9       	DW		DummyOutput			; 01
0355: F8C9     44F9       	DW		CommunicationOutput	; 10
0356: F8CB     3EF9       	DW		TerminalOutput		; 11
0357: F8CD                	                   
0358: F8CD                READER:					; Reader Input
0359: F8CD                						; entered directly from the BIOS JMP Vector
0360: F8CD                						; inputs data into the A register
0361: F8CD     3A0300     	LDA		IOBYTE        
0362: F8D0     07         	RLC						; move bits 3,2  to 1,0
0363: F8D1     CDDCF8     	CALL	SelectRoutine 
0364: F8D4     38F9       	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0365: F8D6     4AF9       	DW		DummyOutput			; 01
0366: F8D8     44F9       	DW		CommunicationOutput	; 10
0367: F8DA     3EF9       	DW		TerminalOutput		; 11
0368: F8DC                	                   
0369: F8DC                SelectRoutine:	     
0370: F8DC                		; SelectRoutine. When called, the calling code has a vector table immediately following it.
0371: F8DC                		; it is used to get the correct physical routine determined by the IOBYTE bits for the
0372: F8DC                		; logical device. (00,01,10,11). 
0373: F8DC                		; It will transfer control to a specified address following its calling address
0374: F8DC                		; according to the values in bits 1, 0 in A.		
0375: F8DC                                    
0376: F8DC     07         	RLC				; Shift select values into bits 2,1 in order to do word arithmetic
0377: F8DD                SelectRoutine21:	; entry point if bits already in 2,1
0378: F8DD     E606       	ANI		06H		; isolate bits 2 and 1
0379: F8DF     E3         	XTHL			; HL-> first word of address after CALL instruction
0380: F8E0     5F         	MOV		E,A		; Add on selection value to address table base
0381: F8E1     1600       	MVI		D,00H         
0382: F8E3     19         	DAD		D		; HL-> now has the selected routine
0383: F8E4     7E         	MOV		A,M		; LS Byte
0384: F8E5     23         	INX		H		; HL-> MS byte
0385: F8E6     66         	MOV		H,M		; MS byte
0386: F8E7     6F         	MOV		L,A		; HL->routine
0387: F8E8     E3         	XTHL			; top of stack -> routine
0388: F8E9     C9         	RET				; transfer control to the selected routine
0389: F8EA                                    
0390: F8EA                	                   
0391: F8EA                ;------------------------- Input/Output Equates---------------------------------------
0392: F8EA                                    
0393: F8EA                TTYStatusPort				EQU	0EDH
0394: F8EA                TTYDataPort					EQU	0ECH
0395: F8EA                TTYOutputReady				EQU	01H		; Status Mask
0396: F8EA                TTYInputReady				EQU	02H		; Status Mask
0397: F8EA                                    
0398: F8EA                TerminalStatusPort			EQU	02H
0399: F8EA                TerminalDataPort			EQU	01H
0400: F8EA                TerminalOutputReady			EQU	80H		; Status Mask - ready for output
0401: F8EA                TerminalInputReady			EQU	07FH	; Status Mask - bytes yet to have been read
0402: F8EA                                    
0403: F8EA                CommunicationStatusPort		EQU	0EDH
0404: F8EA                CommunicationDataPort		EQU	0ECH
0405: F8EA                CommunicationOutputReady	EQU	01H		; Status Mask
0406: F8EA                CommunicationInputReady		EQU	02H		; Status Mask
0407: F8EA                                    
0408: F8EA                CommunicationBaudMode		EQU	0DFH
0409: F8EA                CommunicationBaudRate		EQU	0DEH
0410: F8EA                                    
0411: F8EA                TTYTable:           
0412: F8EA     ED         		DB		TTYStatusPort 
0413: F8EB     EC         		DB		TTYDataPort   
0414: F8EC     01         		DB		TTYOutputReady
0415: F8ED     02         		DB		TTYInputReady 
0416: F8EE                TerminalTable:      
0417: F8EE     02         		DB		TerminalStatusPort
0418: F8EF     01         		DB		TerminalDataPort
0419: F8F0     80         		DB		TerminalOutputReady
0420: F8F1     7F         		DB		TerminalInputReady
0421: F8F2                CommunicationTable: 
0422: F8F2     ED         		DB		CommunicationStatusPort
0423: F8F3     EC         		DB		CommunicationDataPort
0424: F8F4     01         		DB		CommunicationOutputReady
0425: F8F5     02         		DB		CommunicationInputReady
0426: F8F6                ;------------------------- Input/Output Equates---------------------------------------
0427: F8F6                                    
0428: F8F6                                    
0429: F8F6                ;590----------------------routines called by SelectRoutine----------------------------
0430: F8F6                TTYInStatus:        
0431: F8F6     21EAF8     		LXI		H,TTYTable				;HL-> control table
0432: F8F9     C34BF9     		JMP		InputStatus				; use of JMP, InputStatus will execute thr RETurn
0433: F8FC                TerminalInStatus:   
0434: F8FC     21EEF8     		LXI		H,TerminalTable			;HL-> control table
0435: F8FF     C34BF9     		JMP		InputStatus				; use of JMP, InputStatus will execute thr RETurn
0436: F902                CommunicationInStatus:
0437: F902     21F2F8     		LXI		H,CommunicationTable	;HL-> control table
0438: F905     C34BF9     		JMP		InputStatus				; use of JMP, InputStatus will execute thr RETurn
0439: F908                DummyInStatus:      
0440: F908     3EFF       		MVI		A,0FFH					; Dummy always indicates data ready
0441: F90A     C9         		RET               
0442: F90B                		                  
0443: F90B                TTYOutStatus:       
0444: F90B     21EAF8     		LXI		H,TTYTable				;HL-> control table
0445: F90E     C356F9     		JMP		OutputStatus			; use of JMP, OutputStatus will execute thr RETurn
0446: F911                TerminalOutStatus:  
0447: F911     21EEF8     		LXI		H,TerminalTable			;HL-> control table
0448: F914     C356F9     		JMP		OutputStatus			; use of JMP, OutputStatus will execute thr RETurn
0449: F917                CommunicationOutStatus:
0450: F917     21F2F8     		LXI		H,CommunicationTable	;HL-> control table
0451: F91A     C356F9     		JMP		OutputStatus			; use of JMP, OutputStatus will execute thr RETurn
0452: F91D                DummyOutStatus:     
0453: F91D     3EFF       		MVI		A,0FFH					; Dummy always indicates ready to output data
0454: F91F     C9         		RET               
0455: F920                                    
0456: F920                TTYInput:           
0457: F920     21EAF8     		LXI		H,TTYTable				;HL-> control table
0458: F923     C360F9     		JMP		InputData				; use of JMP, InputStatus will execute thr RETurn
0459: F926                TerminalInput:      
0460: F926     21EEF8     		LXI		H,TerminalTable			;HL-> control table
0461: F929     CD60F9     		CALL	InputData				;** special **
0462: F92C     E67F       		ANI		07FH					; Strip off high order bit
0463: F92E     C9         		RET	              
0464: F92F                CommunicationInput: 
0465: F92F     21F2F8     		LXI		H,CommunicationTable	;HL-> control table
0466: F932     C360F9     		JMP		InputData				; use of JMP, InputStatus will execute thr RETurn
0467: F935                DummyInput:         
0468: F935     3E1A       		MVI		A,01AH					; Dummy always returns EOF
0469: F937     C9         		RET               
0470: F938                		                  
0471: F938                TTYOutput:          
0472: F938     21EAF8     		LXI		H,TTYTable				;HL-> control table
0473: F93B     C370F9     		JMP		OutputData				; use of JMP, InputStatus will execute thr RETurn
0474: F93E                TerminalOutput:     
0475: F93E     21EEF8     		LXI		H,TerminalTable			;HL-> control table
0476: F941     C370F9     		JMP		OutputData				; use of JMP, InputStatus will execute thr RETurn
0477: F944                CommunicationOutput:
0478: F944     21F2F8     		LXI		H,CommunicationTable	;HL-> control table
0479: F947     C370F9     		JMP		OutputData				; use of JMP, InputStatus will execute thr RETurn
0480: F94A                DummyOutput:        
0481: F94A     C9         		RET						; Dummy always discards the data
0482: F94B                                    
0483: F94B                ;680---------------------General purpose low-level drivers-------------------
0484: F94B                                    
0485: F94B                ; On entry, HL points to appropriate control table, for output Register C contains the data to output
0486: F94B                                    
0487: F94B                InputStatus:					; return- A = 00H no incoming data
0488: F94B     7E         		MOV		A,M				; get status port
0489: F94C     3250F9     		STA		InputStatusPort	;** self modifying code
0490: F94F     DB         		DB		INopCode		; IN opcode
0491: F950                InputStatusPort:    
0492: F950     00         		DB		00H				; <- set from above
0493: F951     23         		INX		H				; move HL to point to input data mask
0494: F952     23         		INX		H            
0495: F953     23         		INX		H            
0496: F954     A6         		ANA		M				; mask with input status
0497: F955     C9         		RET						; return with status (00 nothing, FF - data available)
0498: F956                		                  
0499: F956                OutputStatus:						; return - A = 00H not ready
0500: F956     7E         		MOV		A,M          
0501: F957     325BF9     		STA		OutputStatusPort
0502: F95A     DB         		DB		INopCode			; IN opcode
0503: F95B                OutputStatusPort:   
0504: F95B     00         		DB		00H					; <- set from above
0505: F95C     23         		INX		H					;HL , Output status mask
0506: F95D     23         		INX		H            
0507: F95E     A6         		ANA		M					; mask with output status, 00 = Not ready
0508: F95F     C9         		RET               
0509: F960                		                  
0510: F960                InputData:							; return with next character
0511: F960     E5         		PUSH	H					; save control table pointer
0512: F961     CD4BF9     		CALL	InputStatus  
0513: F964     E1         		POP		H					; restore the control table
0514: F965     CA60F9     		JZ		InputData			; wait until incoming data
0515: F968     23         		INX		H					; HL <- data port
0516: F969     7E         		MOV		A,M					; get data port
0517: F96A     326EF9     		STA		InputDataPort		; modify code here
0518: F96D     DB         		DB		INopCode			; do the actual I/O
0519: F96E                InputDataPort:      
0520: F96E     00         		DB		00H					; <- set from above
0521: F96F     C9         		RET							; return with data in A
0522: F970                		                  
0523: F970                OutputData:							; data in Register C is output
0524: F970     E5         		PUSH	H					; save control table pointer
0525: F971     CD56F9     		CALL	OutputStatus 
0526: F974     E1         		POP		H					; restore table pointer
0527: F975     CA70F9     		JZ		OutputData			; wait until incoming data
0528: F978     23         		INX		H					; HL <- data port
0529: F979     7E         		MOV		A,M					; get data port
0530: F97A     327FF9     		STA		OutputDataPort		; store it here Modify the code
0531: F97D     79         		MOV		A,C					; get the data to output
0532: F97E     D3         		DB		OUTopCode			; Do the I/O here !!
0533: F97F                OutputDataPort:     
0534: F97F     00         		DB		00H					; <- set from above
0535: F980     C9         		RET               
0536: F981                		                  
0537: F981                ;746,795            
0538: F981                ;  page 175 -----------------High Level Diskette drivers--------------------	
0539: F981                                    
0540: F981                                    
0541: F981                                    
0542: F981                					; listing starts on page 175/493 FIgure 6-4
0543: F981                					; in Programmers CPM Handbook by
0544: F981                					; Andy Johnston-Laird
0545: F981                                    
0546: F981                ;	ORG	0F981H	; Continue from bios.asm
0547: F981                ; PhysicalSectorSize	EQU	512			; for the 5.25" disk the 8" size is 128,
0548: F981                	                   
0549: F981                ; 					High level diskette drivers
0550: F981                ;                   
0551: F981                ;                   
0552: F981                ; These drivers perform the following functions:
0553: F981                ;                   
0554: F981                ; SELDSK		Select a specific disk and return the address of
0555: F981                ;				the appropriate disk parameter header
0556: F981                ; SETTRK		Set the track number for the next read or write
0557: F981                ; SETSEC		Set the sector number for the next read or write
0558: F981                ; SETDMA		Set the DMA (read/write) address for the next read or write
0559: F981                ; SECTRAN	Translate a logical sector number into a physical
0560: F981                ; HOME		Set the track to 0 so that the next read or write will
0561: F981                ;				be on Track 0  
0562: F981                ;                   
0563: F981                ; In addition, the high-level drivers are responsible for making
0564: F981                ; the 5 1/4"" floppy diskettes that use a 512-byte sector appear
0565: F981                ; to CP/M as though they use a 128-byte sector. They do this
0566: F981                ; by using what is called blocking/de-blocking code,
0567: F981                ; described in more detail later in this listing.
0568: F981                ;                   
0569: F981                ;                   
0570: F981                ; 					Disk Parameter Tables
0571: F981                ;                   
0572: F981                ; As discussed in Chapter 3, these describe the physical
0573: F981                ; characteristics of the disk drives. In this example BIOS,
0574: F981                ; there are two types of disk drives: standard single-sided,
0575: F981                ; single-density 8", and double-sided, double-density 5 1/4"
0576: F981                ; diskettes.        
0577: F981                ;                   
0578: F981                ; The standard 8" diskettes do not need the blocking/de-blocking
0579: F981                ; code, but the 5 1/4" drives do. Therefore an additional
0580: F981                ; byte has been prefixed to the disk parameter block to
0581: F981                ; tell the disk drivers each logical disk's physical
0582: F981                ; diskette type, and whether or not it needs de-blocking.
0583: F981                ;                   
0584: F981                ;                   
0585: F981                ; 					Disk Definition Tables
0586: F981                ;                   
0587: F981                ; These consists of disk parameter headers, with one entry
0588: F981                ; per logical disk driver, and disk parameter blocks, with
0589: F981                ; either one parameter block per logical disk or the same
0590: F981                ; parameter block for several logical disks.
0591: F981                ;                   
0592: F981                DiskParameterHeaders:		; described in chapter 3
0593: F981                                    
0594: F981                		; Logical Disk A: (5 1/4" Diskette)
0595: F981     6BFB       	DW	Floppy5SkewTable				; 5 1/4" skew table
0596: F983     0000       	DW	0								; Rel pos for file (0-3)
0597: F985     0000       	DW	0								; Last Selected Track #
0598: F987     0000       	DW	0								; Last Selected Sector #
0599: F989     C1F9       	DW	DirectoryBuffer 
0600: F98B     42FA       	DW	Floppy5ParameterBlock
0601: F98D     61FA       	DW	DiskAWorkArea   
0602: F98F     C1FA       	DW	DiskAAllocationVector
0603: F991                	                   
0604: F991                		; Logical Disk B: (5 1/4" Diskette)
0605: F991     6BFB       	DW	Floppy5SkewTable	; shares the same skew table as A:
0606: F993     0000       	DW	0								; Rel pos for file (0-3)
0607: F995     0000       	DW	0								; Last Selected Track #
0608: F997     0000       	DW	0								; Last Selected Sector #
0609: F999     C1F9       	DW	DirectoryBuffer		; all disks use this buffer
0610: F99B     42FA       	DW	Floppy5ParameterBlock
0611: F99D     81FA       	DW	DiskBWorkArea   
0612: F99F     D7FA       	DW	DiskBAllocationVector
0613: F9A1                	                   
0614: F9A1                		; Logical Disk C: (8" Floppy)
0615: F9A1     B3FB       	DW	Floppy8SkewTable	; 8" skew table
0616: F9A3     0000       	DW	0								; Rel pos for file (0-3)
0617: F9A5     0000       	DW	0								; Last Selected Track #
0618: F9A7     0000       	DW	0								; Last Selected Sector #
0619: F9A9     C1F9       	DW	DirectoryBuffer		; all disks use this buffer
0620: F9AB     52FA       	DW	Floppy8ParameterBlock
0621: F9AD     A1FA       	DW	DiskCWorkArea   
0622: F9AF     EDFA       	DW	DiskCAllocationVector
0623: F9B1                	                   
0624: F9B1                		; Logical Disk D: (8" Floppy)
0625: F9B1     6BFB       	DW	Floppy5SkewTable	; shares the same skew table as A:
0626: F9B3     0000       	DW	0								; Rel pos for file (0-3)
0627: F9B5     0000       	DW	0								; Last Selected Track #
0628: F9B7     0000       	DW	0								; Last Selected Sector #
0629: F9B9     C1F9       	DW	DirectoryBuffer		; all disks use this buffer
0630: F9BB     52FA       	DW	Floppy8ParameterBlock
0631: F9BD     B1FA       	DW	DiskDWorkArea   
0632: F9BF     0CFB       	DW	DiskDAllocationVector
0633: F9C1                	                   
0634: F9C1                DirectoryBuffer:	DS	128
0635: FA41                                    
0636: FA41                	; Disk Types       
0637: FA41                Floppy5		EQU		1 		; 5 1/4" mini floppy
0638: FA41                Floppy8		EQU		2 		; 8"  floppy (SS SD)
0639: FA41                                    
0640: FA41                	; blocking/de-blocking indicator
0641: FA41                NeedDeblocking	EQU 	080H	; Sector size > 128 bytes
0642: FA41                                    
0643: FA41                                    
0644: FA41                	; Disk Parameter Blocks
0645: FA41                	                   
0646: FA41                	; 5 1/4" mini floppy
0647: FA41                							; extra byte prefixed to indicate 
0648: FA41                							; disk type and blocking required
0649: FA41     81         	DB	Floppy5 + NeedDeblocking
0650: FA42                	                   
0651: FA42                Floppy5ParameterBlock:
0652: FA42     4800       	DW	048H				; 128-byte sectors per track- (72)
0653: FA44     04         	DB	04H					; Block shift ( 4=> 2K)
0654: FA45     0F         	DB	0FH					; Block mask
0655: FA46     01         	DB	01 					; Extent mask
0656: FA47     AE00       	DW	0AEH 				; Maximum allocation block number (174)
0657: FA49     7F00       	DW	07FH 				; Number of directory entries - 1 (127)
0658: FA4B     C0         	DB	0C0H				; Bit map for reserving 1 alloc. block
0659: FA4C     00         	DB	00					;  for file directory
0660: FA4D     2000       	DW	020H				;Disk change work area size (32)
0661: FA4F     0100       	DW	01					; Number of tracks before directory
0662: FA51                	                   
0663: FA51                	; Standard 8" floppy
0664: FA51                							; extra byte prefixed to DPB for 
0665: FA51                							;  this version of the BIOS
0666: FA51     02         	DB	Floppy8				; Indicates disk type and the fact
0667: FA52                							;   that no de-blocking is required
0668: FA52                	                   
0669: FA52                Floppy8ParameterBlock:
0670: FA52     1A00       	DW	01AH				; sectors per track (26)
0671: FA54     03         	DB	03					; Block shift (3=>1K)
0672: FA55     07         	DB	07					; Block mask
0673: FA56     00         	DB	00 					; Extent mask
0674: FA57     F200       	DW	0F2H 				; Maximum allocation block number (242)
0675: FA59     3F00       	DW	03FH 				; Number of directory entries - 1 (63)
0676: FA5B     C0         	DB	0C0H				; Bit map for reserving 2 alloc. block
0677: FA5C     00         	DB	00					;  for file directory
0678: FA5D     1000       	DW	010H				;Disk change work area size (16)
0679: FA5F     0200       	DW	02					; Number of tracks before directory
0680: FA61                	                   
0681: FA61                			; Disk work area 
0682: FA61                	                   
0683: FA61                	; These are used by the BDOS to detect any unexpected
0684: FA61                	; change of diskette. The BDOS will automatically set
0685: FA61                	; such a changed diskette to read-only status.
0686: FA61                	                   
0687: FA61                DiskAWorkArea:	DS	020H		; A:
0688: FA81                DiskBWorkArea:	DS	020H		; B:
0689: FAA1                DiskCWorkArea:	DS	010H		; C:
0690: FAB1                DiskDWorkArea:	DS	010H		; D:
0691: FAC1                                    
0692: FAC1                	                   
0693: FAC1                			; Disk allocation vectors
0694: FAC1                			                 
0695: FAC1                		; These are used by the BDOS to maintain a bit map of
0696: FAC1                		; which allocation blocks are used and which are free.
0697: FAC1                		; One byte is used for eight allocation blocks, hence the
0698: FAC1                		; expression of the form (allocation blocks/8)+1
0699: FAC1                                    
0700: FAC1                DiskAAllocationVector:	DS		(174/8)+1 	; A:
0701: FAD7                DiskBAllocationVector:	DS		(174/8)+1 	; B:
0702: FAED                	                   
0703: FAED                DiskCAllocationVector:	DS		(242/8)+1 	; C:
0704: FB0C                DiskDAllocationVector:	DS		(242/8)+1 	; A:
0705: FB2B                	                   
0706: FB2B                NumberOfLogicalDisks	EQU 4
0707: FB2B                                    
0708: FB2B                                    
0709: FB2B                		;  Disk routines  
0710: FB2B                		                  
0711: FB2B                ;**********************
0712: FB2B                ;SELDSK - Select disk in C. C=0 for A: 1 for B: etc.
0713: FB2B                ;  Return the address of the appropriate disk parameter header
0714: FB2B                ;  in HL, or 0000H if selected disk does not exist		
0715: FB2B                ;**********************	
0716: FB2B                SELDSK:             
0717: FB2B     210000     	LXI		H,00H				; Assume an error
0718: FB2E     79         	MOV		A,C 				; Check if  requested disk is valid
0719: FB2F     FE04       	CPI		NumberOfLogicalDisks
0720: FB31     D0         	RNC							; return if > max number of Disks
0721: FB32                	                   
0722: FB32     32EAFB     	STA		SelectedDisk		; save disk number
0723: FB35     6F         	MOV		L,A					; make disk into word number
0724: FB36     2600       	MVI		H,0           
0725: FB38                		; Compute offset down disk parameter table by multiplying by parameter
0726: FB38                		; header length (16 bytes)
0727: FB38     29         	DAD		H             
0728: FB39     29         	DAD		H             
0729: FB3A     29         	DAD		H             
0730: FB3B     29         	DAD		H					; pointing at right one
0731: FB3C     1181F9     	LXI		D,DiskParameterHeaders		; get base address
0732: FB3F     19         	DAD		D					; DE -> appropriate DPH
0733: FB40     E5         	PUSH	H					; Save DPH address access disk parameter block to extract special
0734: FB41                								;    prefix byte that identifies disk type and whether de-blocking
0735: FB41                								;    is required
0736: FB41     110A00     	LXI		D,10				; Get DPB pointer offset in DPH
0737: FB44     19         	DAD		D					; DE -> DPB address
0738: FB45     5E         	MOV		E,M					; Get DPB address in DE
0739: FB46     23         	INX		H             
0740: FB47     56         	MOV		D,M	          
0741: FB48     EB         	XCHG						; DE ->DPB
0742: FB49     2B         	DCX		H					; DE -> prefix byte
0743: FB4A     7E         	MOV		A,M					; get prefix byte
0744: FB4B     E60F       	ANI		0FH					; isolate disk type
0745: FB4D     32FAFB     	STA		DiskType			; save for use in low level driver
0746: FB50     7E         	MOV		A,M					; get another copy
0747: FB51     E680       	ANI		NeedDeblocking		; determin if deblocking is required and
0748: FB53     32F9FB     	STA		DeblockingRequired	; save for low level driver
0749: FB56     E1         	POP		H					; recover DPH pointer
0750: FB57     C9         	RET                
0751: FB58                                    
0752: FB58                ;**********************	
0753: FB58                ;SETTRK - Set logical track for next read or write
0754: FB58                ;		Track is in BC   
0755: FB58                ;**********************	
0756: FB58                SETTRK:             
0757: FB58     60         	MOV		H,B					; select track in BC on entry
0758: FB59     69         	MOV		L,C           
0759: FB5A     22EBFB     	SHLD	SelectedTrack		; save for low level driver	
0760: FB5D     C9         	RET                
0761: FB5E                	                   
0762: FB5E                ;**********************	
0763: FB5E                ;SETSEC - Set logical sector for next read or write
0764: FB5E                ;		Sector is in C   
0765: FB5E                ;**********************
0766: FB5E                SETSEC:             
0767: FB5E     79         	MOV		A,C           
0768: FB5F     32EDFB     	STA		SelectedSector		; save for low level driver	
0769: FB62     C9         	RET                
0770: FB63                	                   
0771: FB63                ;**********************
0772: FB63                ;SetDMA - Set DMA (input/output) address for next read or write
0773: FB63                ;       Address in BC
0774: FB63                ;**********************
0775: FB63     0000       DMAAddress:	DW	0				; DMA address
0776: FB65                SETDMA:             
0777: FB65     69         	MOV		L,C					; select address in BC on entry
0778: FB66     60         	MOV		H,B           
0779: FB67     2263FB     	SHLD	DMAAddress			; save for low level driver	
0780: FB6A     C9         	RET                
0781: FB6B                	                   
0782: FB6B                			; Translate logical sector number to physical
0783: FB6B                			                 
0784: FB6B                			; Sector translation tables
0785: FB6B                			; These tables are indexed using the logical sector number
0786: FB6B                			; and contain the corresponding physical sector number
0787: FB6B                                    
0788: FB6B                                    
0789: FB6B                ;**********************
0790: FB6B                ;	Skew tables       
0791: FB6B                ;**********************
0792: FB6B                                    
0793: FB6B                Floppy5SkewTable:			; each physical sector contains four
0794: FB6B                							;  128-byte sectors
0795: FB6B                							             
0796: FB6B                ;	,		Physical 128b 	Logical 128b	Physical 512-byte
0797: FB6B     00010203   	DB		00,01,02,03		;00,01,02,03				0	)
0798: FB6F     10111213   	DB		16,17,18,19		;04,05,06,07				4	)
0799: FB73     20212223   	DB		32,33,34,35		;08,09,10,11				8	)
0800: FB77     0C0D0E0F   	DB		12,13,14,15		;12,13,14,15				3	)Head
0801: FB7B     1C1D1E1F   	DB		28,29,30,31		;16,17,18,19				7	) 0
0802: FB7F     08090A0B   	DB		08,09,10,11		;20,21,22,23				2	)
0803: FB83     18191A1B   	DB		24,25,26,27		;24,25,26,27				6	)
0804: FB87     04050607   	DB		04,05,06,07		;28,29,30,31				1	)
0805: FB8B     14151617   	DB		20,21,22,23		;32,33,34,35				5	)
0806: FB8F                	                   
0807: FB8F     24252627   	DB		36,37,38,39		;36,37,38,39				0	]
0808: FB93     34353637   	DB		52,53,54,55		;40,41,42,43				4	]
0809: FB97     44454647   	DB		68,69,70,71		;44,45,46,47				8	]
0810: FB9B     30313233   	DB		48,49,50,51		;48,49,50,51				3	]Head
0811: FB9F     40414243   	DB		64,65,66,67		;52,53,54,55				7	] 0
0812: FBA3     2C2D2E2F   	DB		44,45,46,47		;56,57,58,59				2	]
0813: FBA7     3C3D3E3F   	DB		60,61,62,63		;60,61,62,63				6	]
0814: FBAB     28292A2B   	DB		40,41,42,43		;63,65,66,67				1	]
0815: FBAF     38393A3B   	DB		56,57,58,59		;68,69,70,71				5	]
0816: FBB3                	                   
0817: FBB3                Floppy8SkewTable:			; Standard 8" Driver
0818: FBB3                	;		01,02,03,04,05,06,07,08,09,10		; Logical Sectors
0819: FBB3     01070D1319050B111703 	DB		01,07,13,19,25,05,11,17,23,03		; Physical Sectors
0820: FBBD                	                   
0821: FBBD                	;		11,12,13,14,15,16,17,18,19,20		; Logical Sectors	
0822: FBBD     090F1502080E141A060C 	DB		09,15,21,02,08,14,20,26,06,12		; Physical Sectors
0823: FBC7                	                   
0824: FBC7                	;		21,22,23,24,25,26					; Logical Sectors	
0825: FBC7     1218040A1016 	DB		18,24,04,10,16,22					; Physical Sectors
0826: FBCD                	                   
0827: FBCD                ;**********************
0828: FBCD                ;SECTRAN - Translate logical sector to physical
0829: FBCD                ;	on Entry:	BC= logical sector number
0830: FBCD                ;				DE-> appropriate skew table
0831: FBCD                ;	on Exit:	HL = physical sector number
0832: FBCD                ;**********************
0833: FBCD                SECTRAN:            
0834: FBCD     EB         	XCHG			;HL -> skew table base
0835: FBCE     09         	DAD		B		; Add on logical sector number
0836: FBCF     6E         	MOV		L,M		; Get physical sector number
0837: FBD0     2600       	MVI		H,00H	; make into a word
0838: FBD2     C9         	RET                
0839: FBD3                	                   
0840: FBD3                ;**********************
0841: FBD3                ;HOME - Home the selected logical disk to track 0.
0842: FBD3                ;	Before doing this, a check must be made to see if the
0843: FBD3                ;	physical disk buffer has information that must be
0844: FBD3                ;	written out. This is indicated by a flag, MustWriteBuffer,
0845: FBD3                ;	set in the de-blocking code
0846: FBD3                ;**********************	
0847: FBD3                HOME:               
0848: FBD3     3AE9FB     	LDA		MustWriteBuffer		; check flag
0849: FBD6     B7         	ORA		A             
0850: FBD7     C2DDFB     	JNZ		HomeNoWrite   
0851: FBDA     32E8FB     	STA		DataInDiskBuffer	; no, so indicate empty buffer
0852: FBDD                HomeNoWrite:        
0853: FBDD     0E00       	MVI		C,00H				; Set to track 0
0854: FBDF     CD58FB     	CALL	SETTRK				; no, physical, only logical
0855: FBE2     C9         	RET                
0856: FBE3                                    
0857: FBE3                ;*******************************************************************************
0858: FBE3                ;					 More tables  
0859: FBE3                ; Data written to or read from the mini-floppy drive is transferred via a
0860: FBE3                ; physical buffer that is actually 512 bytes long (it was declared at the front
0861: FBE3                ; of the BIOS and holds the "one-time" initialization code used for the
0862: FBE3                ; cold boot procedure.)
0863: FBE3                ;                   
0864: FBE3                ; The blocking/de-blocking code attempts to minimize the amount of actual
0865: FBE3                ; disk I/O by storing the disk,track, and physical sector currently residing
0866: FBE3                ; in the Physical Buffer. If a read request is for a 128 byte CP/M "sector"
0867: FBE3                ; that is already in the physical buffer, then no disk access occurs
0868: FBE3                ;*******************************************************************************
0869: FBE3                AllocationBlockSize		EQU		0800H		; 2048
0870: FBE3                PhysicalSecPerTrack		EQU		012H		; 18
0871: FBE3                CPMSecPerPhysical		EQU		PhysicalSectorSize/128
0872: FBE3                CPMSecPerTrack			EQU		CPMSecPerPhysical * PhysicalSecPerTrack
0873: FBE3                SectorMask				EQU		CPMSecPerPhysical - 1
0874: FBE3                SectorBitShift			EQU		02H			; LOG2(CPMSecPerPhysical)
0875: FBE3                                    
0876: FBE3                ;*******************************************************************************
0877: FBE3                ; These are the values handed over by the BDOS when it calls the Writer operation
0878: FBE3                ; The allocated.unallocated indicates whether the BDOS is set to write to an
0879: FBE3                ; unallocated allocation block (it only indicates this for the first 128 byte
0880: FBE3                ; sector write) or to an allocation block that has already been allocated to a
0881: FBE3                ; file. The BDOS also indicates if it is set to write to the file directory
0882: FBE3                ;*******************************************************************************
0883: FBE3                WriteAllocated			EQU		00H
0884: FBE3                WriteDirectory			EQU		01H
0885: FBE3                WriteUnallocated		EQU		02H
0886: FBE3                                    
0887: FBE3     00         WriteType:				DB		00H		; The type of write indicated by BDOS
0888: FBE4                                    
0889: FBE4                	;       variables for physical sector
0890: FBE4                	; These are moved and compared as a group, DO NOT ALTER
0891: FBE4                InBufferDkTrkSec:   
0892: FBE4     00         InBufferDisk:			DB		00H
0893: FBE5     0000       InBufferTrack:			DW		00H
0894: FBE7     00         InBufferSector:			DB		00H
0895: FBE8                                    
0896: FBE8     00         DataInDiskBuffer:		DB		00H		; when non-zero, the disk buffer has data from disk
0897: FBE9                                    
0898: FBE9     00         MustWriteBuffer:		DB		00H		; Non-zero when data has been written into DiskBuffer,
0899: FBEA                										;	but not yet written out to the disk
0900: FBEA                										          
0901: FBEA                	;     variables for selected disk, track and sector
0902: FBEA                	; These are moved and compared as a group, DO NOT ALTER
0903: FBEA                SelectedDkTrkSec:   
0904: FBEA     00         SelectedDisk:			DB		00H
0905: FBEB     0000       SelectedTrack:			DW		00H
0906: FBED     00         SelectedSector:			DB		00H
0907: FBEE                                    
0908: FBEE                	;Selected physical sector derived from selected (CP/M) sector by shifting it
0909: FBEE                	;	right the number of of bits specified by SectorBitShift
0910: FBEE     00         SelectedPhysicalSector:	DB		00H
0911: FBEF                                    
0912: FBEF     00         SelectedDiskType:		DB		00H		; Set by SELDSK to indicate either , 8" or 5 1/4" floppy 
0913: FBF0     00         SelectedDiskDeblock:	DB		00H		; Set by SELDSK to indicate whether de-blocking is required
0914: FBF1                                    
0915: FBF1                	; Parameters for writing to a previously unallocated allocation block
0916: FBF1                	; These are moved and compared as a group, DO NOT ALTER
0917: FBF1                UnallocatedDkTrkSec:
0918: FBF1     00         UnallocatedDisk:		DB		00H
0919: FBF2     0000       UnallocatedTrack:		DW		00H
0920: FBF4     00         UnallocatedSector:		DB		00H
0921: FBF5     00         UnalocatedlRecordCount:	DB		00H		; Number of unallocated "records"in current previously unallocated allocation block.
0922: FBF6                                    
0923: FBF6     00         DiskErrorFlag:			DB		00H		; Non-Zero - unrecoverable error output "Bad Sector" message
0924: FBF7                                    
0925: FBF7                	; Flags used inside the de-blocking code
0926: FBF7     00         PrereadSectorFlag:		DB		00H		; non-zero if physical sector must be read into the disk buffer
0927: FBF8                										; either before a write to a allocated block can occur, or
0928: FBF8                										; for a normal CP/M 128 byte sector read
0929: FBF8     00         ReadFlag:				DB		00H		; Non-zero when a CP/M 128 byte sector is to be read
0930: FBF9     00         DeblockingRequired:		DB		00H		; Non-zero when the selected disk needs de-blocking (set in SELDSK)
0931: FBFA     00         DiskType:				DB		00H		; Indicate 8" or 5 1/4" selected  (set in SELDSK)
0932: FBFB                                    
0933: FBFB                ; 180/493           
0934: FBFB                                    
0935: FBFB                ;************************************************************************************************
0936: FBFB                ;        READ       
0937: FBFB                ; Read in the 128-byte CP/M sector specified by previous calls to select disk and to set track  and 
0938: FBFB                ; sector. The sector will be read into the address specified in the previous call to set DMA address
0939: FBFB                ;                   
0940: FBFB                ; If reading from a disk drive using sectors larger than 128 bytes, de-blocking code will be used
0941: FBFB                ; to unpack a 128-byte sector from  the physical sector. 
0942: FBFB                ;************************************************************************************************
0943: FBFB                READ:               
0944: FBFB     3AF9FB     		LDA		DeblockingRequired
0945: FBFE     B7         		ORA		A            
0946: FBFF     CA4EFD     		JZ		ReadNoDeblock			; if 0 use normal non-blocked read (128 byte sectors)
0947: FC02                ; The de-blocking algorithm used is such that a read operation can be viewed UP until the actual
0948: FC02                ; data transfer as though it was the first write to an unallocated allocation block. 
0949: FC02                										; else its a 512 byte sector
0950: FC02     AF         		XRA		A						; set record count to 0
0951: FC03     32F5FB     		STA		UnalocatedlRecordCount
0952: FC06     3C         		INR		A            
0953: FC07     32F8FB     		STA		ReadFlag			; Set to non zero to indicate that this is a read
0954: FC0A     32F7FB     		STA		PrereadSectorFlag		; force pre-read
0955: FC0D     3E02       		MVI		A,WriteUnallocated		; fake de-blocking code into responding as if this
0956: FC0F     32E3FB     		STA		WriteType				;  is the first write to an unallocated allocation block
0957: FC12     C36EFC     		JMP		PerformReadWrite		; use common code to execute read
0958: FC15                		                  
0959: FC15                ;************************************************************************************************
0960: FC15                ;		WRITE            
0961: FC15                ;Write a 128-byte sector from the current DMA address to the previously $elected disk, track, and sector.
0962: FC15                ;                   
0963: FC15                ; On arrival here, the BOOS will have set register C to indicate whether this write operation is to:
0964: FC15                ;	00H [WriteAllocated]	 An already allocated allocation block (which means a pre-read of the sector may be needed),
0965: FC15                ;	01H [WriteDirectory]	 To the directory (in which case the data will be written to the disk immediately),
0966: FC15                ;	02H	[WriteUnallocated]	 To the first 128-byte sector of a previously unallocated allocation block (In which case no pre-read is required).
0967: FC15                ;                   
0968: FC15                ; Only writes to the directory take place immediately.
0969: FC15                ; In all other cases, the data will be moved from the DMA address into the disk buffer,
0970: FC15                ; and only written out when circumstance, force the transfer.
0971: FC15                ; The number of physical disk operations can therefore be reduced considerably.
0972: FC15                ;************************************************************************************************
0973: FC15                WRITE:              
0974: FC15     3AF9FB     		LDA		DeblockingRequired
0975: FC18     B7         		ORA		A            
0976: FC19     CA49FD     		JZ		WriteNoDeblock			; if 0 use non-blocked write
0977: FC1C                ; Buffered I/O      
0978: FC1C     AF         		XRA		A            
0979: FC1D     32F8FB     		STA		ReadFlag				; Set to zero to indicate that this is not a read
0980: FC20     79         		MOV		A,C          
0981: FC21     32E3FB     		STA		WriteType				; save the BDOS write type
0982: FC24     FE02       		CPI		WriteUnallocated		; first write to an unallocated allocation block ?
0983: FC26     C237FC     		JNZ		CheckUnallocatedBlock	; No, - in the middle of writing to an unallocated block ?
0984: FC29                										; Yes, It is the first write to unallocated allocation block.
0985: FC29                ; Initialize  variables associated with unallocated writes
0986: FC29     3E10       		MVI		A,AllocationBlockSize/ 128	; Number of 128 byte sectors
0987: FC2B     32F5FB     		STA		UnalocatedlRecordCount
0988: FC2E     21EAFB     		LXI		H,SelectedDkTrkSec		; copy disk, track & sector into unallocated variables
0989: FC31     11F1FB     		LXI		D,UnallocatedDkTrkSec
0990: FC34     CD31FD     		CALL 	MoveDkTrkSec
0991: FC37                		                  
0992: FC37                	; Check if this is not the first write to an unallocated allocation block -- if it is,
0993: FC37                	; the unallocated record count has just been set to the number of 128-byte sectors in the allocation block
0994: FC37                CheckUnallocatedBlock:
0995: FC37     3AF5FB     		LDA		UnalocatedlRecordCount
0996: FC3A     B7         		ORA		A            
0997: FC3B     CA66FC     		JZ		RequestPreread			; No - write to an unallocated block
0998: FC3E     3D         		DCR		A						; decrement 128 byte sectors left
0999: FC3F     32F5FB     		STA		UnalocatedlRecordCount
1000: FC42                		                  
1001: FC42     21EAFB     		LXI		H,SelectedDkTrkSec		; same Disk, Track & sector as for those in an unallocated block
1002: FC45     11F1FB     		LXI		D,UnallocatedDkTrkSec
1003: FC48     CD25FD     		CALL	CompareDkTrkSec			; are they the same
1004: FC4B     C266FC     		JNZ		RequestPreread			; NO - do a pre-read
1005: FC4E                										;Compare$DkSTrkSec  returns with  DE -> Unallocated$Sector , HL -> UnallocatedSSector 
1006: FC4E     EB         		XCHG              
1007: FC4F     34         		INR	M             
1008: FC50     7E         		MOV		A,M          
1009: FC51     FE48       		CPI		CPMSecPerTrack			; Sector > maximum on track ?
1010: FC53     DA5FFC     		JC		NoTrackChange			; No ( A < M)
1011: FC56     3600       		MVI		M,00H					; Yes
1012: FC58     2AF2FB     		LHLD	UnallocatedTrack
1013: FC5B     23         		INX		H						; increment track 
1014: FC5C     22F2FB     		SHLD	UnallocatedTrack
1015: FC5F                NoTrackChange:      
1016: FC5F     AF         		XRA		A            
1017: FC60     32F7FB     		STA		PrereadSectorFlag		; clear flag
1018: FC63     C36EFC     		JMP		PerformReadWrite
1019: FC66                		                  
1020: FC66                RequestPreread:     
1021: FC66     AF         		XRA		A            
1022: FC67     32F5FB     		STA		UnalocatedlRecordCount	; not a write into an unallocated block
1023: FC6A     3C         		INR		A            
1024: FC6B     32F7FB     		STA		PrereadSectorFlag		; set flag
1025: FC6E                ;*******************************************************
1026: FC6E                ; Common code to execute both reads and writes of 128-byte sectors	
1027: FC6E                ;*******************************************************	
1028: FC6E                PerformReadWrite:   
1029: FC6E     AF         		XRA		A						; Assume no disk error will occur
1030: FC6F     32F6FB     		STA		DiskErrorFlag
1031: FC72     3AEDFB     		LDA		SelectedSector
1032: FC75     1F         		RAR								; Convert selected 128-byte sector
1033: FC76     1F         		RAR								; into physical sector by dividing by 4
1034: FC77     E63F       		ANI		03FH					; remove unwanted bits
1035: FC79     32EEFB     		STA		SelectedPhysicalSector
1036: FC7C     21E8FB     		LXI		H,DataInDiskBuffer		; see if there is any data here ?
1037: FC7F     7E         		MOV		A,M          
1038: FC80     3601       		MVI		M,001H					; force there is data here for after the actual read
1039: FC82     B7         		ORA		A						; really is there any data here ?
1040: FC83     CAA3FC     		JZ		ReadSectorIntoBuffer	; NO - go read into buffer
1041: FC86                ;                   
1042: FC86                		; The buffer does have a physical sector in it, Note: The disk, track, and PHYSICAL sector
1043: FC86                		; in the buffer need to be checked, hence the use of the CompareDkTrk subroutine.
1044: FC86     11E4FB     		LXI		D,InBufferDkTrkSec
1045: FC89     21EAFB     		LXI		H,SelectedDkTrkSec		; get the requested sector
1046: FC8C     CD20FD     		CALL	CompareDkTrk			; is it in the buffer ? 
1047: FC8F     C29CFC     		JNZ		SectorNotInBuffer		; NO, it must be read
1048: FC92                		; Yes, it is in the buffer
1049: FC92     3AE7FB     		LDA		InBufferSector			; get the sector
1050: FC95     21EEFB     		LXI		H,SelectedPhysicalSector
1051: FC98     BE         		CMP		M						; Check if correct physical sector
1052: FC99     CAC0FC     		JZ		SectorInBuffer			; Yes - it is already in memory
1053: FC9C                		; No, it will have to be read in over current contents of buffer
1054: FC9C                SectorNotInBuffer:  
1055: FC9C     3AE9FB     		LDA		MustWriteBuffer
1056: FC9F     B7         		ORA		A						; do we need to write ?
1057: FCA0     C491FD     		CNZ		WritePhysical			; if yes - write it out
1058: FCA3                                    
1059: FCA3                ReadSectorIntoBuffer:
1060: FCA3                		; indicate the  selected disk, track, and sector now residing in buffer
1061: FCA3     3AEAFB     		LDA		SelectedDisk 
1062: FCA6     32E4FB     		STA		InBufferDisk 
1063: FCA9     2AEBFB     		LHLD	SelectedTrack
1064: FCAC     22E5FB     		SHLD	InBufferTrack
1065: FCAF     3AEEFB     		LDA		SelectedPhysicalSector
1066: FCB2     32E7FB     		STA		InBufferSector
1067: FCB5                		                  
1068: FCB5     3AF7FB     		LDA		PrereadSectorFlag		; do we need to pre-read
1069: FCB8     B7         		ORA		A            
1070: FCB9     C496FD     		CNZ		ReadPhysical			; yes - pre-read the sector
1071: FCBC                		                  
1072: FCBC                ; At this point the data is in the buffer.
1073: FCBC                ; Either it was already here, or we returned from ReadPhysical
1074: FCBC                                    
1075: FCBC     AF         		XRA		A						; reset the flag
1076: FCBD     32E9FB     		STA		MustWriteBuffer			; and store it away
1077: FCC0                		                  
1078: FCC0                ; Selected sector on correct track and  disk is already 1n the buffer.
1079: FCC0                ; Convert the selected CP/M(128-byte sector into relative address down the buffer. 
1080: FCC0                SectorInBuffer:     
1081: FCC0     3AEDFB     		LDA		SelectedSector
1082: FCC3     E603       		ANI		SectorMask				; only want the least bits
1083: FCC5     6F         		MOV		L,A						; to calculate offset into 512 byte buffer
1084: FCC6     2600       		MVI		H,00H					; Multiply by 128
1085: FCC8     29         		DAD		H						; *2  
1086: FCC9     29         		DAD		H						; *4  
1087: FCCA     29         		DAD		H						; *8  
1088: FCCB     29         		DAD		H						; *16 
1089: FCCC     29         		DAD		H						; *32 
1090: FCCD     29         		DAD		H						; *64 
1091: FCCE     29         		DAD		H						; *128
1092: FCCF     1133F6     		LXI		D,DiskBuffer 
1093: FCD2     19         		DAD		D						; HL -> 128-byte sector number start address
1094: FCD3     EB         		XCHG							; DE -> sector in the disk buffer
1095: FCD4     2A63FB     		LHLD	DMAAddress				; Get DMA address (set in SETDMA)
1096: FCD7     EB         		XCHG							; assume a read so :
1097: FCD8                										; DE -> DMA Address & HL -> sector in disk buffer
1098: FCD8     0E10       		MVI		C,128/8					; 8 bytes per move (loop count)
1099: FCDA                ;                   
1100: FCDA                ;  At this point -  
1101: FCDA                ;	C	->	loop count   
1102: FCDA                ;	DE	->	DMA address 
1103: FCDA                ;	HL	->	sector in disk buffer
1104: FCDA                ;                   
1105: FCDA     3AF8FB     		LDA		ReadFlag				; Move into or out of buffer /
1106: FCDD     B7         		ORA		A						; 0 => Write, non Zero => Read
1107: FCDE     C2E6FC     		JNZ		BufferMove				; Move out of buffer
1108: FCE1                		                  
1109: FCE1     3C         		INR		A						; going to force a write
1110: FCE2     32E9FB     		STA		MustWriteBuffer
1111: FCE5     EB         		XCHG							; DE <--> HL
1112: FCE6                		                  
1113: FCE6                ;The following move loop moves eight bytes at a time from (HL> to (DE), C contains the loop count
1114: FCE6                BufferMove:         
1115: FCE6     7E         		MOV		A,M						; Get byte from source
1116: FCE7     12         		STAX	D						; Put into destination
1117: FCE8     13         		INX		D						; update pointers
1118: FCE9     23         		INX		H            
1119: FCEA                		                  
1120: FCEA     7E         		MOV		A,M	         
1121: FCEB     12         		STAX	D            
1122: FCEC     13         		INX		D            
1123: FCED     23         		INX		H            
1124: FCEE                		                  
1125: FCEE     7E         		MOV		A,M          
1126: FCEF     12         		STAX	D            
1127: FCF0     13         		INX		D            
1128: FCF1     23         		INX		H            
1129: FCF2                		                  
1130: FCF2     7E         		MOV		A,M	         
1131: FCF3     12         		STAX	D            
1132: FCF4     13         		INX		D            
1133: FCF5     23         		INX		H            
1134: FCF6                		                  
1135: FCF6     7E         		MOV		A,M          
1136: FCF7     12         		STAX	D            
1137: FCF8     13         		INX		D            
1138: FCF9     23         		INX		H            
1139: FCFA                		                  
1140: FCFA     7E         		MOV		A,M          
1141: FCFB     12         		STAX	D            
1142: FCFC     13         		INX		D            
1143: FCFD     23         		INX		H            
1144: FCFE                		                  
1145: FCFE     7E         		MOV		A,M	         
1146: FCFF     12         		STAX	D            
1147: FD00     13         		INX		D            
1148: FD01     23         		INX		H            
1149: FD02                		                  
1150: FD02     7E         		MOV		A,M          
1151: FD03     12         		STAX	D            
1152: FD04     13         		INX		D            
1153: FD05     23         		INX		H            
1154: FD06                		                  
1155: FD06     0D         		DCR		C						; count down on loop counter
1156: FD07     C2E6FC     		JNZ		BufferMove				; repeat till done (CP/M sector moved)
1157: FD0A                ; end of loop       
1158: FD0A                		                  
1159: FD0A     3AE3FB     		LDA		WriteType				; write to directory ?
1160: FD0D     FE01       		CPI		WriteDirectory
1161: FD0F     3AF6FB     		LDA		DiskErrorFlag			; get flag in case of a delayed read or write
1162: FD12     C0         		RNZ								; return if delayed read or write
1163: FD13                		                  
1164: FD13     B7         		ORA		A						; Any disk errors ?
1165: FD14     C0         		RNZ								; yes - abandon attempt to write to directory
1166: FD15                		                  
1167: FD15     AF         		XRA		A            
1168: FD16     32E9FB     		STA		MustWriteBuffer			; clear flag
1169: FD19     CD91FD     		CALL	WritePhysical
1170: FD1C     3AF6FB     		LDA		DiskErrorFlag			; return error flag to caller
1171: FD1F     C9         		RET               
1172: FD20                ;********************************************************************
1173: FD20                                    
1174: FD20                		                  
1175: FD20                                    
1176: FD20                ; Compares just the disk and track   pointed to by DE and HL (used for Blocking/Deblocking)
1177: FD20                CompareDkTrk:			    
1178: FD20     0E03       		MVI		C,03H			; Disk(1), Track(2)
1179: FD22     C327FD     		JMP		CompareDkTrkSecLoop
1180: FD25                CompareDkTrkSec:				;Compares just the disk and track   pointed to by DE and HL 
1181: FD25     0E04       		MVI		C,04H			; Disk(1), Track(2), Sector(1)
1182: FD27                CompareDkTrkSecLoop:
1183: FD27     1A         		LDAX	D            
1184: FD28     BE         		CMP		M            
1185: FD29     C0         		RNZ						; Not equal
1186: FD2A     13         		INX	D             
1187: FD2B     23         		INX	H             
1188: FD2C     0D         		DCR		C            
1189: FD2D     C8         		RZ						; return they match (zero flag set)
1190: FD2E     C327FD     		JMP		CompareDkTrkSecLoop	; keep going
1191: FD31                                    
1192: FD31                ;********************************************************************
1193: FD31                                    
1194: FD31                ;Moves the disk, track, and sector variables pointed at by HL to those pointed at by DE 
1195: FD31                MoveDkTrkSec:       
1196: FD31     0E04       		MVI		C,04H			; Disk(1), Track(2), Sector(1)
1197: FD33                MoveDkTrkSecLoop:   
1198: FD33     7E         		MOV		A,M          
1199: FD34     12         		STAX	D            
1200: FD35     13         		INX		D            
1201: FD36     23         		INX		H            
1202: FD37     0D         		DCR		C            
1203: FD38     C8         		RZ					; exit loop done
1204: FD39     C333FD     		JMP		MoveDkTrkSecLoop
1205: FD3C                		                  
1206: FD3C                ;**************************************************************************************************
1207: FD3C                ;  There are two "smart" disk controllers on this system, one for the 8" floppy diskette drives,
1208: FD3C                ; and one for the 5 1/4" mini-diskette drives
1209: FD3C                ;                   
1210: FD3C                ;  The controllers are "hard-wired" to monitor certain locations in memory to detect when they are to
1211: FD3C                ; perform some disk operation. The 8" controller monitors location 0040H, and the 5 1/4 controller
1212: FD3C                ; monitors location 0045H. These are called their disk control bytes.
1213: FD3C                ; If the most significant bit of  disk control byte is set, the controller will look at the word
1214: FD3C                ; following the respective control bytes. This word must contain the address of  valid disk control
1215: FD3C                ; table that specifies the exact disk operation to be performed.
1216: FD3C                ;                   
1217: FD3C                ;  Once the operation has been completed. the controller resets its disk control byte to OOH.
1218: FD3C                ; This indicates completion to the disk driver code.
1219: FD3C                ;                   
1220: FD3C                ;  The controller also sets a return code in a disk status block -both controllers use the SAME location
1221: FD3C                ; for this, 0043H. If the first byte of this status block is less than 80H. then a disk error
1222: FD3C                ; has occurred. For this simple BIOS. no further details of the status settings are relevant.
1223: FD3C                ; Note that the disk controller has built-in retry logic -- reads and writes are attempted
1224: FD3C                ; ten times before the controller returns an error
1225: FD3C                ;                   
1226: FD3C                ;  The disk control table layout is shown below. Note that the controllers have the capability
1227: FD3C                ; for control tables to be chained together so that a sequence of disk operations can be initiated.
1228: FD3C                ; In this BIOS this feature is not used. However. the controller requires that the chain pointers
1229: FD3C                ; in the disk control tables be pointed back to the main control bytes in order to indicate
1230: FD3C                ; the end of the chain
1231: FD3C                ;**************************************************************************************************
1232: FD3C                                    
1233: FD3C                DiskControl8				EQU	040H	; 8" control byte
1234: FD3C                CommandBlock8				EQU	041H	; Control Table Pointer
1235: FD3C                                    
1236: FD3C                DiskStatusBlock				EQU	043H	; 8" and 5 1/4" status block
1237: FD3C                                    
1238: FD3C                DiskControl5				EQU	045H	; 8" control byte
1239: FD3C                CommandBlock5				EQU	046H	; Control Table Pointer
1240: FD3C                                    
1241: FD3C                DiskReadCode				EQU	01H		; Code for Read
1242: FD3C                DiskWriteCode				EQU	02H		; Code for Write
1243: FD3C                ;***************************************************************************
1244: FD3C                ;					Disk Control tables
1245: FD3C                ;***************************************************************************
1246: FD3C                DiskControlTable:   
1247: FD3C     00         DCTCommand:				DB	00H		; Command
1248: FD3D     00         DCTUnit:					DB	00H		; unit (drive) number = 0 or 1
1249: FD3E     00         DCTHead:					DB	00H		; head number = 0 or 1
1250: FD3F     00         DCTTrack:				DB	00H		; track number
1251: FD40     00         DCTSector:				DB	00H		; sector number
1252: FD41     0000       DCTByteCount:			DW	0000H	; number of bytes to read/write
1253: FD43     0000       DCTDMAAddress:			DW	0000H	; transfer address
1254: FD45     0000       DCTNextStatusBlock:		DW	0000H	; pointer to next status block
1255: FD47     0000       DCTNextControlLocation:	DW	0000H	; pointer to next control byte
1256: FD49                                    
1257: FD49                ; Write contents of disk buffer to correct sector
1258: FD49                WriteNoDeblock:     
1259: FD49     3E02       	MVI		A,DiskWriteCode	; get write function code
1260: FD4B     C350FD     	JMP		CommonNoDeblock
1261: FD4E                ;Read previously selected sector into disk buffer
1262: FD4E                ReadNoDeblock:      
1263: FD4E     3E01       	MVI		A,DiskReadCode	; get read function code
1264: FD50                CommonNoDeblock:    
1265: FD50     323CFD     	STA		DCTCommand		; set the correct command code
1266: FD53     218000     	LXI		H,128				; bytes per sector
1267: FD56     2241FD     	SHLD	DCTByteCount  
1268: FD59     AF         	XRA		A					; 8" has only head 0
1269: FD5A     323EFD     	STA		DCTHead       
1270: FD5D                	                   
1271: FD5D     3AEAFB     	LDA		SelectedDisk		; insure only disk 0 or 1
1272: FD60     E601       	ANI		01H           
1273: FD62     323DFD     	STA		DCTUnit			; set the unit number
1274: FD65                	                   
1275: FD65     3AEBFB     	LDA		SelectedTrack 
1276: FD68     323FFD     	STA		DCTTrack			; set track number
1277: FD6B                	                   
1278: FD6B     3AEDFB     	LDA		SelectedSector
1279: FD6E     3240FD     	STA		DCTSector		; set sector
1280: FD71                	                   
1281: FD71     2A63FB     	LHLD	DMAAddress    
1282: FD74     2243FD     	SHLD	DCTDMAAddress	; set transfer address
1283: FD77                	                   
1284: FD77                ;  The disk controller can accept chained disk control tables, but in this case
1285: FD77                ; they are not used. so the "Next" pointers must be pointed back at the initial
1286: FD77                ; control bytes in the base page. 
1287: FD77     214300     	LXI		H,DiskStatusBlock
1288: FD7A     2245FD     	SHLD	DCTNextStatusBlock	; set pointer back to start
1289: FD7D     214000     	LXI		H,DiskControl8
1290: FD80     2247FD     	SHLD	DCTNextControlLocation	; set pointer back to start
1291: FD83     213CFD     	LXI		H,DCTCommand  
1292: FD86     224100     	SHLD	CommandBlock8 
1293: FD89                	                   
1294: FD89     214000     	LXI		H,DiskControl8
1295: FD8C     3680       	MVI		M,080H				; activate the controller to perform operation
1296: FD8E     C3F3FD     	JMP		WaitForDiskComplete
1297: FD91                	                   
1298: FD91                ;Write contents of disk buffer to correct sector
1299: FD91                WritePhysical:      
1300: FD91     3E02       	MVI		A,DiskWriteCode	; get write function
1301: FD93     C398FD     	JMP		CommonPhysical
1302: FD96                ReadPhysical:       
1303: FD96     3E01       	MVI		A,DiskReadCode	; get read function
1304: FD98                CommonPhysical:     
1305: FD98     323CFD     	STA		DCTCommand		; set the command
1306: FD9B                	                   
1307: FD9B     3AFAFB     	LDA		DiskType      
1308: FD9E     FE01       	CPI		Floppy5				; is it 5 1/4 ?
1309: FDA0     CAA9FD     	JZ		CorrectDisktype		; yes
1310: FDA3     3E01       	MVI		A,1           
1311: FDA5     3205FE     	STA		DiskError			; no set error and exit
1312: FDA8     C9         	RET                
1313: FDA9                CorrectDisktype:    
1314: FDA9     3AE4FB     	LDA		InBufferDisk  
1315: FDAC     E601       	ANI		01H					; only units 0 or 1
1316: FDAE     323DFD     	STA		DCTUnit			; set disk
1317: FDB1     2AE5FB     	LHLD	InBufferTrack 
1318: FDB4     7D         	MOV		A,L					; for this controller it is a byte value
1319: FDB5     323FFD     	STA		DCTTrack			; set track
1320: FDB8                ;  The sector must be converted into a head number and sector number.
1321: FDB8                ; Sectors 0 - 8 are head 0, 9 - 17 , are head 1 
1322: FDB8     0600       	MVI		B,0					; assume head 0
1323: FDBA     3AE7FB     	LDA		InBufferSector
1324: FDBD     4F         	MOV		C,A					; save copy
1325: FDBE     FE09       	CPI		09H           
1326: FDC0     DAC7FD     	JC		Head0          
1327: FDC3     D609       	SUI		09H					; Modulo sector
1328: FDC5     4F         	MOV		C,A           
1329: FDC6     04         	INR		B					; set head to 1
1330: FDC7                Head0:              
1331: FDC7     78         	MOV		A,B           
1332: FDC8     323EFD     	STA		DCTHead			; set head number
1333: FDCB     79         	MOV		A,C           
1334: FDCC     3C         	INR		A					; physical sectors start at 1
1335: FDCD     3240FD     	STA		DCTSector		; set sector
1336: FDD0     210002     	LXI		H,PhysicalSectorSize
1337: FDD3     2241FD     	SHLD	DCTByteCount		; set byte count
1338: FDD6     2133F6     	LXI		H,DiskBuffer  
1339: FDD9     2243FD     	SHLD	DCTDMAAddress	; set transfer address
1340: FDDC                ;	As only one control table is in use, close the status and busy chain pointers
1341: FDDC                ;  back to the main control bytes
1342: FDDC     214300     	LXI		H,DiskStatusBlock
1343: FDDF     2245FD     	SHLD	DCTNextStatusBlock
1344: FDE2     214500     	LXI		H,DiskControl5
1345: FDE5     2247FD     	SHLD	DCTNextControlLocation
1346: FDE8     213CFD     	LXI		H,DCTCommand  
1347: FDEB     224600     	SHLD	CommandBlock5 
1348: FDEE                	                   
1349: FDEE     214500     	LXI		H,DiskControl5		; activate 5 1/4" disk controller
1350: FDF1     3680       	MVI		M,080H        
1351: FDF3                                    
1352: FDF3                ;Wait until Disk Status Block indicates , operation complete, then check 
1353: FDF3                ; if any errors occurred. ,On entry HL -> disk control byte	
1354: FDF3                WaitForDiskComplete:
1355: FDF3     7E         	MOV		A,M				; get control bytes
1356: FDF4     B7         	ORA		A             
1357: FDF5     C2F3FD     	JNZ		WaitForDiskComplete	; operation not done
1358: FDF8                	                   
1359: FDF8     3A4300     	LDA		DiskStatusBlock		; done , so now check status
1360: FDFB     FE80       	CPI		080H          
1361: FDFD     DA05FE     	JC		DiskError      
1362: FE00     AF         	XRA		A             
1363: FE01     32F6FB     	STA		DiskErrorFlag		; clear the flag
1364: FE04     C9         	RET                
1365: FE05                	                   
1366: FE05                DiskError:          
1367: FE05     3E01       	MVI		A,1           
1368: FE07     32F6FB     	STA		DiskErrorFlag		; set the error flag
1369: FE0A     C9         	RET                
1370: FE0B                	                   
1371: FE0B                ;**********************************************************************************
1372: FE0B                ;		Disk Control table image for warm boot
1373: FE0B                ;**********************************************************************************
1374: FE0B                BootControlPart1:   
1375: FE0B     01         	DB	01H				; Read function
1376: FE0C     00         	DB	00H				; unit number
1377: FE0D     00         	DB	00H				; head number
1378: FE0E     00         	DB	00H				; track number
1379: FE0F     02         	DB	02H				; Starting sector number
1380: FE10     0010       	DW	8 * 512			; Number of bytes to read
1381: FE12     00E0       	DW	CCPEntry		; read into this address
1382: FE14     4300       	DW	DiskStatusBlock	; pointer to next block
1383: FE16     4500       	DW	DiskControl5	; pointer to next table
1384: FE18                BootControlPart2:   
1385: FE18     01         	DB	01H				; Read function
1386: FE19     00         	DB	00H				; unit number
1387: FE1A     01         	DB	01H				; head number
1388: FE1B     00         	DB	00H				; track number
1389: FE1C     01         	DB	01H				; Starting sector number
1390: FE1D     0006       	DW	3 * 512			; Number of bytes to read
1391: FE1F     00F0       	DW	CCPEntry + ( 8 * 512)		; read into this address
1392: FE21     4300       	DW	DiskStatusBlock	; pointer to next block
1393: FE23     4500       	DW	DiskControl5	; pointer to next table
1394: FE25                                    
1395: FE25                ;**********************************************************************************	
1396: FE25                ;						Warm Boot    
1397: FE25                ;  On warm boot. the CCP and BDOS must be reloaded into memory.
1398: FE25                ; In this BIOS. only the 5 1/4" diskettes will be used.
1399: FE25                ; Therefore this code is hardware specific to the controller.
1400: FE25                ; Two prefabricated control tables are used.
1401: FE25                ;**********************************************************************************	
1402: FE25                WBOOT:              
1403: FE25     318000     	LXI		SP,DefaultDiskBuffer
1404: FE28     110BFE     	LXI		D,BootControlPart1
1405: FE2B     CD37FE     	CALL	WarmBootRead  
1406: FE2E                	                   
1407: FE2E     1118FE     	LXi		D,BootControlPart2
1408: FE31     CD37FE     	CALL	WarmBootRead  
1409: FE34     C340F8     	JMP		EnterCPM      
1410: FE37                	                   
1411: FE37                WarmBootRead:       
1412: FE37     213CFD     	LXI		H,DiskControlTable			; get pointer to the Floppy's Device Control Table
1413: FE3A     224600     	SHLD	CommandBlock5		; put it into the Command block for drive A:
1414: FE3D     0E0D       	MVI		C,13				; set byte count for move
1415: FE3F                WarmByteMove:       
1416: FE3F     1A         	LDAX	D					; Move the coded Control block into the Command Block
1417: FE40     77         	MOV		M,A           
1418: FE41     23         	INX		H             
1419: FE42     13         	INX		D             
1420: FE43     0D         	DCR		C             
1421: FE44     C23FFE     	JNZ		WarmByteMove  
1422: FE47                	                   
1423: FE47     214500     	LXI		H,DiskControl5
1424: FE4A     3680       	MVI		M,080H				; activate the controller 
1425: FE4C                	                   
1426: FE4C                WaitForBootComplete:
1427: FE4C     7E         	MOV		A,M					; Get the control byte
1428: FE4D     B7         	ORA		A					; Reset to 0 (Completed operation) ?
1429: FE4E     C24CFE     	JNZ		WaitForBootComplete	; if not try again
1430: FE51                	                   
1431: FE51     3A4300     	LDA		DiskStatusBlock		; after operation what's the status?
1432: FE54     FE80       	CPI		080H				; any errors ?
1433: FE56     DA5AFE     	JC		WarmBootError		; Yup
1434: FE59     C9         	RET							; else we are done!
1435: FE5A                                    
1436: FE5A                WarmBootError:      
1437: FE5A     2163FE     	LXI		H,WarmBootErroMessage	; point at error message
1438: FE5D     CD33F8     	CALL	DisplayMessage			; sent it. and
1439: FE60     C325FE     	JMP		WBOOT					; try again.
1440: FE63                	                   
1441: FE63                WarmBootErroMessage:
1442: FE63     0D0A       	DB		0DH,0AH        
1443: FE65     5761726D20 	DB		057H,061H,072H,06DH,020H				; Warm
1444: FE6A     426F6F7420 	DB		042H,06FH,06FH,074H,020H				; Boot
1445: FE6F     7265744879696E67 	DB		072H,065H,074H,072,079H,069H,06EH,067H	;retrying
1446: FE77     2E2E2E0D0A 	DB		02EH,02EH,02EH,0DH,0AH
1447: FE7C     00         	DB		00H            
1448: FE7D                CodeEnd:            
1449: FE7D                End:                
1450: FE7D                                    
1451: FE7D                                    
1452: FE7D                	                   
1453: FE7D                                    
1454: FE7D                                    
1455: FE7D                	                   




                                    Xref


0000	0000	$                             		

0080	F833	AFTERDISKBUFFER               		  0226,
0869	0800	ALLOCATIONBLOCKSIZE           		  0986,

0026	E806	BDOSENTRY                     		  0037,  0250,
0016	0E00	BDOSLENGTH                    		  0019,  0020,  0027,
0027	F600	BIOSENTRY                     		  0054,
0017	0A00	BIOSLENGTH                    		  0019,  0020,
0183	F6F9	BOOT                          		  0058,
1374	FE0B	BOOTCONTROLPART1              		  1404,
1384	FE18	BOOTCONTROLPART2              		  1407,
1114	FCE6	BUFFERMOVE                    		  1107,  1156,

0024	E000	CCPENTRY                      		  0026,  0027,  0259,  1381,  1391,
0015	0800	CCPLENGTH                     		  0019,  0020,  0026,  0027,
0994	FC37	CHECKUNALLOCATEDBLOCK         		  0983,
1448	FE7D	CODEEND                       		
0055	F600	CODESTART                     		
1239	0046	COMMANDBLOCK5                 		  1347,  1413,
1234	0041	COMMANDBLOCK8                 		  1292,
1264	FD50	COMMONNODEBLOCK               		  1260,
1304	FD98	COMMONPHYSICAL                		  1301,
0408	00DF	COMMUNICATIONBAUDMODE         		  0102,
0409	00DE	COMMUNICATIONBAUDRATE         		  0106,
0404	00EC	COMMUNICATIONDATAPORT         		  0423,
0464	F92F	COMMUNICATIONINPUT            		  0296,
0406	0002	COMMUNICATIONINPUTREADY       		  0425,
0436	F902	COMMUNICATIONINSTATUS         		  0281,
0477	F944	COMMUNICATIONOUTPUT           		  0308,  0342,  0355,  0366,
0405	0001	COMMUNICATIONOUTPUTREADY      		  0424,
0449	F917	COMMUNICATIONOUTSTATUS        		  0330,
0403	00ED	COMMUNICATIONSTATUSPORT       		  0422,
0421	F8F2	COMMUNICATIONTABLE            		  0437,  0450,  0465,  0478,
1177	FD20	COMPAREDKTRK                  		  1046,
1180	FD25	COMPAREDKTRKSEC               		  1003,
1182	FD27	COMPAREDKTRKSECLOOP           		  1179,  1190,
0284	F878	CONIN                         		  0062,
0299	F886	CONOUT                        		  0063,  0237,
0269	F862	CONST                         		  0061,
1313	FDA9	CORRECTDISKTYPE               		  1309,
0871	0004	CPMSECPERPHYSICAL             		  0872,  0873,
0872	0048	CPMSECPERTRACK                		  1009,
0114	000D	CR                            		  0131,  0135,  0141,  0148,  0155,  0162,  0169,

0896	FBE8	DATAINDISKBUFFER              		  0851,  1036,
0010	3930	DAY                           		  0126,
1252	FD41	DCTBYTECOUNT                  		  1267,  1337,
1247	FD3C	DCTCOMMAND                    		  1265,  1291,  1305,  1346,
1253	FD43	DCTDMAADDRESS                 		  1282,  1339,
1249	FD3E	DCTHEAD                       		  1269,  1332,
1255	FD47	DCTNEXTCONTROLLOCATION        		  1290,  1345,
1254	FD45	DCTNEXTSTATUSBLOCK            		  1288,  1343,
1251	FD40	DCTSECTOR                     		  1279,  1335,
1250	FD3F	DCTTRACK                      		  1276,  1319,
1248	FD3D	DCTUNIT                       		  1273,  1316,
0930	FBF9	DEBLOCKINGREQUIRED            		  0748,  0944,  0974,
0035	0004	DEFAULTDISK                   		  0219,  0257,
0048	0080	DEFAULTDISKBUFFER             		  0253,  1403,
0634	F9C1	DIRECTORYBUFFER               		  0599,  0609,  0619,  0629,
0700	FAC1	DISKAALLOCATIONVECTOR         		  0602,
0687	FA61	DISKAWORKAREA                 		  0601,
0701	FAD7	DISKBALLOCATIONVECTOR         		  0612,
0078	F633	DISKBUFFER                    		  0082,  1092,  1338,
0688	FA81	DISKBWORKAREA                 		  0611,
0703	FAED	DISKCALLOCATIONVECTOR         		  0622,
1238	0045	DISKCONTROL5                  		  1344,  1349,  1383,  1393,  1423,
1233	0040	DISKCONTROL8                  		  1289,  1294,
1246	FD3C	DISKCONTROLTABLE              		  1412,
0689	FAA1	DISKCWORKAREA                 		  0621,
0704	FB0C	DISKDALLOCATIONVECTOR         		  0632,
0690	FAB1	DISKDWORKAREA                 		  0631,
1366	FE05	DISKERROR                     		  1311,  1361,
0923	FBF6	DISKERRORFLAG                 		  1030,  1161,  1170,  1363,  1368,
0592	F981	DISKPARAMETERHEADERS          		  0731,
1241	0001	DISKREADCODE                  		  1263,  1303,
1236	0043	DISKSTATUSBLOCK               		  1287,  1342,  1359,  1382,  1392,  1431,
0931	FBFA	DISKTYPE                      		  0745,  1307,
1242	0002	DISKWRITECODE                 		  1259,  1300,
0230	F833	DISPLAYMESSAGE                		  0216,  0240,  1438,
0775	FB63	DMAADDRESS                    		  0779,  1095,  1281,
0467	F935	DUMMYINPUT                    		  0297,
0439	F908	DUMMYINSTATUS                 		  0282,
0480	F94A	DUMMYOUTPUT                   		  0309,  0343,  0354,  0365,
0452	F91D	DUMMYOUTSTATUS                		  0331,

1449	FE7D	END                           		
0242	F840	ENTERCPM                      		  0222,  1409,

0044	005C	FCB                           		
0637	0001	FLOPPY5                       		  0649,  1308,
0651	FA42	FLOPPY5PARAMETERBLOCK         		  0600,  0610,
0793	FB6B	FLOPPY5SKEWTABLE              		  0595,  0605,  0625,
0638	0002	FLOPPY8                       		  0666,
0669	FA52	FLOPPY8PARAMETERBLOCK         		  0620,  0630,
0817	FBB3	FLOPPY8SKEWTABLE              		  0615,

0276	F86A	GETCONSOLESTATUS              		  0270,
0323	F89C	GETLISTSTATUS                 		  0317,

1330	FDC7	HEAD0                         		  1326,
0847	FBD3	HOME                          		  0067,
0852	FBDD	HOMENOWRITE                   		  0850,

0892	FBE4	INBUFFERDISK                  		  1062,  1314,
0891	FBE4	INBUFFERDKTRKSEC              		  1044,
0894	FBE7	INBUFFERSECTOR                		  1049,  1066,  1323,
0893	FBE5	INBUFFERTRACK                 		  1064,  1317,
0212	F713	INITIALIZECOMPLETE            		  0195,
0192	F6FD	INITIALIZELOOP                		  0209,
0200	F707	INITIALIZENEXTBYTE            		  0207,
0204	F70A	INITIALIZEPORT                		  0197,
0084	F633	INITIALIZESTREAM              		  0191,
0004	00DB	INOPCODE                      		  0490,  0502,  0518,
0510	F960	INPUTDATA                     		  0458,  0461,  0466,  0514,
0519	F96E	INPUTDATAPORT                 		  0517,
0487	F94B	INPUTSTATUS                   		  0432,  0435,  0438,  0512,
0491	F950	INPUTSTATUSPORT               		  0489,
0033	0003	IOBYTE                        		  0214,  0277,  0291,  0303,  0324,  0336,  0348,  0361,

0020	2000	LENGTHINBYTES                 		
0019	0009	LENGTHINK                     		
0115	000A	LF                            		  0131,  0135,  0141,  0148,  0155,  0162,  0169,
0333	F8AC	LIST                          		  0064,
0311	F894	LISTST                        		  0074,

0013	0040	MEMORYSIZE                    		
0009	3830	MONTH                         		  0123,
1195	FD31	MOVEDKTRKSEC                  		  0990,
1197	FD33	MOVEDKTRKSECLOOP              		  1204,
0898	FBE9	MUSTWRITEBUFFER               		  0848,  1055,  1076,  1110,  1168,

0641	0080	NEEDDEBLOCKING                		  0649,  0747,
1015	FC5F	NOTRACKCHANGE                 		  1010,
0706	0004	NUMBEROFLOGICALDISKS          		  0719,

0005	00D3	OUTOPCODE                     		  0203,  0532,
0523	F970	OUTPUTDATA                    		  0473,  0476,  0479,  0527,
0533	F97F	OUTPUTDATAPORT                		  0530,
0499	F956	OUTPUTSTATUS                  		  0445,  0448,  0451,  0525,
0503	F95B	OUTPUTSTATUSPORT              		  0501,

0031	0000	PAGEZERO                      		
1028	FC6E	PERFORMREADWRITE              		  0957,  1018,
0870	0012	PHYSICALSECPERTRACK           		  0872,
0077	0200	PHYSICALSECTORSIZE            		  0079,  0871,  1336,
0926	FBF7	PREREADSECTORFLAG             		  0954,  1017,  1024,  1068,
0345	F8BC	PUNCH                         		  0065,

0046	007D	RANDOMRECORDPOSITION          		
0943	FBFB	READ                          		  0072,
0358	F8CD	READER                        		  0066,
0929	FBF8	READFLAG                      		  0953,  0979,  1105,
1262	FD4E	READNODEBLOCK                 		  0946,
1302	FD96	READPHYSICAL                  		  1070,
1059	FCA3	READSECTORINTOBUFFER          		  1040,
1020	FC66	REQUESTPREREAD                		  0997,  1004,

0874	0002	SECTORBITSHIFT                		
1080	FCC0	SECTORINBUFFER                		  1052,
0873	0003	SECTORMASK                    		  1082,
1054	FC9C	SECTORNOTINBUFFER             		  1047,
0833	FBCD	SECTRAN                       		  0075,
0716	FB2B	SELDSK                        		  0068,
0904	FBEA	SELECTEDDISK                  		  0722,  1061,  1271,
0913	FBF0	SELECTEDDISKDEBLOCK           		
0912	FBEF	SELECTEDDISKTYPE              		
0903	FBEA	SELECTEDDKTRKSEC              		  0988,  1001,  1045,
0910	FBEE	SELECTEDPHYSICALSECTOR        		  1035,  1050,  1065,
0906	FBED	SELECTEDSECTOR                		  0768,  1031,  1081,  1278,
0905	FBEB	SELECTEDTRACK                 		  0759,  1063,  1275,
0369	F8DC	SELECTROUTINE                 		  0278,  0292,  0304,  0327,  0339,  0352,  0363,
0377	F8DD	SELECTROUTINE21               		
0776	FB65	SETDMA                        		  0071,  0254,
0766	FB5E	SETSEC                        		  0070,
0756	FB58	SETTRK                        		  0069,  0854,
0117	F643	SIGNONMESSAGE                 		  0215,

0399	0001	TERMINALDATAPORT              		  0418,
0459	F926	TERMINALINPUT                 		  0295,
0401	007F	TERMINALINPUTREADY            		  0420,
0433	F8FC	TERMINALINSTATUS              		  0280,
0474	F93E	TERMINALOUTPUT                		  0307,  0341,  0356,  0367,
0400	0080	TERMINALOUTPUTREADY           		  0419,
0446	F911	TERMINALOUTSTATUS             		  0329,
0398	0002	TERMINALSTATUSPORT            		  0417,
0416	F8EE	TERMINALTABLE                 		  0434,  0447,  0460,  0475,
0394	00EC	TTYDATAPORT                   		  0413,
0456	F920	TTYINPUT                      		  0294,
0396	0002	TTYINPUTREADY                 		  0415,
0430	F8F6	TTYINSTATUS                   		  0279,
0471	F938	TTYOUTPUT                     		  0306,  0340,  0353,  0364,
0395	0001	TTYOUTPUTREADY                		  0414,
0443	F90B	TTYOUTSTATUS                  		  0328,
0393	00ED	TTYSTATUSPORT                 		  0412,
0411	F8EA	TTYTABLE                      		  0431,  0444,  0457,  0472,

0918	FBF1	UNALLOCATEDDISK               		
0917	FBF1	UNALLOCATEDDKTRKSEC           		  0989,  1002,
0920	FBF4	UNALLOCATEDSECTOR             		
0919	FBF2	UNALLOCATEDTRACK              		  1012,  1014,
0921	FBF5	UNALOCATEDLRECORDCOUNT        		  0951,  0987,  0995,  0999,  1022,

0008	3130	VERSION                       		  0120,

1426	FE4C	WAITFORBOOTCOMPLETE           		  1429,
1354	FDF3	WAITFORDISKCOMPLETE           		  1296,  1357,
0059	F603	WARMBOOTENTRY                 		  0032,  0247,
1441	FE63	WARMBOOTERROMESSAGE           		  1437,
1436	FE5A	WARMBOOTERROR                 		  1433,
1411	FE37	WARMBOOTREAD                  		  1405,  1408,
1415	FE3F	WARMBYTEMOVE                  		  1421,
1402	FE25	WBOOT                         		  0060,  1439,
0973	FC15	WRITE                         		  0073,
0883	0000	WRITEALLOCATED                		
0884	0001	WRITEDIRECTORY                		  1160,
1258	FD49	WRITENODEBLOCK                		  0976,
1299	FD91	WRITEPHYSICAL                 		  1057,  1169,
0887	FBE3	WRITETYPE                     		  0956,  0981,  1159,
0885	0002	WRITEUNALLOCATED              		  0955,  0982,

0011	3531	YEAR                          		  0129,
