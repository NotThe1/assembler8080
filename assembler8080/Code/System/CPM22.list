0001: 0000                                    
0002: 0000                ;**************************************************************
0003: 0000                ;*                  
0004: 0000                ;*             C P / M   version   2 . 2
0005: 0000                ;*                    Sourced from:
0006: 0000                ;*  Reconstructed from memory image on February 27, 1981
0007: 0000                ;*                by Clark A. Calkins
0008: 0000                ;*                  
0009: 0000                ;**************************************************************
0010: 0000                ;                   
0011: 0000                                    
0012: 0000                ;                   
0013: 0000                MEM			EQU		64			;for a 64k system 
0014: 0000                ;                   
0015: 0000                IOBYTE		EQU		3			;i/o definition byte.
0016: 0000                TDRIVE		EQU		4			;current drive name and user number.
0017: 0000                ENTRY		EQU		5			;entry point for the cp/m bdos.
0018: 0000                TFCB		EQU		5CH			;default file control block.
0019: 0000                Pg0Buffer	EQU		80H			;i/o buffer and command line storage.
0020: 0000                TBASE		EQU		100H		;transiant program storage area.
0021: 0000                ;                   
0022: 0000                ;   Set control character equates.
0023: 0000                ;                   
0024: 0000                CNTRLC		EQU		03H			;control-c
0025: 0000                CNTRLE		EQU		05H			;control-e
0026: 0000                BS			EQU		08H			;backspace
0027: 0000                TAB			EQU		09H			;tab
0028: 0000                LF			EQU		0AH			;line feed
0029: 0000                FF			EQU		0CH			;form feed
0030: 0000                CR			EQU		0DH			;carriage return
0031: 0000                CNTRLP		EQU		10H			;control-p
0032: 0000                CNTRLR		EQU		12H			;control-r
0033: 0000                CNTRLS		EQU		13H			;control-s
0034: 0000                CNTRLU		EQU		15H			;control-u
0035: 0000                CNTRLX		EQU		18H			;control-x
0036: 0000                CNTRLZ		EQU		1AH			;control-z (end-of-file mark)
0037: 0000                DEL			EQU		7FH			;rubout
0038: 0000                ;                   
0039: 0000                BLANK		EQU		020H		; Space/Blank
0040: 0000                BRACKETLEFT		EQU	07BH		; {
0041: 0000                BRACKETRIGHT	EQU	07DH		; }
0042: 0000                QMARK		EQU		03FH		; ?
0043: 0000                EQUALS		EQU		03DH		; =
0044: 0000                USCORE		EQU		05FH		; _
0045: 0000                PERIOD		EQU		02EH		; .
0046: 0000                COLON		EQU		03AH		; :
0047: 0000                SEMIC		EQU		03BH		; ;
0048: 0000                LESSTH		EQU		03CH		; <
0049: 0000                GRTTHAN		EQU		03EH		; >
0050: 0000                ASTRK		EQU		02AH		; *
0051: 0000                CARET		EQU		05EH		; ^
0052: 0000                ATSIGN		EQU		040H		; @
0053: 0000                POUNDSN		EQU		023H		; #
0054: 0000                DOLLAR		EQU		024H		; $
0055: 0000                                    
0056: 0000                ;                   
0057: 0000                ;   Set origin for CP/M
0058: 0000                ;                   
0059: 0000                	ORG	(MEM-8)*1024   
0060: E000                CodeStart:          
0061: E000                ;                   
0062: E000                CBASE:              
0063: E000     C342E3     		JMP		COMMAND		;execute command processor (ccp).
0064: E003     C33EE3     		JMP		CLEARBUF	;entry to empty input buffer before starting ccp.
0065: E006                                    
0066: E006                ;                   
0067: E006                ;   Standard cp/m ccp input buffer. Format is (max length),
0068: E006                ; (actual length), (char #1), (char #2), (char #3), etc.
0069: E006                ;                   
0070: E006                INBUFF:             
0071: E006     7F         		DB		127			;length of input buffer.
0072: E007     00         		DB		0			;current length of contents.
0073: E008     434F50595249474854 		DB		'Copyright'   
0074: E011     203139373920284329204259204449474954414C205245534541524348202020202020 		DB		' 1979 (c) by Digital Research      '
0075: E034     0000000000000000000000000000000000000000000000 		DB		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0076: E04B     0000000000000000000000000000000000000000000000 		DB		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0077: E062     0000000000000000000000000000000000000000000000 		DB		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0078: E079     000000000000000000000000000000 		DB		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0079: E088                INPOINT:            
0080: E088     08E0       		DW		INBUFF+2	;input line pointer
0081: E08A                NAMEPNT:            
0082: E08A     0000       		DW		0			;input line pointer used for error message. Points to
0083: E08C                ;			;start of name in error.
0084: E08C                ;                   
0085: E08C                ;   Routine to print (A) on the console. All registers used.
0086: E08C                ;                   
0087: E08C                PRINT:              
0088: E08C     5F         	MOV		E,A			;setup bdos call.
0089: E08D     0E02       	MVI		C,2           
0090: E08F     C30500     	JMP		ENTRY         
0091: E092                ;                   
0092: E092                ;   Routine to print (A) on the console and to save (BC).
0093: E092                ;                   
0094: E092                PRINTB:             
0095: E092     C5         	PUSH	B             
0096: E093     CD8CE0     	CALL	PRINT         
0097: E096     C1         	POP		B             
0098: E097     C9         	RET                
0099: E098                ;                   
0100: E098                ;   Routine to send a carriage return, line feed combination
0101: E098                ; to the console.   
0102: E098                ;                   
0103: E098                CRLF:               
0104: E098     3E0D       	MVI		A,CR          
0105: E09A     CD92E0     	CALL	PRINTB        
0106: E09D     3E0A       	MVI		A,LF          
0107: E09F     C392E0     	JMP		PRINTB        
0108: E0A2                ;                   
0109: E0A2                ;   Routine to send one space to the console and save (BC).
0110: E0A2                ;                   
0111: E0A2                SPACE:              
0112: E0A2     3E20       	MVI		A,BLANK		; blank/Space
0113: E0A4     C392E0     	JMP		PRINTB        
0114: E0A7                ;                   
0115: E0A7                ;   Routine to print character string pointed to be (BC) on the
0116: E0A7                ; console. It must terminate with a null byte.
0117: E0A7                ;                   
0118: E0A7                PLINE:              
0119: E0A7     C5         	PUSH	B             
0120: E0A8     CD98E0     	CALL	CRLF          
0121: E0AB     E1         	POP		H             
0122: E0AC                PLINE2:             
0123: E0AC     7E         	MOV		A,M           
0124: E0AD     B7         	ORA		A             
0125: E0AE     C8         	RZ                 
0126: E0AF     23         	INX		H             
0127: E0B0     E5         	PUSH	H             
0128: E0B1     CD8CE0     	CALL	PRINT         
0129: E0B4     E1         	POP		H             
0130: E0B5     C3ACE0     	JMP		PLINE2        
0131: E0B8                ;                   
0132: E0B8                ;   Routine to reset the disk system.
0133: E0B8                ;                   
0134: E0B8                RESDSK:             
0135: E0B8     0E0D       	MVI		C,13          
0136: E0BA     C30500     	JMP		ENTRY         
0137: E0BD                ;                   
0138: E0BD                ;   Routine to select disk (A).
0139: E0BD                ;                   
0140: E0BD                DSKSEL:             
0141: E0BD     5F         	MOV		E,A           
0142: E0BE     0E0E       	MVI		C,14          
0143: E0C0     C30500     	JMP		ENTRY         
0144: E0C3                ;                   
0145: E0C3                ;   Routine to call bdos and save the return code. The zero
0146: E0C3                ; flag is set on a return of 0ffh.
0147: E0C3                ;                   
0148: E0C3                ENTRY1:             
0149: E0C3     CD0500     	CALL	ENTRY         
0150: E0C6     32D1E7     	STA		RTNCODE		;save return code.
0151: E0C9     3C         	INR		A			;set zero if 0ffh returned.
0152: E0CA     C9         	RET                
0153: E0CB                ;                   
0154: E0CB                ;   Routine to open a file. (DE) must point to the FCB.
0155: E0CB                ;                   
0156: E0CB                OPEN:               
0157: E0CB     0E0F       	MVI		C,15          
0158: E0CD     C3C3E0     	JMP		ENTRY1        
0159: E0D0                ;                   
0160: E0D0                ;   Routine to open file at (FCB).
0161: E0D0                ;                   
0162: E0D0                OPENFCB:            
0163: E0D0     AF         	XRA		A		;clear the record number byte at fcb+32
0164: E0D1     32D0E7     	STA		FCB+32        
0165: E0D4     11B0E7     	LXI		D,FCB         
0166: E0D7     C3CBE0     	JMP		OPEN          
0167: E0DA                ;                   
0168: E0DA                ;   Routine to close a file. (DE) points to FCB.
0169: E0DA                ;                   
0170: E0DA                CLOSE:              
0171: E0DA     0E10       	MVI		C,16          
0172: E0DC     C3C3E0     	JMP		ENTRY1        
0173: E0DF                ;                   
0174: E0DF                ;   Routine to search for the first file with ambigueous name
0175: E0DF                ; (DE).             
0176: E0DF                ;                   
0177: E0DF                SRCHFST:            
0178: E0DF     0E11       	MVI		C,17          
0179: E0E1     C3C3E0     	JMP		ENTRY1        
0180: E0E4                ;                   
0181: E0E4                ;   Search for the next ambigeous file name.
0182: E0E4                ;                   
0183: E0E4                SRCHNXT:            
0184: E0E4     0E12       	MVI		C,18          
0185: E0E6     C3C3E0     	JMP		ENTRY1        
0186: E0E9                ;                   
0187: E0E9                ;   Search for file at (FCB).
0188: E0E9                ;                   
0189: E0E9                SRCHFCB:            
0190: E0E9     11B0E7     	LXI		D,FCB         
0191: E0EC     C3DFE0     	JMP		SRCHFST       
0192: E0EF                ;                   
0193: E0EF                ;   Routine to delete a file pointed to by (DE).
0194: E0EF                ;                   
0195: E0EF                DELETE:             
0196: E0EF     0E13       	MVI		C,19          
0197: E0F1     C30500     	JMP		ENTRY         
0198: E0F4                ;                   
0199: E0F4                ;   Routine to call the bdos and set the zero flag if a zero
0200: E0F4                ; status is returned.
0201: E0F4                ;                   
0202: E0F4                ENTRY2:             
0203: E0F4     CD0500     	CALL	ENTRY         
0204: E0F7     B7         	ORA		A		;set zero flag if appropriate.
0205: E0F8     C9         	RET                
0206: E0F9                ;                   
0207: E0F9                ;   Routine to read the next record from a sequential file.
0208: E0F9                ; (DE) points to the FCB.
0209: E0F9                ;                   
0210: E0F9                RDREC:              
0211: E0F9     0E14       	MVI		C,20          
0212: E0FB     C3F4E0     	JMP		ENTRY2        
0213: E0FE                ;                   
0214: E0FE                ;   Routine to read file at (FCB).
0215: E0FE                ;                   
0216: E0FE                READFCB:            
0217: E0FE     11B0E7     	LXI		D,FCB         
0218: E101     C3F9E0     	JMP		RDREC         
0219: E104                ;                   
0220: E104                ;   Routine to write the next record of a sequential file.
0221: E104                ; (DE) points to the FCB.
0222: E104                ;                   
0223: E104                WRTREC:             
0224: E104     0E15       	MVI		C,21          
0225: E106     C3F4E0     	JMP		ENTRY2        
0226: E109                ;                   
0227: E109                ;   Routine to create the file pointed to by (DE).
0228: E109                ;                   
0229: E109                CREATE:             
0230: E109     0E16       	MVI		C,22          
0231: E10B     C3C3E0     	JMP		ENTRY1        
0232: E10E                ;                   
0233: E10E                ;   Routine to rename the file pointed to by (DE). Note that
0234: E10E                ; the new name starts at (DE+16).
0235: E10E                ;                   
0236: E10E                RENAM:              
0237: E10E     0E17       	MVI		C,23          
0238: E110     C30500     	JMP		ENTRY         
0239: E113                ;                   
0240: E113                ;   Get the current user code.
0241: E113                ;                   
0242: E113                GETUSR:             
0243: E113     1EFF       	MVI		E,0FFH			; make it get
0244: E115                ;                   
0245: E115                ;   Routine to get or set the current user code.
0246: E115                ; If (E) is FF then this is a GET, else it is a SET.
0247: E115                ;                   
0248: E115                GETSETUC:           
0249: E115     0E20       	MVI		C,32			; BDOS vector
0250: E117     C30500     	JMP		ENTRY         
0251: E11A                ;                   
0252: E11A                ;   Routine to set the current drive byte at (TDRIVE).
0253: E11A                ;                   
0254: E11A                SETCDRV:            
0255: E11A     CD13E1     	CALL	GETUSR			;get user number
0256: E11D     87         	ADD		A				;and shift into the upper 4 bits.
0257: E11E     87         	ADD		A             
0258: E11F     87         	ADD		A             
0259: E120     87         	ADD		A             
0260: E121     21D2E7     	LXI		H,CDRIVE		;now add in the current drive number.
0261: E124     B6         	ORA		M             
0262: E125     320400     	STA		TDRIVE			;and save.
0263: E128     C9         	RET                
0264: E129                ;                   
0265: E129                ;   Move currently active drive down to (TDRIVE).
0266: E129                ;                   
0267: E129                MOVECD:             
0268: E129     3AD2E7     	LDA		CDRIVE        
0269: E12C     320400     	STA		TDRIVE        
0270: E12F     C9         	RET                
0271: E130                ;                   
0272: E130                ;   Routine to convert (A) into upper case ascii. Only letters
0273: E130                ; are affected.     
0274: E130                ;                   
0275: E130                UPPER:              
0276: E130     FE61       	CPI		061H			; 'a'	;check for letters in the range of 'a' to 'z'.
0277: E132     D8         	RC                 
0278: E133     FE7B       	CPI		BRACKETLEFT		;'{'
0279: E135     D0         	RNC                
0280: E136     E65F       	ANI		5FH				;convert it if found.
0281: E138     C9         	RET                
0282: E139                ;                   
0283: E139                ;   Routine to get a line of input. We must check to see if the
0284: E139                ; user is in (BATCH) mode. If so, then read the input from file
0285: E139                ; ($$$.SUB). At the end, reset to console input.
0286: E139                ;                   
0287: E139                GETINP:             
0288: E139     3A8EE7     	LDA		BATCH			;if =0, then use console input.
0289: E13C     B7         	ORA		A             
0290: E13D     CA96E1     	JZ		GETINP1        
0291: E140                ;                   
0292: E140                ;   Use the submit file ($$$.sub) which is prepared by a
0293: E140                ; SUBMIT run. It must be on drive (A) and it will be deleted
0294: E140                ; if and error occures (like eof).
0295: E140                ;                   
0296: E140     3AD2E7     	LDA		CDRIVE		;select drive 0 if need be.
0297: E143     B7         	ORA		A             
0298: E144     3E00       	MVI		A,0			;always use drive A for submit.
0299: E146     C4BDE0     	CNZ		DSKSEL		;select it if required.
0300: E149     118FE7     	LXI		D,BATCHFCB    
0301: E14C     CDCBE0     	CALL	OPEN		;look for it.
0302: E14F     CA96E1     	JZ		GETINP1		;if not there, use normal input.
0303: E152     3A9EE7     	LDA		BATCHFCB+15	;get last record number+1.
0304: E155     3D         	DCR		A             
0305: E156     32AFE7     	STA		BATCHFCB+32   
0306: E159     118FE7     	LXI		D,BATCHFCB    
0307: E15C     CDF9E0     	CALL	RDREC		;read last record.
0308: E15F     C296E1     	JNZ		GETINP1		;quit on end of file.
0309: E162                ;                   
0310: E162                ;   Move this record into input buffer.
0311: E162                ;                   
0312: E162     1107E0     	LXI		D,INBUFF+1    
0313: E165     218000     	LXI		H,Pg0Buffer	;data was read into buffer here.
0314: E168     0680       	MVI		B,128		;all 128 characters may be used.
0315: E16A     CD28E4     	CALL	HL2DE		;(HL) to (DE), (B) bytes.
0316: E16D     219DE7     	LXI		H,BATCHFCB+14 
0317: E170     3600       	MVI		M,0			;zero out the 's2' byte.
0318: E172     23         	INX		H			;and decrement the record count.
0319: E173     35         	DCR		M             
0320: E174     118FE7     	LXI		D,BATCHFCB	;close the batch file now.
0321: E177     CDDAE0     	CALL	CLOSE         
0322: E17A     CA96E1     	JZ		GETINP1		;quit on an error.
0323: E17D     3AD2E7     	LDA		CDRIVE		;re-select previous drive if need be.
0324: E180     B7         	ORA		A             
0325: E181     C4BDE0     	CNZ		DSKSEL		;don't do needless selects.
0326: E184                ;                   
0327: E184                ;   Print line just read on console.
0328: E184                ;                   
0329: E184     2108E0     	LXI		H,INBUFF+2    
0330: E187     CDACE0     	CALL	PLINE2        
0331: E18A     CDC2E1     	CALL	CHKCON		;check console, quit on a key.
0332: E18D     CAA7E1     	JZ		GETINP2		;jump if no key is pressed.
0333: E190                ;                   
0334: E190                ;   Terminate the submit job on any keyboard input. Delete this
0335: E190                ; file such that it is not re-started and jump to normal keyboard
0336: E190                ; input section.    
0337: E190                ;                   
0338: E190     CDDDE1     	CALL	DELBATCH	;delete the batch file.
0339: E193     C368E3     	JMP		CMMND1		;and restart command input.
0340: E196                ;                   
0341: E196                ;   Get here for normal keyboard input. Delete the submit file
0342: E196                ; incase there was one.
0343: E196                ;                   
0344: E196                GETINP1:            
0345: E196     CDDDE1     	CALL	DELBATCH	;delete file ($$$.sub).
0346: E199     CD1AE1     	CALL	SETCDRV		;reset active disk.
0347: E19C     0E0A       	MVI		C,10		;get line from console device.
0348: E19E     1106E0     	LXI		D,INBUFF      
0349: E1A1     CD0500     	CALL	ENTRY         
0350: E1A4     CD29E1     	CALL	MOVECD		;reset current drive (again).
0351: E1A7                ;                   
0352: E1A7                ;   Convert input line to upper case.
0353: E1A7                ;                   
0354: E1A7                GETINP2:            
0355: E1A7     2107E0     	LXI		H,INBUFF+1    
0356: E1AA     46         	MOV		B,M			;(B)=character counter.
0357: E1AB                GETINP3:            
0358: E1AB     23         	INX		H             
0359: E1AC     78         	MOV		A,B			;end of the line?
0360: E1AD     B7         	ORA		A             
0361: E1AE     CABAE1     	JZ		GETINP4        
0362: E1B1     7E         	MOV		A,M			;convert to upper case.
0363: E1B2     CD30E1     	CALL	UPPER         
0364: E1B5     77         	MOV		M,A           
0365: E1B6     05         	DCR		B			;adjust character count.
0366: E1B7     C3ABE1     	JMP		GETINP3       
0367: E1BA                GETINP4:            
0368: E1BA     77         	MOV		M,A			;add trailing null.
0369: E1BB     2108E0     	LXI		H,INBUFF+2    
0370: E1BE     2288E0     	SHLD	INPOINT		;reset input line pointer.
0371: E1C1     C9         	RET                
0372: E1C2                ;                   
0373: E1C2                ;   Routine to check the console for a key pressed. The zero
0374: E1C2                ; flag is set is none, else the character is returned in (A).
0375: E1C2                ;                   
0376: E1C2                CHKCON:             
0377: E1C2     0E0B       	MVI		C,11		;check console.
0378: E1C4     CD0500     	CALL	ENTRY         
0379: E1C7     B7         	ORA		A             
0380: E1C8     C8         	RZ					;return if nothing.
0381: E1C9     0E01       	MVI		C,1			;else get character.
0382: E1CB     CD0500     	CALL	ENTRY         
0383: E1CE     B7         	ORA		A			;clear zero flag and return.
0384: E1CF     C9         	RET                
0385: E1D0                ;                   
0386: E1D0                ;   Routine to get the currently active drive number.
0387: E1D0                ;                   
0388: E1D0                GETDSK:             
0389: E1D0     0E19       	MVI		C,25          
0390: E1D2     C30500     	JMP		ENTRY         
0391: E1D5                ;                   
0392: E1D5                ;   Set the stabdard dma address.
0393: E1D5                ;                   
0394: E1D5                STDDMA:             
0395: E1D5     118000     	LXI		D,Pg0Buffer   
0396: E1D8                ;                   
0397: E1D8                ;   Routine to set the dma address to (DE).
0398: E1D8                ;                   
0399: E1D8                DMASET:             
0400: E1D8     0E1A       	MVI		C,26          
0401: E1DA     C30500     	JMP		ENTRY         
0402: E1DD                ;                   
0403: E1DD                ;  Delete the batch file created by SUBMIT.
0404: E1DD                ;                   
0405: E1DD                DELBATCH:           
0406: E1DD     218EE7     	LXI		H,BATCH			;is batch active?
0407: E1E0     7E         	MOV		A,M           
0408: E1E1     B7         	ORA		A             
0409: E1E2     C8         	RZ                 
0410: E1E3     3600       	MVI		M,0				;yes, de-activate it.
0411: E1E5     AF         	XRA		A             
0412: E1E6     CDBDE0     	CALL	DSKSEL			;select drive 0 for sure.
0413: E1E9     118FE7     	LXI		D,BATCHFCB		;and delete this file.
0414: E1EC     CDEFE0     	CALL	DELETE        
0415: E1EF     3AD2E7     	LDA		CDRIVE			;reset current drive.
0416: E1F2     C3BDE0     	JMP		DSKSEL        
0417: E1F5                ;                   
0418: E1F5                ;   Check to two strings at (PATTRN1) and (PATTRN2). They must be
0419: E1F5                ; the same or we halt....
0420: E1F5                ;                   
0421: E1F5                ;VERIFY:            
0422: E1F5                ;	LXI		D,PATTRN1		;these are the serial number bytes.
0423: E1F5                ;	LXI		H,PATTRN2		;ditto, but how could they be different?
0424: E1F5                ;	MVI		B,6				;6 bytes each.
0425: E1F5                ;VERIFY1:           
0426: E1F5                ;	LDAX	D            
0427: E1F5                ;	CMP		M            
0428: E1F5                ;	JNZ		HALT			;jump to halt routine.
0429: E1F5                ;	INX		D            
0430: E1F5                ;	INX		H            
0431: E1F5                ;	DCR		B            
0432: E1F5                ;	JNZ		VERIFY1      
0433: E1F5                ;	RET               
0434: E1F5                ;                   
0435: E1F5                ;   Print back file name with a '?' to indicate a syntax error.
0436: E1F5                ;                   
0437: E1F5                SYNERR:             
0438: E1F5     CD98E0     	CALL	CRLF	;end current line.
0439: E1F8     2A8AE0     	LHLD	NAMEPNT	;this points to name in error.
0440: E1FB                SYNERR1:            
0441: E1FB     7E         	MOV	A,M	;print it until a space or null is found.
0442: E1FC     FE20       	CPI	BLANK		; Space 
0443: E1FE     CA0EE2     	JZ	SYNERR2         
0444: E201     B7         	ORA	A              
0445: E202     CA0EE2     	JZ	SYNERR2         
0446: E205     E5         	PUSH	H             
0447: E206     CD8CE0     	CALL	PRINT         
0448: E209     E1         	POP	H              
0449: E20A     23         	INX	H              
0450: E20B     C3FBE1     	JMP	SYNERR1        
0451: E20E                SYNERR2:            
0452: E20E     3E3F       	MVI	A,QMARK		;add trailing '?'.
0453: E210     CD8CE0     	CALL	PRINT         
0454: E213     CD98E0     	CALL	CRLF          
0455: E216     CDDDE1     	CALL	DELBATCH;delete any batch file.
0456: E219     C368E3     	JMP	CMMND1	;and restart from console input.
0457: E21C                ;                   
0458: E21C                ;   Check character at (DE) for legal command input. Note that the
0459: E21C                ; zero flag is set if the character is a delimiter.
0460: E21C                ;                   
0461: E21C                CHECK:              
0462: E21C     1A         	LDAX	D			; Grab the character
0463: E21D     B7         	ORA		A             
0464: E21E     C8         	RZ					; Exit, its a Null (00)
0465: E21F                	                   
0466: E21F     FE20       	CPI		BLANK		; Is  less than 020H - controls character
0467: E221     DAF5E1     	JC		SYNERR		; Yes,  Syntax error - exit CCP
0468: E224     C8         	RZ					; Exit because Space is valid delimiter.
0469: E225                	                   
0470: E225     FE3D       	CPI	EQUALS			; '=' 
0471: E227     C8         	RZ                 
0472: E228     FE5F       	CPI	USCORE			; '_' 
0473: E22A     C8         	RZ                 
0474: E22B     FE2E       	CPI	PERIOD			; '.' 
0475: E22D     C8         	RZ                 
0476: E22E     FE3A       	CPI	COLON			; ':'  
0477: E230     C8         	RZ                 
0478: E231     FE3B       	CPI	SEMIC			; ';'  
0479: E233     C8         	RZ                 
0480: E234     FE3C       	CPI	LESSTH			; '<' 
0481: E236     C8         	RZ                 
0482: E237     FE3E       	CPI	GRTTHAN			; '>'
0483: E239     C8         	RZ                 
0484: E23A     C9         	RET					; Character is legal, but not a delimiter
0485: E23B                ;                   
0486: E23B                ;   Get the next non-blank character from (DE).
0487: E23B                ;                   
0488: E23B                NONBLANK:           
0489: E23B     1A         	LDAX	D			; get the next character
0490: E23C     B7         	ORA		A			;Since string ends with a null.
0491: E23D     C8         	RZ					; we return here if its 00
0492: E23E     FE20       	CPI		BLANK		; Is it a space?
0493: E240     C0         	RNZ					; No, then we have the next non-space char
0494: E241                	                   
0495: E241     13         	INX		D			; since it a space we need to look at the next character
0496: E242     C33BE2     	JMP		NONBLANK      
0497: E245                ;                   
0498: E245                ;   Add (HL)=(HL)+(A)
0499: E245                ;                   
0500: E245                ADDHL:              
0501: E245     85         	ADD		L             
0502: E246     6F         	MOV		L,A           
0503: E247     D0         	RNC					;take care of any carry.
0504: E248     24         	INR		H             
0505: E249     C9         	RET                
0506: E24A                ;                   
0507: E24A                ;   Convert the first name in (FCB).
0508: E24A                ;                   
0509: E24A                CONVFST:            
0510: E24A     3E00       	MVI	A,0		; set up index for first filename
0511: E24C                ;                   
0512: E24C                ;   Format a file name (convert * to '?', etc.). On return,
0513: E24C                ; (A)=0 is an unambigeous name was specified. Enter with (A) equal to
0514: E24C                ; the position within the fcb for the name (either 0 or 16).
0515: E24C                ;                   
0516: E24C                CONVERT:            
0517: E24C     21B0E7     	LXI		H,FCB		; point at FCB setup by CCP
0518: E24F     CD45E2     	CALL	ADDHL		; now pointing at correct FCB
0519: E252     E5         	PUSH	H			; save    
0520: E253     E5         	PUSH	H             
0521: E254     AF         	XRA		A             
0522: E255     32D3E7     	STA		CHGDRV		; initialize drive change flag - no change.
0523: E258     2A88E0     	LHLD	INPOINT		; set (HL) as pointer into input line.
0524: E25B     EB         	XCHG				; put line pointer in DE for call
0525: E25C     CD3BE2     	CALL	NONBLANK	; return the next non-blank character in A
0526: E25F     EB         	XCHG				; put line buffer pointer in HL for now
0527: E260     228AE0     	SHLD	NAMEPNT		; save pointer here for any error message.
0528: E263     EB         	XCHG				; put line buffer pointer back in DE
0529: E264     E1         	POP		H			; retreive the CCP created FCB
0530: E265     1A         	LDAX	D			; get first character.
0531: E266     B7         	ORA		A			; is it a null 00 ?
0532: E267     CA75E2     	JZ		CONVRT1		; Yes, this FCB is empty (no argument)
0533: E26A                	                   
0534: E26A     DE40       	SBI		040H		; 'A'-1	;might be a drive name, convert to binary.
0535: E26C     47         	MOV		B,A			; and save in case its a drive specifier.
0536: E26D     13         	INX		D			; get the next character 
0537: E26E     1A         	LDAX	D             
0538: E26F     FE3A       	CPI		COLON		; is it ':'
0539: E271     CA7CE2     	JZ		CONVRT2		; Yes, then we have a drive specification
0540: E274     1B         	DCX		D			; No, move pointer back to the start of the line.
0541: E275                CONVRT1:            
0542: E275     3AD2E7     	LDA		CDRIVE		; get current drive
0543: E278     77         	MOV		M,A			; put into the CCP FCB
0544: E279     C382E2     	JMP		CONVRT3       
0545: E27C                CONVRT2:            
0546: E27C     78         	MOV		A,B			; get the saved drive number
0547: E27D     32D3E7     	STA		CHGDRV		; set change in drives flag.
0548: E280     70         	MOV		M,B			; put new drive number in FCB
0549: E281     13         	INX		D			; point past drive number
0550: E282                ;                   
0551: E282                ;   Convert the basic file name.
0552: E282                ;                   
0553: E282                CONVRT3:            
0554: E282     0608       	MVI		B,08H		; File name size
0555: E284                CONVRT4:            
0556: E284     CD1CE2     	CALL	CHECK		; Legal input character ?
0557: E287     CAA5E2     	JZ		PADNAME		; its a delimiter, skip the rest of the filename
0558: E28A     23         	INX		H             
0559: E28B     FE2A       	CPI		ASTRK		; '*'	;note that an '*' will fill the remaining
0560: E28D     C295E2     	JNZ		CONVRT5		; otherwise move to the next character and process.
0561: E290                	                   
0562: E290     363F       	MVI		M,QMARK		; '?'
0563: E292     C397E2     	JMP		CONVRT6       
0564: E295                CONVRT5:				; move on to the next character
0565: E295     77         	MOV		M,A			; put character in FCB
0566: E296     13         	INX		D			; move to next character in input line buffer
0567: E297                CONVRT6:            
0568: E297     05         	DCR		B			; decrement counter
0569: E298     C284E2     	JNZ		CONVRT4		; loop if not done with fileName
0570: E29B                CONVRT7:            
0571: E29B     CD1CE2     	CALL	CHECK		; Do we have a delimiter ?.
0572: E29E     CAACE2     	JZ		GETEXT		; Yes, process the extension
0573: E2A1     13         	INX		D			; No, point a the next character
0574: E2A2     C39BE2     	JMP		CONVRT7		; and see if its a demiliter
0575: E2A5                PADNAME:            
0576: E2A5     23         	INX		H			; blank fill the remaining file name.
0577: E2A6     3620       	MVI		M,BLANK		; store the blank
0578: E2A8     05         	DCR		B			; keep count
0579: E2A9     C2A5E2     	JNZ		PADNAME		; loop till done
0580: E2AC                ;                   
0581: E2AC                ;   Get the extension and convert it.
0582: E2AC                ;                   
0583: E2AC                GETEXT:             
0584: E2AC     0603       	MVI		B,03H		; file extension size
0585: E2AE     FE2E       	CPI		PERIOD		; do we have the Period '.'
0586: E2B0     C2D5E2     	JNZ		PADEXT		; No, Pad fill the extension
0587: E2B3     13         	INX		D			; get past the period
0588: E2B4                GETEXT1:            
0589: E2B4     CD1CE2     	CALL	CHECK		; Legal input character ?		
0590: E2B7     CAD5E2     	JZ		PADEXT		; its a delimiter, so pad the rest of the Extension
0591: E2BA     23         	INX		H			; point at next spot in the CCP FCB
0592: E2BB     FE2A       	CPI		ASTRK		; ; '*'	;note that an '*' will fill the remaining
0593: E2BD     C2C5E2     	JNZ		GETEXT2		; otherwise move to the next character and process.
0594: E2C0                	                   
0595: E2C0     363F       	MVI		M,QMARK		;'?' 
0596: E2C2     C3C7E2     	JMP		GETEXT3       
0597: E2C5                GETEXT2:				; move on to the next character
0598: E2C5     77         	MOV		M,A			; put character in FCB
0599: E2C6     13         	INX		D			; move to next character in input line buffer
0600: E2C7                GETEXT3:            
0601: E2C7     05         	DCR		B			; decrement counter
0602: E2C8     C2B4E2     	JNZ		GETEXT1		; loop if not done with file extension
0603: E2CB                GETEXT4:            
0604: E2CB     CD1CE2     	CALL	CHECK		; Do we have a delimiter ?.
0605: E2CE     CADCE2     	JZ		CLEAREXTENT	; Yes, Clear the EX, S1 & S2
0606: E2D1     13         	INX		D			; No, point a the next character
0607: E2D2     C3CBE2     	JMP		GETEXT4		; and see if its a demiliter
0608: E2D5                	                   
0609: E2D5                PADEXT:             
0610: E2D5     23         	INX		H			; blank fill the remaining extension.
0611: E2D6     3620       	MVI		M,BLANK		; store the blank
0612: E2D8     05         	DCR		B			; keep count
0613: E2D9     C2D5E2     	JNZ		PADEXT		; loop till done
0614: E2DC                	                   
0615: E2DC                CLEAREXTENT:        
0616: E2DC     0603       	MVI		B,03H		; set count for clearing EX, S1 & S2
0617: E2DE                CLEAREXTENT1:       
0618: E2DE     23         	INX		H			; point at location in the CCP FCB
0619: E2DF     3600       	MVI		M,0			; initialize it
0620: E2E1     05         	DCR		B			; keep count
0621: E2E2     C2DCE2     	JNZ		CLEAREXTENT	; loop til done
0622: E2E5     EB         	XCHG               
0623: E2E6     2288E0     	SHLD	INPOINT		; save current input line pointer.
0624: E2E9     E1         	POP		H			; point at correct CCP FCB
0625: E2EA                ;                   
0626: E2EA                ;   Check to see if this is an ambigeous file name specification.
0627: E2EA                ; Set the (A) register to non zero if it is.
0628: E2EA                ;                   
0629: E2EA                ;AFN - Ambiguous File Name
0630: E2EA     010B00     	LXI		B,11		; set name & Extension length .
0631: E2ED                AFN:                
0632: E2ED     23         	INX		H             
0633: E2EE     7E         	MOV		A,M           
0634: E2EF     FE3F       	CPI		QMARK		; '?'	;any question marks?
0635: E2F1     C2F5E2     	JNZ		AFN1          
0636: E2F4     04         	INR		B			; increment count
0637: E2F5                AFN1:               
0638: E2F5     0D         	DCR		C             
0639: E2F6     C2EDE2     	JNZ		AFN			; loop if not done
0640: E2F9     78         	MOV		A,B			; B has the question mark count 
0641: E2FA     B7         	ORA		A			; set the Z flag for calling routine
0642: E2FB     C9         	RET                
0643: E2FC                ;                   
0644: E2FC                ;   CP/M command table. Note commands can be either 3 or 4 characters long.
0645: E2FC                ;                   
0646: E2FC                NUMCMDS	EQU	6	;number of commands
0647: E2FC                CMDTBL:             
0648: E2FC     44495220   	DB	'DIR '		; 0     
0649: E300     45524120   	DB	'ERA '		; 1     
0650: E304     54595045   	DB	'TYPE'		; 2     
0651: E308     53415645   	DB	'SAVE'		; 3     
0652: E30C     52454E20   	DB	'REN '		; 4     
0653: E310     55534552   	DB	'USER'		; 5     
0654: E314                	;Unknown		; 6      
0655: E314                ;                   
0656: E314                ;   The following six bytes must agree with those at (PATTRN2)
0657: E314                ; or cp/m will HALT. Why?
0658: E314                ;                   
0659: E314                ;PATTRN1:           
0660: E314                ;	DB	0,22,0,0,0,0;(* serial number bytes *).
0661: E314                ;                   
0662: E314                ;   Search the command table for a match with what has just
0663: E314                ; been entered. If a match is found, then we jump to the
0664: E314                ; proper section. Else jump to (UNKNOWN).
0665: E314                ; On return, the (C) register is set to the command number
0666: E314                ; that matched (or NUMCMDS+1 if no match).
0667: E314                ;                   
0668: E314                SEARCH:             
0669: E314     21FCE2     	LXI	H,CMDTBL       
0670: E317     0E00       	MVI	C,0            
0671: E319                SEARCH1:            
0672: E319     79         	MOV	A,C            
0673: E31A     FE06       	CPI	NUMCMDS	;this commands exists.
0674: E31C     D0         	RNC                
0675: E31D     11B1E7     	LXI	D,FCB+1	;check this one.
0676: E320     0604       	MVI	B,4	;max command length.
0677: E322                SEARCH2:            
0678: E322     1A         	LDAX	D             
0679: E323     BE         	CMP	M              
0680: E324     C235E3     	JNZ	SEARCH3	;not a match.
0681: E327     13         	INX	D              
0682: E328     23         	INX	H              
0683: E329     05         	DCR	B              
0684: E32A     C222E3     	JNZ	SEARCH2        
0685: E32D     1A         	LDAX	D	;allow a 3 character command to match.
0686: E32E     FE20       	CPI	BLANK          
0687: E330     C23AE3     	JNZ	SEARCH4        
0688: E333     79         	MOV	A,C	;set return register for this command.
0689: E334     C9         	RET                
0690: E335                SEARCH3:            
0691: E335     23         	INX	H              
0692: E336     05         	DCR	B              
0693: E337     C235E3     	JNZ	SEARCH3        
0694: E33A                SEARCH4:            
0695: E33A     0C         	INR	C              
0696: E33B     C319E3     	JMP	SEARCH1        
0697: E33E                ;                   
0698: E33E                ;   Set the input buffer to empty and then start the command
0699: E33E                ; processor (ccp).  
0700: E33E                ;                   
0701: E33E                CLEARBUF:           
0702: E33E     AF         XRA	A               
0703: E33F     3207E0     	STA	INBUFF+1;second byte is actual length.
0704: E342                ;                   
0705: E342                ;**************************************************************
0706: E342                ;*                  
0707: E342                ;*                  
0708: E342                ;* C C P  -   C o n s o l e   C o m m a n d   P r o c e s s o r
0709: E342                ;*                  
0710: E342                ;                   
0711: E342                ;   On entry (C) points at Current disk & user (defaultDisk 0004)
0712: E342                ;**************************************************************
0713: E342                ;*                  
0714: E342                COMMAND:            
0715: E342     318EE7     	LXI			SP,CCPStack				; Use dedicated stack space.
0716: E345     C5         	PUSH		B						; (C) should be equal to currentDisk where:
0717: E346     79         	MOV			A,C						; (uuuudddd) where 'uuuu' is the user number
0718: E347     1F         	RAR									; and 'dddd' is the drive number.
0719: E348     1F         	RAR                
0720: E349     1F         	RAR                
0721: E34A     1F         	RAR                
0722: E34B     E60F       	ANI			0FH						; isolate the user number.
0723: E34D     5F         	MOV			E,A						; put into E for call
0724: E34E     CD15E1     	CALL	GETSETUC					; to the current user
0725: E351     CDB8E0     	CALL	RESDSK						;reset the disk system.
0726: E354     328EE7     	STA	BATCH	;clear batch mode flag.
0727: E357     C1         	POP	B              
0728: E358     79         	MOV	A,C            
0729: E359     E60F       	ANI	0FH	;isolate the drive number.
0730: E35B     32D2E7     	STA	CDRIVE	;and save.
0731: E35E     CDBDE0     	CALL	DSKSEL	;...and select.
0732: E361     3A07E0     	LDA	INBUFF+1       
0733: E364     B7         	ORA	A	;anything in input buffer already?
0734: E365     C27EE3     	JNZ	CMMND2	;yes, we just process it.
0735: E368                ;                   
0736: E368                ;   Entry point to get a command line from the console.
0737: E368                ;                   
0738: E368                CMMND1:             
0739: E368     318EE7     	LXI	SP,CCPStack;set stack straight.
0740: E36B     CD98E0     	CALL	CRLF	;start a new line on the screen.
0741: E36E     CDD0E1     	CALL	GETDSK	;get current drive.
0742: E371     C661       	ADI	061H		; 'a'    
0743: E373     CD8CE0     	CALL	PRINT	;print current drive.
0744: E376     3E3E       	MVI	A,GRTTHAN	; '>'
0745: E378     CD8CE0     	CALL	PRINT	;and add prompt.
0746: E37B     CD39E1     	CALL	GETINP	;get line from user.
0747: E37E                ;                   
0748: E37E                ;   Process command line here.
0749: E37E                ;                   
0750: E37E                CMMND2:             
0751: E37E     118000     	LXI	D,Pg0Buffer    
0752: E381     CDD8E1     	CALL	DMASET	;set standard dma address.
0753: E384     CDD0E1     	CALL	GETDSK        
0754: E387     32D2E7     	STA	CDRIVE	;set current drive.
0755: E38A     CD4AE2     	CALL	CONVFST	;convert name typed in.
0756: E38D     C4F5E1     	CNZ	SYNERR	;wild cards are not allowed.
0757: E390     3AD3E7     	LDA	CHGDRV	;if a change in drives was indicated,
0758: E393     B7         	ORA	A	;then treat this as an unknown command
0759: E394     C28BE6     	JNZ	UNKNOWN	;which gets executed.
0760: E397     CD14E3     	CALL	SEARCH	;else search command table for a match.
0761: E39A                ;                   
0762: E39A                ;   Note that an unknown command returns
0763: E39A                ; with (A) pointing to the last address
0764: E39A                ; in our table which is (UNKNOWN).
0765: E39A                ;                   
0766: E39A     21A7E3     	LXI	H,CMDADR;now, look thru our address table for command (A).
0767: E39D     5F         	MOV	E,A	;set (DE) to command number.
0768: E39E     1600       	MVI	D,0            
0769: E3A0     19         	DAD	D              
0770: E3A1     19         	DAD	D	;(HL)=(CMDADR)+2*(command number).
0771: E3A2     7E         	MOV	A,M	;now pick out this address.
0772: E3A3     23         	INX	H              
0773: E3A4     66         	MOV	H,M            
0774: E3A5     6F         	MOV	L,A            
0775: E3A6     E9         	PCHL		;now execute it.
0776: E3A7                ;                   
0777: E3A7                ;   CP/M command address table.
0778: E3A7                ;                   
0779: E3A7                CMDADR:             
0780: E3A7     5DE4       	DW	DIRECT		; 0     
0781: E3A9     05E5       	DW	ERASE		; 1      
0782: E3AB     43E5       	DW	TYPE		; 2       
0783: E3AD     93E5       	DW	SAVE		; 3       
0784: E3AF     F6E5       	DW	RENAME		; 4     
0785: E3B1     74E6       	DW	USER		; 5       
0786: E3B3     8BE6       	DW	UNKNOWN		; 6    
0787: E3B5                ;                   
0788: E3B5                ;   Halt the system. Reason for this is unknown at present.
0789: E3B5                ;                   
0790: E3B5                HALT:               
0791: E3B5     21F376     	LXI	H,76F3H	;'DI HLT' instructions.
0792: E3B8     2200E0     	SHLD	CBASE         
0793: E3BB     2100E0     	LXI	H,CBASE        
0794: E3BE     E9         	PCHL               
0795: E3BF                ;                   
0796: E3BF                ;   Read error while TYPEing a file.
0797: E3BF                ;                   
0798: E3BF                RDERROR:            
0799: E3BF     01C5E3     	LXI	B,RDERR        
0800: E3C2     C3A7E0     	JMP	PLINE          
0801: E3C5                RDERR:              
0802: E3C5     52454144204552524F5200 	DB	'Read error',0  
0803: E3D0                ;                   
0804: E3D0                ;   Required file was not located.
0805: E3D0                ;                   
0806: E3D0                                    
0807: E3D0                NONE:               
0808: E3D0     01D6E3     	LXI	B,NOFILE       
0809: E3D3     C3A7E0     	JMP	PLINE          
0810: E3D6                NOFILE:             
0811: E3D6     4E4F2046494C4500 	DB	'No file',0     
0812: E3DE                ;                   
0813: E3DE                ;   Decode a command of the form 'A>filename number{ filename}.
0814: E3DE                ; Note that a drive specifier is not allowed on the first file
0815: E3DE                ; name. On return, the number is in register (A). Any error
0816: E3DE                ; causes 'filename?' to be printed and the command is aborted.
0817: E3DE                ;                   
0818: E3DE                DECODE:             
0819: E3DE     CD4AE2     	CALL	CONVFST		;convert first filename.
0820: E3E1     3AD3E7     	LDA		CHGDRV		;do not allow a drive to be specified.
0821: E3E4     B7         	ORA		A             
0822: E3E5     C2F5E1     	JNZ		SYNERR		; exit with a syntax error
0823: E3E8     21B1E7     	LXI		H,FCB+1		;convert number now.
0824: E3EB     010B00     	LXI		B,11		;(B)=sum register, (C)=max digit count.
0825: E3EE                DECODE1:            
0826: E3EE     7E         	MOV		A,M			; get the caracter from the CCP FCB
0827: E3EF     FE20       	CPI		BLANK		; a space terminates the numeral.
0828: E3F1     CA19E4     	JZ		PADNUMBER	; skip, the rest must be blanks
0829: E3F4     23         	INX		H			; bump pointer
0830: E3F5     D630       	SUI		030H  		; '0'	make binary from ascii. ZERO ????
0831: E3F7     FE0A       	CPI		10			; legal digit?
0832: E3F9     D2F5E1     	JNC		SYNERR		; exit with syntax error
0833: E3FC     57         	MOV		D,A			; yes, save the number in (D).
0834: E3FD                	;                  
0835: E3FD     78         	MOV		A,B			; compute (B)=(B)*10 and check for overflow.
0836: E3FE     E6E0       	ANI		0E0H          
0837: E400     C2F5E1     	JNZ		SYNERR		; Exit with math overflow error??
0838: E403     78         	MOV		A,B           
0839: E404     07         	RLC                
0840: E405     07         	RLC                
0841: E406     07         	RLC					;(A)=(B)*8 
0842: E407     80         	ADD		B			;.......*9
0843: E408     DAF5E1     	JC		SYNERR		; Exit with math overflow error??	
0844: E40B     80         	ADD		B			;.......*10
0845: E40C     DAF5E1     	JC		SYNERR		; Exit with math overflow error??
0846: E40F     82         	ADD		D			;	add in new digit now.
0847: E410     DAF5E1     	JC		SYNERR		; Exit with math overflow error??
0848: E413     47         	MOV		B,A			;	and save result in B (subtotal)
0849: E414     0D         	DCR		C			;	only look at 11 digits.
0850: E415     C2EEE3     	JNZ		DECODE1       
0851: E418     C9         	RET					; return with value in (A)
0852: E419                PADNUMBER:          
0853: E419     7E         	MOV		A,M			; spaces must follow (why?).
0854: E41A     FE20       	CPI		BLANK		; is it a blank
0855: E41C     C2F5E1     	JNZ		SYNERR		; exit with syntax error
0856: E41F     23         	INX		H			; point at next
0857: E420     0D         	DCR		C             
0858: E421     C219E4     	JNZ		PADNUMBER	; loop till done
0859: E424     78         	MOV		A,B			;set (A)=the numeric value entered.
0860: E425     C9         	RET                
0861: E426                ;                   
0862: E426                ;   Move 3 bytes from (HL) to (DE). Note that there is only
0863: E426                ; one reference to this at (A2D5h).
0864: E426                ;                   
0865: E426                MOVE3:              
0866: E426     0603       	MVI	B,3            
0867: E428                ;                   
0868: E428                ;   Move (B) bytes from (HL) to (DE).
0869: E428                ;                   
0870: E428                HL2DE:              
0871: E428     7E         	MOV	A,M            
0872: E429     12         	STAX	D             
0873: E42A     23         	INX	H              
0874: E42B     13         	INX	D              
0875: E42C     05         	DCR	B              
0876: E42D     C228E4     	JNZ	HL2DE          
0877: E430     C9         	RET                
0878: E431                ;                   
0879: E431                ;   Compute (HL)=(Pg0Buffer)+(A)+(C) and get the byte that's here.
0880: E431                ;                   
0881: E431                EXTRACT:            
0882: E431     218000     	LXI	H,Pg0Buffer    
0883: E434     81         	ADD	C              
0884: E435     CD45E2     	CALL	ADDHL         
0885: E438     7E         	MOV	A,M            
0886: E439     C9         	RET                
0887: E43A                ;                   
0888: E43A                ;  Check drive specified. If it means a change, then the new
0889: E43A                ; drive will be selected. In any case, the drive byte of the
0890: E43A                ; fcb will be set to null (means use current drive).
0891: E43A                ;                   
0892: E43A                DSELECT:            
0893: E43A     AF         	XRA		A             
0894: E43B     32B0E7     	STA		FCB				; null out first byte of fcb.
0895: E43E     3AD3E7     	LDA		CHGDRV			; is a drive change indicated?
0896: E441     B7         	ORA		A             
0897: E442     C8         	RZ						; No, drive OK
0898: E443     3D         	DCR		A				; yes, is it the same as the current drive?
0899: E444     21D2E7     	LXI		H,CDRIVE      
0900: E447     BE         	CMP		M				; FCB drive number same as this?
0901: E448     C8         	RZ						; Yes, return 					
0902: E449     C3BDE0     	JMP		DSKSEL			;	no. Select it then.
0903: E44C                ;                   
0904: E44C                ;   Check the drive selection and reset it to the previous
0905: E44C                ; drive if it was changed for the preceeding command.
0906: E44C                ;                   
0907: E44C                RESETDR:            
0908: E44C     3AD3E7     	LDA	CHGDRV	;drive change indicated?
0909: E44F     B7         	ORA	A              
0910: E450     C8         	RZ                 
0911: E451     3D         	DCR	A	;yes, was it a different drive?
0912: E452     21D2E7     	LXI	H,CDRIVE       
0913: E455     BE         	CMP	M              
0914: E456     C8         	RZ                 
0915: E457     3AD2E7     	LDA	CDRIVE	;yes, re-select our old drive.
0916: E45A     C3BDE0     	JMP	DSKSEL         
0917: E45D                ;                   
0918: E45D                ;**************************************************************
0919: E45D                ;*                  
0920: E45D                ;*           D I R E C T O R Y   C O M M A N D
0921: E45D                ;*                  
0922: E45D                ;**************************************************************
0923: E45D                ;                   
0924: E45D                DIRECT:             
0925: E45D     CD4AE2     	CALL	CONVFST	;convert file name.
0926: E460     CD3AE4     	CALL	DSELECT	;select indicated drive.
0927: E463     21B1E7     	LXI	H,FCB+1	;was any file indicated?
0928: E466     7E         	MOV	A,M            
0929: E467     FE20       	CPI	BLANK          
0930: E469     C275E4     	JNZ	DIRECT2        
0931: E46C     060B       	MVI	B,11	;no. Fill field with '?' - same as *.*.
0932: E46E                DIRECT1:            
0933: E46E     363F       	MVI	M,QMARK		; '?' 
0934: E470     23         	INX	H              
0935: E471     05         	DCR	B              
0936: E472     C26EE4     	JNZ	DIRECT1        
0937: E475                DIRECT2:            
0938: E475     1E00       	MVI	E,0	;set initial cursor position.
0939: E477     D5         	PUSH	D             
0940: E478     CDE9E0     	CALL	SRCHFCB	;get first file name.
0941: E47B     CCD0E3     	CZ	NONE	;none found at all?
0942: E47E                DIRECT3:            
0943: E47E     CA01E5     	JZ	DIRECT9	;terminate if no more names.
0944: E481     3AD1E7     	LDA	RTNCODE	;get file's position in segment (0-3).
0945: E484     0F         	RRC                
0946: E485     0F         	RRC                
0947: E486     0F         	RRC                
0948: E487     E660       	ANI	60H	;(A)=position*32
0949: E489     4F         	MOV	C,A            
0950: E48A     3E0A       	MVI	A,10           
0951: E48C     CD31E4     	CALL	EXTRACT	;extract the tenth entry in fcb.
0952: E48F     17         	RAL		;check system file status bit.
0953: E490     DAF5E4     	JC	DIRECT8	;we don't list them.
0954: E493     D1         	POP	D              
0955: E494     7B         	MOV	A,E	;bump name count.
0956: E495     1C         	INR	E              
0957: E496     D5         	PUSH	D             
0958: E497     E603       	ANI	03H	;at end of line?
0959: E499     F5         	PUSH	PSW           
0960: E49A     C2B2E4     	JNZ	DIRECT4        
0961: E49D     CD98E0     	CALL	CRLF	;yes, end this line and start another.
0962: E4A0     C5         	PUSH	B             
0963: E4A1     CDD0E1     	CALL	GETDSK	;start line with ('A:').
0964: E4A4     C1         	POP	B              
0965: E4A5     C641       	ADI	041H	; 'A'     
0966: E4A7     CD92E0     	CALL	PRINTB        
0967: E4AA     3E3A       	MVI	A, COLON		; ':'
0968: E4AC     CD92E0     	CALL	PRINTB        
0969: E4AF     C3BAE4     	JMP	DIRECT5        
0970: E4B2                DIRECT4:            
0971: E4B2     CDA2E0     	CALL	SPACE	;add seperator between file names.
0972: E4B5     3E3A       	MVI	A, COLON	;':'  
0973: E4B7     CD92E0     	CALL	PRINTB        
0974: E4BA                DIRECT5:            
0975: E4BA     CDA2E0     	CALL	SPACE         
0976: E4BD     0601       	MVI	B,1	;'extract' each file name character at a time.
0977: E4BF                DIRECT6:            
0978: E4BF     78         	MOV	A,B            
0979: E4C0     CD31E4     	CALL	EXTRACT       
0980: E4C3     E67F       	ANI	7FH	;strip bit 7 (status bit).
0981: E4C5     FE20       	CPI	BLANK	;are we at the end of the name?
0982: E4C7     C2DFE4     	JNZ	DRECT65        
0983: E4CA     F1         	POP	PSW	;yes, don't print spaces at the end of a line.
0984: E4CB     F5         	PUSH	PSW           
0985: E4CC     FE03       	CPI	3              
0986: E4CE     C2DDE4     	JNZ	DRECT63        
0987: E4D1     3E09       	MVI	A,9	;first check for no extension.
0988: E4D3     CD31E4     	CALL	EXTRACT       
0989: E4D6     E67F       	ANI	7FH            
0990: E4D8     FE20       	CPI	BLANK          
0991: E4DA     CAF4E4     	JZ	DIRECT7	;don't print spaces.
0992: E4DD                DRECT63:            
0993: E4DD     3E20       	MVI	A,BLANK	;else print them.
0994: E4DF                DRECT65:            
0995: E4DF     CD92E0     	CALL	PRINTB        
0996: E4E2     04         	INR	B	;bump to next character psoition.
0997: E4E3     78         	MOV	A,B            
0998: E4E4     FE0C       	CPI	12	;end of the name?
0999: E4E6     D2F4E4     	JNC	DIRECT7        
1000: E4E9     FE09       	CPI	9	;nope, starting extension?
1001: E4EB     C2BFE4     	JNZ	DIRECT6        
1002: E4EE     CDA2E0     	CALL	SPACE	;yes, add seperating space.
1003: E4F1     C3BFE4     	JMP	DIRECT6        
1004: E4F4                DIRECT7:            
1005: E4F4     F1         	POP	PSW	;get the next file name.
1006: E4F5                DIRECT8:            
1007: E4F5     CDC2E1     	CALL	CHKCON	;first check console, quit on anything.
1008: E4F8     C201E5     	JNZ	DIRECT9        
1009: E4FB     CDE4E0     	CALL	SRCHNXT	;get next name.
1010: E4FE     C37EE4     	JMP	DIRECT3	;and continue with our list.
1011: E501                DIRECT9:            
1012: E501     D1         	POP	D	;restore the stack and return to command level.
1013: E502     C369E7     	JMP	GETBACK        
1014: E505                ;                   
1015: E505                ;**************************************************************
1016: E505                ;*                  
1017: E505                ;*                E R A S E   C O M M A N D
1018: E505                ;*                  
1019: E505                ;**************************************************************
1020: E505                ;                   
1021: E505                ERASE:              
1022: E505     CD4AE2     	CALL	CONVFST	;convert file name.
1023: E508     FE0B       	CPI	11	;was '*.*' entered?
1024: E50A     C228E5     	JNZ	ERASE1         
1025: E50D     0138E5     	LXI	B,YESNO	;yes, ask for confirmation.
1026: E510     CDA7E0     	CALL	PLINE         
1027: E513     CD39E1     	CALL	GETINP        
1028: E516     2107E0     	LXI	H,INBUFF+1     
1029: E519     35         	DCR	M	;must be exactly 'y'.
1030: E51A     C268E3     	JNZ	CMMND1         
1031: E51D     23         	INX	H              
1032: E51E     7E         	MOV	A,M            
1033: E51F     FE59       	CPI	059H	; 'Y'     
1034: E521     C268E3     	JNZ	CMMND1         
1035: E524     23         	INX	H              
1036: E525     2288E0     	SHLD	INPOINT	;save input line pointer.
1037: E528                ERASE1:             
1038: E528     CD3AE4     	CALL	DSELECT	;select desired disk.
1039: E52B     11B0E7     	LXI	D,FCB          
1040: E52E     CDEFE0     	CALL	DELETE	;delete the file.
1041: E531     3C         	INR	A              
1042: E532     CCD0E3     	CZ	NONE	;not there?
1043: E535     C369E7     	JMP	GETBACK	;return to command level now.
1044: E538                YESNO:              
1045: E538     414C4C2028592F4E293F00 	DB	'All (y/n)?',0  
1046: E543                ;                   
1047: E543                ;**************************************************************
1048: E543                ;*                  
1049: E543                ;*            T Y P E   C O M M A N D
1050: E543                ;*                  
1051: E543                ;**************************************************************
1052: E543                ;                   
1053: E543                TYPE:               
1054: E543     CD4AE2     	CALL	CONVFST	;convert file name.
1055: E546     C2F5E1     	JNZ	SYNERR	;wild cards not allowed.
1056: E549     CD3AE4     	CALL	DSELECT	;select indicated drive.
1057: E54C     CDD0E0     	CALL	OPENFCB	;open the file.
1058: E54F     CA8DE5     	JZ	TYPE5	;not there?
1059: E552     CD98E0     	CALL	CRLF	;ok, start a new line on the screen.
1060: E555     21D4E7     	LXI	H,NBYTES;initialize byte counter.
1061: E558     36FF       	MVI	M,0FFH	;set to read first sector.
1062: E55A                TYPE1:              
1063: E55A     21D4E7     	LXI	H,NBYTES       
1064: E55D                TYPE2:              
1065: E55D     7E         	MOV	A,M	;have we written the entire sector?
1066: E55E     FE80       	CPI	128            
1067: E560     DA6DE5     	JC	TYPE3           
1068: E563     E5         	PUSH	H	;yes, read in the next one.
1069: E564     CDFEE0     	CALL	READFCB       
1070: E567     E1         	POP	H              
1071: E568     C286E5     	JNZ	TYPE4	;end or error?
1072: E56B     AF         	XRA	A	;ok, clear byte counter.
1073: E56C     77         	MOV	M,A            
1074: E56D                TYPE3:              
1075: E56D     34         	INR	M	;count this byte.
1076: E56E     218000     	LXI	H,Pg0Buffer	;and get the (A)th one from the buffer (Pg0Buffer).
1077: E571     CD45E2     	CALL	ADDHL         
1078: E574     7E         	MOV	A,M            
1079: E575     FE1A       	CPI	CNTRLZ	;end of file mark?
1080: E577     CA69E7     	JZ	GETBACK         
1081: E57A     CD8CE0     	CALL	PRINT	;no, print it.
1082: E57D     CDC2E1     	CALL	CHKCON	;check console, quit if anything ready.
1083: E580     C269E7     	JNZ	GETBACK        
1084: E583     C35AE5     	JMP	TYPE1          
1085: E586                ;                   
1086: E586                ;   Get here on an end of file or read error.
1087: E586                ;                   
1088: E586                TYPE4:              
1089: E586     3D         	DCR	A	;read error? 
1090: E587     CA69E7     	JZ	GETBACK         
1091: E58A     CDBFE3     	CALL	RDERROR	;yes, print message.
1092: E58D                TYPE5:              
1093: E58D     CD4CE4     	CALL	RESETDR	;and reset proper drive
1094: E590     C3F5E1     	JMP	SYNERR	;now print file name with problem.
1095: E593                ;                   
1096: E593                ;**************************************************************
1097: E593                ;*                  
1098: E593                ;*            S A V E   C O M M A N D
1099: E593                ;*                  
1100: E593                ;**************************************************************
1101: E593                ;                   
1102: E593                SAVE:               
1103: E593     CDDEE3     	CALL	DECODE		; get numeric number that follows SAVE.
1104: E596     F5         	PUSH	PSW			; save number of pages to write.
1105: E597     CD4AE2     	CALL	CONVFST		; convert file name linepointer past the number.
1106: E59A     C2F5E1     	JNZ		SYNERR		; exit with syntax error -wild cards not allowed.
1107: E59D     CD3AE4     	CALL	DSELECT		; select specified drive.
1108: E5A0     11B0E7     	LXI		D,FCB		; now delete this file.
1109: E5A3     D5         	PUSH	D			; save the fcb
1110: E5A4     CDEFE0     	CALL	DELETE        
1111: E5A7     D1         	POP		D             
1112: E5A8     CD09E1     	CALL	CREATE		;and create it again.
1113: E5AB     CAE1E5     	JZ		SAVE3		;can't create?
1114: E5AE     AF         	XRA		A			;clear record number byte.
1115: E5AF     32D0E7     	STA		FCB+32        
1116: E5B2     F1         	POP		PSW			;convert pages to sectors.
1117: E5B3     6F         	MOV		L,A           
1118: E5B4     2600       	MVI		H,0           
1119: E5B6     29         	DAD		H			;(HL)=number of sectors to write.
1120: E5B7     110001     	LXI		D,TBASE		;and we start from here.
1121: E5BA                SAVE1:              
1122: E5BA     7C         	MOV		A,H			;done yet?
1123: E5BB     B5         	ORA		L             
1124: E5BC     CAD7E5     	JZ		SAVE2          
1125: E5BF     2B         	DCX		H			;nope, count this and compute the start
1126: E5C0     E5         	PUSH	H			;of the next 128 byte sector.
1127: E5C1     218000     	LXI		H,128         
1128: E5C4     19         	DAD		D             
1129: E5C5     E5         	PUSH	H			;save it and set the transfer address.
1130: E5C6     CDD8E1     	CALL	DMASET        
1131: E5C9     11B0E7     	LXI		D,FCB		;write out this sector now.
1132: E5CC     CD04E1     	CALL	WRTREC        
1133: E5CF     D1         	POP		D			;reset (DE) to the start of the last sector.
1134: E5D0     E1         	POP		H			;restore sector count.
1135: E5D1     C2E1E5     	JNZ		SAVE3		;write error?
1136: E5D4     C3BAE5     	JMP		SAVE1         
1137: E5D7                ;                   
1138: E5D7                ;   Get here after writing all of the file.
1139: E5D7                ;                   
1140: E5D7                SAVE2:              
1141: E5D7     11B0E7     	LXI		D,FCB		;now close the file.
1142: E5DA     CDDAE0     	CALL	CLOSE         
1143: E5DD     3C         	INR		A			;did it close ok?
1144: E5DE     C2E7E5     	JNZ		SAVE4         
1145: E5E1                ;                   
1146: E5E1                ;   Print out error message (no space).
1147: E5E1                ;                   
1148: E5E1                SAVE3:              
1149: E5E1     01EDE5     	LXI		B,NOSPACE     
1150: E5E4     CDA7E0     	CALL	PLINE         
1151: E5E7                SAVE4:              
1152: E5E7     CDD5E1     	CALL	STDDMA		;reset the standard dma address.
1153: E5EA     C369E7     	JMP		GETBACK       
1154: E5ED                NOSPACE:            
1155: E5ED     4E4F20535041434500 	DB	'No space',0    
1156: E5F6                ;                   
1157: E5F6                ;**************************************************************
1158: E5F6                ;*                  
1159: E5F6                ;*           R E N A M E   C O M M A N D
1160: E5F6                ;*                  
1161: E5F6                ;**************************************************************
1162: E5F6                ;                   
1163: E5F6                RENAME:             
1164: E5F6     CD4AE2     	CALL	CONVFST	;convert first file name.
1165: E5F9     C2F5E1     	JNZ	SYNERR	;wild cards not allowed.
1166: E5FC     3AD3E7     	LDA	CHGDRV	;remember any change in drives specified.
1167: E5FF     F5         	PUSH	PSW           
1168: E600     CD3AE4     	CALL	DSELECT	;and select this drive.
1169: E603     CDE9E0     	CALL	SRCHFCB	;is this file present?
1170: E606     C25FE6     	JNZ	RENAME6	;yes, print error message.
1171: E609     21B0E7     	LXI	H,FCB	;yes, move this name into second slot.
1172: E60C     11C0E7     	LXI	D,FCB+16       
1173: E60F     0610       	MVI	B,16           
1174: E611     CD28E4     	CALL	HL2DE         
1175: E614     2A88E0     	LHLD	INPOINT	;get input pointer.
1176: E617     EB         	XCHG               
1177: E618     CD3BE2     	CALL	NONBLANK;get next non blank character.
1178: E61B     FE3D       	CPI	EQUALS		; '='	;only allow an '=' or '_' seperator.
1179: E61D     CA25E6     	JZ	RENAME1         
1180: E620     FE5F       	CPI	USCORE		; '_'  
1181: E622     C259E6     	JNZ	RENAME5        
1182: E625                RENAME1:            
1183: E625     EB         	XCHG               
1184: E626     23         	INX	H	;ok, skip seperator.
1185: E627     2288E0     	SHLD	INPOINT	;save input line pointer.
1186: E62A     CD4AE2     	CALL	CONVFST	;convert this second file name now.
1187: E62D     C259E6     	JNZ	RENAME5	;again, no wild cards.
1188: E630     F1         	POP	PSW	;if a drive was specified, then it
1189: E631     47         	MOV	B,A	;must be the same as before.
1190: E632     21D3E7     	LXI	H,CHGDRV       
1191: E635     7E         	MOV	A,M            
1192: E636     B7         	ORA	A              
1193: E637     CA3FE6     	JZ	RENAME2         
1194: E63A     B8         	CMP	B              
1195: E63B     70         	MOV	M,B            
1196: E63C     C259E6     	JNZ	RENAME5	;they were different, error.
1197: E63F                RENAME2:            
1198: E63F     70         	MOV	M,B;	reset as per the first file specification.
1199: E640     AF         	XRA	A              
1200: E641     32B0E7     	STA	FCB	;clear the drive byte of the fcb.
1201: E644                RENAME3:            
1202: E644     CDE9E0     	CALL	SRCHFCB	;and go look for second file.
1203: E647     CA53E6     	JZ	RENAME4	;doesn't exist?
1204: E64A     11B0E7     	LXI	D,FCB          
1205: E64D     CD0EE1     	CALL	RENAM	;ok, rename the file.
1206: E650     C369E7     	JMP	GETBACK        
1207: E653                ;                   
1208: E653                ;   Process rename errors here.
1209: E653                ;                   
1210: E653                RENAME4:            
1211: E653     CDD0E3     	CALL	NONE	;file not there.
1212: E656     C369E7     	JMP	GETBACK        
1213: E659                RENAME5:            
1214: E659     CD4CE4     	CALL	RESETDR	;bad command format.
1215: E65C     C3F5E1     	JMP	SYNERR         
1216: E65F                RENAME6:            
1217: E65F     0168E6     	LXI	B,EXISTS;destination file already exists.
1218: E662     CDA7E0     	CALL	PLINE         
1219: E665     C369E7     	JMP	GETBACK        
1220: E668                EXISTS:             
1221: E668     46494C452045584953545300 	DB	'File exists',0 
1222: E674                ;                   
1223: E674                ;**************************************************************
1224: E674                ;*                  
1225: E674                ;*             U S E R   C O M M A N D
1226: E674                ;*                  
1227: E674                ;**************************************************************
1228: E674                ;                   
1229: E674                USER:               
1230: E674     CDDEE3     	CALL	DECODE	;get numeric value following command.
1231: E677     FE10       	CPI	16	;legal user number?
1232: E679     D2F5E1     	JNC	SYNERR         
1233: E67C     5F         	MOV	E,A	;yes but is there anything else?
1234: E67D     3AB1E7     	LDA	FCB+1          
1235: E680     FE20       	CPI	BLANK          
1236: E682     CAF5E1     	JZ	SYNERR	;yes, that is not allowed.
1237: E685     CD15E1     	CALL	GETSETUC;ok, set user code.
1238: E688     C36CE7     	JMP	GETBACK1       
1239: E68B                ;                   
1240: E68B                ;**************************************************************
1241: E68B                ;*                  
1242: E68B                ;*        T R A N S I A N T   P R O G R A M   C O M M A N D
1243: E68B                ;*                  
1244: E68B                ;**************************************************************
1245: E68B                ;                   
1246: E68B                UNKNOWN:            
1247: E68B                ;e68b	CALL	VERIFY	;check for valid system (why?).
1248: E68B     3AB1E7     	LDA		FCB+1		;anything to execute?
1249: E68E     FE20       	CPI		BLANK		; is it a Space?
1250: E690     C2A7E6     	JNZ		UNKWN1        
1251: E693     3AD3E7     	LDA		CHGDRV		; No, only a drive change?
1252: E696     B7         	ORA		A			; Is itEmpty (00)
1253: E697     CA6CE7     	JZ		GETBACK1	; Yes, get otta here?
1254: E69A     3D         	DCR		A             
1255: E69B     32D2E7     	STA	CDRIVE	;ok, store new drive.
1256: E69E     CD29E1     	CALL	MOVECD	;set (TDRIVE) also.
1257: E6A1     CDBDE0     	CALL	DSKSEL	;and select this drive.
1258: E6A4     C36CE7     	JMP	GETBACK1;then return.
1259: E6A7                ;                   
1260: E6A7                ;   Here a file name was typed. Prepare to execute it.
1261: E6A7                ;                   
1262: E6A7                UNKWN1:             
1263: E6A7     11B9E7     	LXI	D,FCB+9	;an extension specified?
1264: E6AA     1A         	LDAX	D             
1265: E6AB     FE20       	CPI	BLANK          
1266: E6AD     C2F5E1     	JNZ	SYNERR	;yes, not allowed.
1267: E6B0                UNKWN2:             
1268: E6B0     D5         	PUSH	D             
1269: E6B1     CD3AE4     	CALL	DSELECT	;select specified drive.
1270: E6B4     D1         	POP	D              
1271: E6B5     2166E7     	LXI	H,COMFILE	;set the extension to 'COM'.
1272: E6B8     CD26E4     	CALL	MOVE3         
1273: E6BB     CDD0E0     	CALL	OPENFCB	;and open this file.
1274: E6BE     CA4EE7     	JZ	UNKWN9	;not present?
1275: E6C1                ;                   
1276: E6C1                ;   Load in the program.
1277: E6C1                ;                   
1278: E6C1     210001     	LXI	H,TBASE	;store the program starting here.
1279: E6C4                UNKWN3:             
1280: E6C4     E5         	PUSH	H             
1281: E6C5     EB         	XCHG               
1282: E6C6     CDD8E1     	CALL	DMASET	;set transfer address.
1283: E6C9     11B0E7     	LXI	D,FCB	;and read the next record.
1284: E6CC     CDF9E0     	CALL	RDREC         
1285: E6CF     C2E4E6     	JNZ	UNKWN4	;end of file or read error?
1286: E6D2     E1         	POP	H	;nope, bump pointer for next sector.
1287: E6D3     118000     	LXI	D,128          
1288: E6D6     19         	DAD	D              
1289: E6D7     1100E0     	LXI	D,CBASE	;enough room for the whole file?
1290: E6DA     7D         	MOV	A,L            
1291: E6DB     93         	SUB	E              
1292: E6DC     7C         	MOV	A,H            
1293: E6DD     9A         	SBB	D              
1294: E6DE     D254E7     	JNC	UNKWN0	;no, it can't fit.
1295: E6E1     C3C4E6     	JMP	UNKWN3         
1296: E6E4                ;                   
1297: E6E4                ;   Get here after finished reading.
1298: E6E4                ;                   
1299: E6E4                UNKWN4:             
1300: E6E4     E1         	POP	H              
1301: E6E5     3D         	DCR	A	;normal end of file?
1302: E6E6     C254E7     	JNZ	UNKWN0         
1303: E6E9     CD4CE4     	CALL	RESETDR	;yes, reset previous drive.
1304: E6EC     CD4AE2     	CALL	CONVFST	;convert the first file name that follows
1305: E6EF     21D3E7     	LXI	H,CHGDRV;command name.
1306: E6F2     E5         	PUSH	H             
1307: E6F3     7E         	MOV	A,M	;set drive code in default fcb.
1308: E6F4     32B0E7     	STA	FCB            
1309: E6F7     3E10       	MVI	A,16	;put second name 16 bytes later.
1310: E6F9     CD4CE2     	CALL	CONVERT	;convert second file name.
1311: E6FC     E1         	POP	H              
1312: E6FD     7E         	MOV	A,M	;and set the drive for this second file.
1313: E6FE     32C0E7     	STA	FCB+16         
1314: E701     AF         	XRA	A	;clear record byte in fcb.
1315: E702     32D0E7     	STA	FCB+32         
1316: E705     115C00     	LXI	D,TFCB	;move it into place at(005Ch).
1317: E708     21B0E7     	LXI	H,FCB          
1318: E70B     0621       	MVI	B,33           
1319: E70D     CD28E4     	CALL	HL2DE         
1320: E710     2108E0     	LXI	H,INBUFF+2;now move the remainder of the input
1321: E713                UNKWN5:             
1322: E713     7E         	MOV	A,M	;line down to (0080h). Look for a non blank.
1323: E714     B7         	ORA	A	;or a null.  
1324: E715     CA21E7     	JZ	UNKWN6          
1325: E718     FE20       	CPI	BLANK          
1326: E71A     CA21E7     	JZ	UNKWN6          
1327: E71D     23         	INX	H              
1328: E71E     C313E7     	JMP	UNKWN5         
1329: E721                ;                   
1330: E721                ;   Do the line move now. It ends in a null byte.
1331: E721                ;                   
1332: E721                UNKWN6:             
1333: E721     0600       	MVI	B,0	;keep a character count.
1334: E723     118100     	LXI	D,Pg0Buffer+1;data gets put here.
1335: E726                UNKWN7:             
1336: E726     7E         	MOV	A,M	;move it now.
1337: E727     12         	STAX	D             
1338: E728     B7         	ORA	A              
1339: E729     CA32E7     	JZ	UNKWN8          
1340: E72C     04         	INR	B              
1341: E72D     23         	INX	H              
1342: E72E     13         	INX	D              
1343: E72F     C326E7     	JMP	UNKWN7         
1344: E732                UNKWN8:             
1345: E732     78         	MOV	A,B	;now store the character count.
1346: E733     328000     	STA	Pg0Buffer      
1347: E736     CD98E0     	CALL	CRLF	;clean up the screen.
1348: E739     CDD5E1     	CALL	STDDMA	;set standard transfer address.
1349: E73C     CD1AE1     	CALL	SETCDRV	;reset current drive.
1350: E73F     CD0001     	CALL	TBASE	;and execute the program.
1351: E742                ;                   
1352: E742                ;   Transiant programs return here (or reboot).
1353: E742                ;                   
1354: E742     318EE7     	LXI	SP,BATCH	;set stack first off.
1355: E745     CD29E1     	CALL	MOVECD	;move current drive into place (TDRIVE).
1356: E748     CDBDE0     	CALL	DSKSEL	;and reselect it.
1357: E74B     C368E3     	JMP	CMMND1	;back to comand mode.
1358: E74E                ;                   
1359: E74E                ;   Get here if some error occured.
1360: E74E                ;                   
1361: E74E                UNKWN9:             
1362: E74E     CD4CE4     	CALL	RESETDR	;inproper format.
1363: E751     C3F5E1     	JMP	SYNERR         
1364: E754                UNKWN0:             
1365: E754     015DE7     	LXI	B,BADLOAD;read error or won't fit.
1366: E757     CDA7E0     	CALL	PLINE         
1367: E75A     C369E7     	JMP	GETBACK        
1368: E75D                BADLOAD:            
1369: E75D     424144204C4F414400 	DB	'Bad load',0    
1370: E766                COMFILE:            
1371: E766     434F4D     	DB	'COM'	;command file extension.
1372: E769                ;                   
1373: E769                ;   Get here to return to command level. We will reset the
1374: E769                ; previous active drive and then either return to command
1375: E769                ; level directly or print error message and then return.
1376: E769                ;                   
1377: E769                GETBACK:            
1378: E769     CD4CE4     	CALL	RESETDR	;reset previous drive.
1379: E76C                GETBACK1:           
1380: E76C     CD4AE2     	CALL	CONVFST	;convert first name in (FCB).
1381: E76F     3AB1E7     	LDA	FCB+1	;if this was just a drive change request,
1382: E772     D620       	SUI	BLANK	;make sure it was valid.
1383: E774     21D3E7     	LXI	H,CHGDRV       
1384: E777     B6         	ORA	M              
1385: E778     C2F5E1     	JNZ	SYNERR         
1386: E77B     C368E3     	JMP	CMMND1	;ok, return to command level.
1387: E77E                ;                   
1388: E77E                ;   ccp stack area. 
1389: E77E                ;                   
1390: E77E     00000000000000000000000000000000 	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1391: E78E                CCPStack	EQU	$	;end of ccp stack area.
1392: E78E                ;                   
1393: E78E                ;   Batch (or SUBMIT) processing information storage.
1394: E78E                ;                   
1395: E78E                BATCH:              
1396: E78E     00         	DB	0	;batch mode flag (0=not active).
1397: E78F                BATCHFCB:           
1398: E78F     002424242020202020535542000000000000000000000000000000000000000000 DB	0,'$$$     SUB',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1399: E7B0                ;                   
1400: E7B0                ;   File control block setup by the CCP.
1401: E7B0                ;                   
1402: E7B0                FCB:                
1403: E7B0     002020202020202020202020000000000020202020202020202020200000000000 	DB	0,'           ',0,0,0,0,0,'           ',0,0,0,0,0
1404: E7D1                RTNCODE:            
1405: E7D1     00         	DB	0	;status returned from bdos call.
1406: E7D2                CDRIVE:             
1407: E7D2     00         	DB	0	;currently active drive.
1408: E7D3                CHGDRV:             
1409: E7D3     00         	DB	0	;change in drives flag (0=no change).
1410: E7D4                NBYTES:             
1411: E7D4     0000       	DW	0	;byte counter used by TYPE.
1412: E7D6                ;                   
1413: E7D6                ;   Room for expansion?
1414: E7D6                ;                   
1415: E7D6     00000000000000000000000000 	DB	0,0,0,0,0,0,0,0,0,0,0,0,0
1416: E7E3                ;                   
1417: E7E3                ;   Note that the following six bytes must match those at
1418: E7E3                ; (PATTRN1) or cp/m will HALT. Why?
1419: E7E3                ;                   
1420: E7E3                ;PATTRN2:           
1421: E7E3                ;	DB	0,22,0,0,0,0;(* serial number bytes *).
1422: E7E3                ;                   
1423: E7E3                ;**************************************************************
1424: E7E3                ;*                  
1425: E7E3                ;*                    B D O S   E N T R Y
1426: E7E3                ;*                  
1427: E7E3                ;**************************************************************
1428: E7E3                ;                   
1429: E7E3                ;   Entry into bdos.
1430: E7E3                ;			Parameters: (DE) or (E) are the parameters passed. The
1431: E7E3                ;						(C) - function number
1432: E7E3                ;	The user's stack is saved (UserStack) 
1433: E7E3                ;	BDOS uses its own stack  (BDOSstack)
1434: E7E3                ;	The Function number is checked
1435: E7E3                ;	The corect routine is calcualted using the FunctionVector and (C)
1436: E7E3                ;                   
1437: E7E3                	ORG  0E806H					; forces - see start of bios fix later
1438: E806                BDOSEntry:          
1439: E806                ;	JMP	BDOSSetup     
1440: E806                ;BDOSSetup:         
1441: E806     EB         	XCHG						; Swap  (DE) and (HL). **23**
1442: E807     223CE8     	SHLD	ParamsDE			; Save (DE)
1443: E80A     EB         	XCHG						; Restore (DE) and (HL) to original values
1444: E80B     7B         	MOV		A,E	          
1445: E80C     323EE8     	STA		ParamE				; Save register (E) in particular.
1446: E80F     210000     	LXI		H,0           
1447: E812     223FE8     	SHLD	StatusBDOSReturn	;clear return status.
1448: E815     39         	DAD		SP            
1449: E816     2241E8     	SHLD	UserStack			; ave users stack pointer.
1450: E819     3173E8     	LXI		SP,BDOSstack		; nd set our own.
1451: E81C     AF         	XRA		A					; lear A for flags resets
1452: E81D     32DAF5     	STA		AutoSelectFlag		; lear auto select storage Flag
1453: E820     32D8F5     	STA		AutoSelectActive	; lear auto select Active Flag
1454: E823     2173E8     	LXI		H,BDOSExit			; et return address to BDOSExit routine
1455: E826     E5         	PUSH	H					; ut it on the stack
1456: E827     79         	MOV		A,C					; get function number and put into A.
1457: E828     FE29       	CPI		FunctionCount + 1	; valid function number?
1458: E82A     D0         	RNC							; Exit if not valid
1459: E82B     4B         	MOV		C,E					; keep single register function value in C.
1460: E82C     219AE8     	LXI		H,FunctionVector	; now look thru the function table.
1461: E82F     5F         	MOV		E,A           
1462: E830     1600       	MVI		D,0					;(DE)=function number.
1463: E832     19         	DAD		D             
1464: E833     19         	DAD		D					;(HL)=(start of table)+2*(function number).
1465: E834     5E         	MOV		E,M           
1466: E835     23         	INX		H             
1467: E836     56         	MOV		D,M					; now (DE)=address for this function.
1468: E837     2A3CE8     	LHLD	ParamsDE			; retrieve parameters.
1469: E83A     EB         	XCHG						;now (DE) has the original parameters.
1470: E83B     E9         	PCHL						;execute desired function.
1471: E83C                ;----------------------------------
1472: E83C     0000       ParamsDE:			DW	0	;(DE) parameters saved here on entry to BDOS.
1473: E83E     00         ParamE:				DB	0	;storage for register (E) on entry to bdos.
1474: E83F     0000       StatusBDOSReturn:	DW	0	;status returned from bdos function.
1475: E841     0000       UserStack:			DW	0	;save users stack pointer here.
1476: E843                ;                   
1477: E843                ;   Stack area for BDOS calls.
1478: E843                ;                   
1479: E843                					DS	030H        
1480: E873                BDOSstack	EQU	$	;end of stack area.
1481: E873                ;----------------------------------
1482: E873                BDOSExit:           
1483: E873     3AD8F5     	LDA	AutoSelectActive	;was auto select activated?
1484: E876     B7         	ORA	A              
1485: E877     CA90E8     	JZ	BDOSExit1       
1486: E87A     2A3CE8     	LHLD	ParamsDE	;yes, but was a change made?
1487: E87D     3600       	MVI	M,0	;(* reset first byte of fcb *)
1488: E87F     3ADAF5     	LDA	AutoSelectFlag 
1489: E882     B7         	ORA	A              
1490: E883     CA90E8     	JZ	BDOSExit1       
1491: E886     77         	MOV	M,A	;yes, reset first byte properly.
1492: E887     3AD9F5     	LDA	OLDDRV	;and get the old drive and select it.
1493: E88A     323EE8     	STA	ParamE         
1494: E88D     CD65F4     	CALL	SETDSK        
1495: E890                BDOSExit1:          
1496: E890     2A41E8     	LHLD		UserStack			;Get  the users stack pointer.
1497: E893     F9         	SPHL		             
1498: E894     2A3FE8     	LHLD		StatusBDOSReturn	;get return status.
1499: E897     7D         	MOV	A,L							;force version 1.4 compatability.
1500: E898     44         	MOV	B,H            
1501: E899     C9         	RET			;and go back to user.
1502: E89A                                    
1503: E89A                	                   
1504: E89A                	                   
1505: E89A                ;                   
1506: E89A                ;   BDOS function jump table.
1507: E89A                ;                   
1508: E89A                ;NFUNCTS	EQU	41	;number of functions in followin table.
1509: E89A                ;                   
1510: E89A                FunctionVector:     
1511: E89A     03F6       	DW	WBOOT	;0		Overall system and BDOS reset
1512: E89C     23EB       	DW	GETCON	;1		Read a byte from the console keyboard
1513: E89E     EBE9       	DW	OUTCON	;2		Write a byte to the console screen
1514: E8A0     29EB       	DW	GETRDR	;3		Read a byte from the logical reader device
1515: E8A2     12F6       	DW	PUNCH	;4		Write a byte to the logical punch device
1516: E8A4     0FF6       	DW	LIST	;5		Write a byte to the logical list device
1517: E8A6     2FEB       	DW	DIRCIO	;6		Direct console I/O (no CCP-style editing)
1518: E8A8     48EB       	DW	GETIOB	;7		Read the current setting of the IOBYTE
1519: E8AA     4EEB       	DW	SETIOB	;8		Set a new value of the IOBYTE
1520: E8AC     53EB       	DW	PRTSTR	;9		Send a "$"-terminated string to the console
1521: E8AE     3CEA       	DW	RDBUFF	;10		Read a string from the console into a buffer
1522: E8B0     59EB       	DW	GETCSTS	;11		Check if a console key is waiting to be read
1523: E8B2     9EF4       	DW	GETVER	;12		Return the CP/M version number
1524: E8B4                	                   
1525: E8B4     A3F4       	DW	RSTDSK		;13		Reset disk system
1526: E8B6     65F4       	DW	SETDSK		;14		Select specified logical disk drive
1527: E8B8     BCF4       	DW	OPENFIL		;15		Open specified file for reading/writing
1528: E8BA     C5F4       	DW	CLOSEFIL	;16		Close specified file after reading/writing
1529: E8BC     CBF4       	DW	GETFST		;17		Search file directory for first match with filename
1530: E8BE     E8F4       	DW	GETNXT		;18		Search file directory for next match with filename
1531: E8C0     F7F4       	DW	DELFILE		;19		Delete (erase) file
1532: E8C2     00F5       	DW	READSEQ		;20		Read the next "record" sequentially
1533: E8C4     06F5       	DW	WRTSEQ		;21		Write the next "record" sequentially
1534: E8C6     0CF5       	DW	FCREATE		;22		Create a new file with the specified name
1535: E8C8     15F5       	DW	RENFILE		;23		Rename a file to a new name
1536: E8CA     1EF5       	DW	GETLOG		;24		Indicate which logical disks are active
1537: E8CC     24F5       	DW	GETCRNT		;25		Return the current default disk drive number
1538: E8CE     2AF5       	DW	PUTDMA		;26		Set the DMA address (read/write address)
1539: E8D0     31F5       	DW	GETALOC		;27		Return the address of an allocation vector
1540: E8D2     3CED       	DW	WRTPRTD		;28		Return the address of an allocation vector
1541: E8D4     37F5       	DW	GETROV		;29		Indicate which disks are currently Read-Only status
1542: E8D6     3DF5       	DW	SETATTR		;30		Set specified file to System or Read-Only status
1543: E8D8     46F5       	DW	GETPARM		;31		Return address of disk parameter block (DPB)
1544: E8DA     4DF5       	DW	GETUSER		;32		Set/Get the current user number
1545: E8DC     61F5       	DW	RDRANDOM	;33		Set/Get the current user number
1546: E8DE     67F5       	DW	WTRANDOM	;34		Write a "record" randomly
1547: E8E0     6DF5       	DW	FILESIZE	;35		Return logical file size (even for random files)
1548: E8E2     C0F3       	DW	SETRAN		;36		Set record number for the next random read/write
1549: E8E4     73F5       	DW	LOGOFF		;37     
1550: E8E6     5FEB       	DW	Return			;38		Simple Return
1551: E8E8     5FEB       	DW	Return			;39		Simple Return
1552: E8EA     94F5       	DW	WTSPECL		;40		Write a "record" randomly with zero fill
1553: E8EC                	                   
1554: E8EC                FunctionCount	EQU	 ($ -FunctionVector)/2
1555: E8EC                                    
1556: E8EC                ;                   
1557: E8EC                ;   Bdos error table.
1558: E8EC                ;                   
1559: E8EC     F4E8       BADSCTR:	DW	ERROR1	;bad sector on read or write.
1560: E8EE     00E9       BADSLCT:	DW	ERROR2	;bad disk select.
1561: E8F0     06E9       RODISK:		DW	ERROR3	;disk is read only.
1562: E8F2     0CE9       ROFILE:		DW	ERROR4	;file is read only.
1563: E8F4                ;                   
1564: E8F4                ;                   
1565: E8F4                ;   Bdos error message section.
1566: E8F4                ;                   
1567: E8F4                ERROR1:             
1568: E8F4     2125E9     	LXI	H,BADSEC	;bad sector message.
1569: E8F7     CD40E9     	CALL	PRTERR	;print it and get a 1 char responce.
1570: E8FA     FE03       	CPI	CNTRLC	;re-boot request (control-c)?
1571: E8FC     CA0000     	JZ	0	;yes.         
1572: E8FF     C9         	RET		;no, return to retry i/o function.
1573: E900                ;                   
1574: E900                ERROR2:             
1575: E900     2130E9     	LXI	H,BADSEL	;bad drive selected.
1576: E903     C30FE9     	JMP	ERROR5         
1577: E906                ;                   
1578: E906                ERROR3:             
1579: E906     213CE9     	LXI	H,DISKRO	;disk is read only.
1580: E909     C30FE9     	JMP	ERROR5         
1581: E90C                ;                   
1582: E90C                ERROR4:             
1583: E90C     2137E9     	LXI	H,FILERO	;file is read only.
1584: E90F                ;                   
1585: E90F                ERROR5:             
1586: E90F     CD40E9     	CALL	PRTERR        
1587: E912     C30000     	JMP	0	;always reboot on these errors.
1588: E915                ;                   
1589: E915     42444F5320455252204F4E20 BDOSERR:	DB	'Bdos Err On '
1590: E921     203A2024   BDOSDRV:	DB	' : $'  
1591: E925     42414420534543544F5224 BADSEC:		DB	'Bad Sector$'
1592: E930     53454C45435424 BADSEL:		DB	'Select$'
1593: E937     46494C4520 FILERO:		DB	'File ' 
1594: E93C     522F4F24   DISKRO:		DB	'R/O$'  
1595: E940                ;                   
1596: E940                ;   Print bdos error message.
1597: E940                ;                   
1598: E940                PRTERR:             
1599: E940     E5         	PUSH	H	;save second message pointer.
1600: E941     CD24EA     	CALL	OUTCRLF	;send (cr)(lf).
1601: E944     3AA6F5     	LDA	CurrentDrive	;get Current Drive drive.
1602: E947     C641       	ADI	041H	; 'A'	;make ascii.
1603: E949     3221E9     	STA	BDOSDRV	;and put in message.
1604: E94C     0115E9     	LXI	B,BDOSERR;and print it.
1605: E94F     CD2EEA     	CALL	PRTMESG       
1606: E952     C1         	POP	B	;print second message line now.
1607: E953     CD2EEA     	CALL	PRTMESG       
1608: E956                ;                   
1609: E956                ;   Get an input character. We will check our 1 character
1610: E956                ; buffer first. This may be set by the console status routine.
1611: E956                ;                   
1612: E956                GETCHAR:            
1613: E956     2169EB     	LXI	H,CHARBUF;check character buffer.
1614: E959     7E         	MOV	A,M	;anything present already?
1615: E95A     3600       	MVI	M,0	;...either case clear it.
1616: E95C     B7         	ORA	A              
1617: E95D     C0         	RNZ		;yes, use it. 
1618: E95E     C309F6     	JMP	CONIN	;nope, go get a character responce.
1619: E961                ;                   
1620: E961                ;   Input and echo a character.
1621: E961                ;                   
1622: E961                GETECHO:            
1623: E961     CD56E9     	CALL	GETCHAR	;input a character.
1624: E964     CD6FE9     	CALL	CHKCHAR	;carriage control?
1625: E967     D8         	RC		;no, a regular control char so don't echo.
1626: E968     F5         	PUSH	PSW	;ok, save character now.
1627: E969     4F         	MOV	C,A            
1628: E96A     CDEBE9     	CALL	OUTCON	;and echo it.
1629: E96D     F1         	POP	PSW	;get character and return.
1630: E96E     C9         	RET                
1631: E96F                ;                   
1632: E96F                ;   Check character in (A). Set the zero flag on a carriage
1633: E96F                ; control character and the carry flag on any other control
1634: E96F                ; character.        
1635: E96F                ;                   
1636: E96F                CHKCHAR:            
1637: E96F     FE0D       	CPI	CR	;check for carriage return, line feed, backspace,
1638: E971     C8         	RZ		;or a tab.     
1639: E972     FE0A       	CPI	LF             
1640: E974     C8         	RZ                 
1641: E975     FE09       	CPI	TAB            
1642: E977     C8         	RZ                 
1643: E978     FE08       	CPI	BS             
1644: E97A     C8         	RZ                 
1645: E97B     FE20       	CPI	BLANK	;other control char? Set carry flag.
1646: E97D     C9         	RET                
1647: E97E                ;                   
1648: E97E                ;   Check the console during output. Halt on a control-s, then
1649: E97E                ; reboot on a control-c. If anything else is ready, clear the
1650: E97E                ; zero flag and return (the calling routine may want to do
1651: E97E                ; something).       
1652: E97E                ;                   
1653: E97E                CKCONSOL:           
1654: E97E     3A69EB     	LDA	CHARBUF	;check buffer.
1655: E981     B7         	ORA	A	;if anything, just return without checking.
1656: E982     C2A0E9     	JNZ	CKCON2         
1657: E985     CD06F6     	CALL	CONST	;nothing in buffer. Check console.
1658: E988     E601       	ANI	01H	;look at bit 0.
1659: E98A     C8         	RZ		;return if nothing.
1660: E98B     CD09F6     	CALL	CONIN	;ok, get it.
1661: E98E     FE13       	CPI	CNTRLS	;if not control-s, return with zero cleared.
1662: E990     C29DE9     	JNZ	CKCON1         
1663: E993     CD09F6     	CALL	CONIN	;halt processing until another char
1664: E996     FE03       	CPI	CNTRLC	;is typed. Control-c?
1665: E998     CA0000     	JZ	0	;yes, reboot now.
1666: E99B     AF         	XRA	A	;no, just pretend nothing was ever ready.
1667: E99C     C9         	RET                
1668: E99D                CKCON1:             
1669: E99D     3269EB     	STA	CHARBUF	;save character in buffer for later processing.
1670: E9A0                CKCON2:             
1671: E9A0     3E01       	MVI	A,1	;set (A) to non zero to mean something is ready.
1672: E9A2     C9         	RET                
1673: E9A3                ;                   
1674: E9A3                ;   Output (C) to the screen. If the printer flip-flop flag
1675: E9A3                ; is set, we will send character to printer also. The console
1676: E9A3                ; will be checked in the process.
1677: E9A3                ;                   
1678: E9A3                OUTCHAR:            
1679: E9A3     3A65EB     	LDA	OUTFLAG	;check output flag.
1680: E9A6     B7         	ORA	A	;anything and we won't generate output.
1681: E9A7     C2BDE9     	JNZ	OUTCHR1        
1682: E9AA     C5         	PUSH	B             
1683: E9AB     CD7EE9     	CALL	CKCONSOL;check console (we don't care whats there).
1684: E9AE     C1         	POP	B              
1685: E9AF     C5         	PUSH	B             
1686: E9B0     CD0CF6     	CALL	CONOUT	;output (C) to the screen.
1687: E9B3     C1         	POP	B              
1688: E9B4     C5         	PUSH	B             
1689: E9B5     3A68EB     	LDA	PRTFLAG	;check printer flip-flop flag.
1690: E9B8     B7         	ORA	A              
1691: E9B9     C40FF6     	CNZ	LIST	;print it also if non-zero.
1692: E9BC     C1         	POP	B              
1693: E9BD                OUTCHR1:            
1694: E9BD     79         	MOV	A,C	;update cursors position.
1695: E9BE     2167EB     	LXI	H,CURPOS       
1696: E9C1     FE7F       	CPI	DEL	;rubouts don't do anything here.
1697: E9C3     C8         	RZ                 
1698: E9C4     34         	INR	M	;bump line pointer.
1699: E9C5     FE20       	CPI	BLANK	;and return if a normal character.
1700: E9C7     D0         	RNC                
1701: E9C8     35         	DCR	M	;restore and check for the start of the line.
1702: E9C9     7E         	MOV	A,M            
1703: E9CA     B7         	ORA	A              
1704: E9CB     C8         	RZ		;ingnore control characters at the start of the line.
1705: E9CC     79         	MOV	A,C            
1706: E9CD     FE08       	CPI	BS	;is it a backspace?
1707: E9CF     C2D4E9     	JNZ	OUTCHR2        
1708: E9D2     35         	DCR	M	;yes, backup pointer.
1709: E9D3     C9         	RET                
1710: E9D4                OUTCHR2:            
1711: E9D4     FE0A       	CPI	LF	;is it a line feed?
1712: E9D6     C0         	RNZ		;ignore anything else.
1713: E9D7     3600       	MVI	M,0	;reset pointer to start of line.
1714: E9D9     C9         	RET                
1715: E9DA                ;                   
1716: E9DA                ;   Output (A) to the screen. If it is a control character
1717: E9DA                ; (other than carriage control), use ^x format.
1718: E9DA                ;                   
1719: E9DA                SHOWIT:             
1720: E9DA     79         	MOV	A,C            
1721: E9DB     CD6FE9     	CALL	CHKCHAR	;check character.
1722: E9DE     D2EBE9     	JNC	OUTCON	;not a control, use normal output.
1723: E9E1     F5         	PUSH	PSW           
1724: E9E2     0E5E       	MVI	C, CARET	; '^'	;for a control character, preceed it with '^'.
1725: E9E4     CDA3E9     	CALL	OUTCHAR       
1726: E9E7     F1         	POP	PSW            
1727: E9E8     F640       	ORI	ATSIGN		; '@'	;and then use the letter equivelant.
1728: E9EA     4F         	MOV	C,A            
1729: E9EB                ;                   
1730: E9EB                ;   Function to output (C) to the console device and expand tabs
1731: E9EB                ; if necessary.     
1732: E9EB                ;                   
1733: E9EB                OUTCON:             
1734: E9EB     79         	MOV	A,C            
1735: E9EC     FE09       	CPI	TAB	;is it a tab?
1736: E9EE     C2A3E9     	JNZ	OUTCHAR	;use regular output.
1737: E9F1                OUTCON1:            
1738: E9F1     0E20       	MVI	C,BLANK	;yes it is, use spaces instead.
1739: E9F3     CDA3E9     	CALL	OUTCHAR       
1740: E9F6     3A67EB     	LDA	CURPOS	;go until the cursor is at a multiple of 8
1741: E9F9                                    
1742: E9F9     E607       	ANI	07H	;position. 
1743: E9FB     C2F1E9     	JNZ	OUTCON1        
1744: E9FE     C9         	RET                
1745: E9FF                ;                   
1746: E9FF                ;   Echo a backspace character. Erase the prevoius character
1747: E9FF                ; on the screen.    
1748: E9FF                ;                   
1749: E9FF                BACKUP:             
1750: E9FF     CD07EA     	CALL	BACKUP1	;backup the screen 1 place.
1751: EA02     0E20       	MVI	C,BLANK	;then blank that character.
1752: EA04     CD0CF6     	CALL	CONOUT        
1753: EA07                BACKUP1:            
1754: EA07     0E08       	MVI	C,BS	;then back space once more.
1755: EA09     C30CF6     	JMP	CONOUT         
1756: EA0C                ;                   
1757: EA0C                ;   Signal a deleted line. Print a '#' at the end and start
1758: EA0C                ; over.             
1759: EA0C                ;                   
1760: EA0C                NEWLINE:            
1761: EA0C     0E23       	MVI	C, POUNDSN		; '#'
1762: EA0E     CDA3E9     	CALL	OUTCHAR	;print this.
1763: EA11     CD24EA     	CALL	OUTCRLF	;start new line.
1764: EA14                NEWLN1:             
1765: EA14     3A67EB     	LDA	CURPOS	;move the cursor to the starting position.
1766: EA17     2166EB     	LXI	H,STARTING     
1767: EA1A     BE         	CMP	M              
1768: EA1B     D0         	RNC		;there yet?   
1769: EA1C     0E20       	MVI	C,BLANK        
1770: EA1E     CDA3E9     	CALL	OUTCHAR	;nope, keep going.
1771: EA21     C314EA     	JMP	NEWLN1         
1772: EA24                ;                   
1773: EA24                ;   Output a (cr) (lf) to the console device (screen).
1774: EA24                ;                   
1775: EA24                OUTCRLF:            
1776: EA24     0E0D       	MVI	C,CR           
1777: EA26     CDA3E9     	CALL	OUTCHAR       
1778: EA29     0E0A       	MVI	C,LF           
1779: EA2B     C3A3E9     	JMP	OUTCHAR        
1780: EA2E                ;                   
1781: EA2E                ;   Print message pointed to by (BC). It will end with a '$'.
1782: EA2E                ;                   
1783: EA2E                PRTMESG:            
1784: EA2E     0A         	LDAX	B	;check for terminating character.
1785: EA2F     FE24       	CPI	DOLLAR		; '$'  
1786: EA31     C8         	RZ                 
1787: EA32     03         	INX	B              
1788: EA33     C5         	PUSH	B	;otherwise, bump pointer and print it.
1789: EA34     4F         	MOV	C,A            
1790: EA35     CDEBE9     	CALL	OUTCON        
1791: EA38     C1         	POP	B              
1792: EA39     C32EEA     	JMP	PRTMESG        
1793: EA3C                ;                   
1794: EA3C                ;   Function to execute a buffered read.
1795: EA3C                ;                   
1796: EA3C                RDBUFF:             
1797: EA3C     3A67EB     	LDA	CURPOS	;use present location as starting one.
1798: EA3F     3266EB     	STA	STARTING       
1799: EA42     2A3CE8     	LHLD	ParamsDE	;get the maximum buffer space.
1800: EA45     4E         	MOV	C,M            
1801: EA46     23         	INX	H	;point to first available space.
1802: EA47     E5         	PUSH	H	;and save.  
1803: EA48     0600       	MVI	B,0	;keep a character count.
1804: EA4A                RDBUF1:             
1805: EA4A     C5         	PUSH	B             
1806: EA4B     E5         	PUSH	H             
1807: EA4C                RDBUF2:             
1808: EA4C     CD56E9     	CALL	GETCHAR	;get the next input character.
1809: EA4F     E67F       	ANI	7FH	;strip bit 7.
1810: EA51     E1         	POP	H	;reset registers.
1811: EA52     C1         	POP	B              
1812: EA53     FE0D       	CPI	CR	;en of the line?
1813: EA55     CA1CEB     	JZ	RDBUF17         
1814: EA58     FE0A       	CPI	LF             
1815: EA5A     CA1CEB     	JZ	RDBUF17         
1816: EA5D     FE08       	CPI	BS	;how about a backspace?
1817: EA5F     C271EA     	JNZ	RDBUF3         
1818: EA62     78         	MOV	A,B	;yes, but ignore at the beginning of the line.
1819: EA63     B7         	ORA	A              
1820: EA64     CA4AEA     	JZ	RDBUF1          
1821: EA67     05         	DCR	B	;ok, update counter.
1822: EA68     3A67EB     	LDA	CURPOS	;if we backspace to the start of the line,
1823: EA6B     3265EB     	STA	OUTFLAG	;treat as a cancel (control-x).
1824: EA6E     C3CBEA     	JMP	RDBUF10        
1825: EA71                RDBUF3:             
1826: EA71     FE7F       	CPI	DEL	;user typed a rubout?
1827: EA73     C281EA     	JNZ	RDBUF4         
1828: EA76     78         	MOV	A,B	;ignore at the start of the line.
1829: EA77     B7         	ORA	A              
1830: EA78     CA4AEA     	JZ	RDBUF1          
1831: EA7B     7E         	MOV	A,M	;ok, echo the prevoius character.
1832: EA7C     05         	DCR	B	;and reset pointers (counters).
1833: EA7D     2B         	DCX	H              
1834: EA7E     C304EB     	JMP	RDBUF15        
1835: EA81                RDBUF4:             
1836: EA81     FE05       	CPI	CNTRLE	;physical end of line?
1837: EA83     C292EA     	JNZ	RDBUF5         
1838: EA86     C5         	PUSH	B	;yes, do it.
1839: EA87     E5         	PUSH	H             
1840: EA88     CD24EA     	CALL	OUTCRLF       
1841: EA8B     AF         	XRA	A	;and update starting position.
1842: EA8C     3266EB     	STA	STARTING       
1843: EA8F     C34CEA     	JMP	RDBUF2         
1844: EA92                RDBUF5:             
1845: EA92     FE10       	CPI	CNTRLP	;control-p?
1846: EA94     C2A3EA     	JNZ	RDBUF6         
1847: EA97     E5         	PUSH	H	;yes, flip the print flag filp-flop byte.
1848: EA98     2168EB     	LXI	H,PRTFLAG      
1849: EA9B     3E01       	MVI	A,1	;PRTFLAG=1-PRTFLAG
1850: EA9D     96         	SUB	M              
1851: EA9E     77         	MOV	M,A            
1852: EA9F     E1         	POP	H              
1853: EAA0     C34AEA     	JMP	RDBUF1         
1854: EAA3                RDBUF6:             
1855: EAA3     FE18       	CPI	CNTRLX	;control-x (cancel)?
1856: EAA5     C2BAEA     	JNZ	RDBUF8         
1857: EAA8     E1         	POP	H              
1858: EAA9                RDBUF7:             
1859: EAA9     3A66EB     	LDA	STARTING;yes, backup the cursor to here.
1860: EAAC     2167EB     	LXI	H,CURPOS       
1861: EAAF     BE         	CMP	M              
1862: EAB0     D23CEA     	JNC	RDBUFF	;done yet?
1863: EAB3     35         	DCR	M	;no, decrement pointer and output back up one space.
1864: EAB4     CDFFE9     	CALL	BACKUP        
1865: EAB7     C3A9EA     	JMP	RDBUF7         
1866: EABA                RDBUF8:             
1867: EABA     FE15       	CPI	CNTRLU	;cntrol-u (cancel line)?
1868: EABC     C2C6EA     	JNZ	RDBUF9         
1869: EABF     CD0CEA     	CALL	NEWLINE	;start a new line.
1870: EAC2     E1         	POP	H              
1871: EAC3     C33CEA     	JMP	RDBUFF         
1872: EAC6                RDBUF9:             
1873: EAC6     FE12       	CPI	CNTRLR	;control-r?
1874: EAC8     C201EB     	JNZ	RDBUF14        
1875: EACB                RDBUF10:            
1876: EACB     C5         	PUSH	B	;yes, start a new line and retype the old one.
1877: EACC     CD0CEA     	CALL	NEWLINE       
1878: EACF     C1         	POP	B              
1879: EAD0     E1         	POP	H              
1880: EAD1     E5         	PUSH	H             
1881: EAD2     C5         	PUSH	B             
1882: EAD3                RDBUF11:            
1883: EAD3     78         	MOV	A,B	;done whole line yet?
1884: EAD4     B7         	ORA	A              
1885: EAD5     CAE5EA     	JZ	RDBUF12         
1886: EAD8     23         	INX	H	;nope, get next character.
1887: EAD9     4E         	MOV	C,M            
1888: EADA     05         	DCR	B	;count it.   
1889: EADB     C5         	PUSH	B             
1890: EADC     E5         	PUSH	H             
1891: EADD     CDDAE9     	CALL	SHOWIT	;and display it.
1892: EAE0     E1         	POP	H              
1893: EAE1     C1         	POP	B              
1894: EAE2     C3D3EA     	JMP	RDBUF11        
1895: EAE5                RDBUF12:            
1896: EAE5     E5         	PUSH	H	;done with line. If we were displaying
1897: EAE6     3A65EB     	LDA	OUTFLAG	;then update cursor position.
1898: EAE9     B7         	ORA	A              
1899: EAEA     CA4CEA     	JZ	RDBUF2          
1900: EAED     2167EB     	LXI	H,CURPOS;because this line is shorter, we must
1901: EAF0     96         	SUB	M	;back up the cursor (not the screen however)
1902: EAF1     3265EB     	STA	OUTFLAG	;some number of positions.
1903: EAF4                RDBUF13:            
1904: EAF4     CDFFE9     	CALL	BACKUP	;note that as long as (OUTFLAG) is non
1905: EAF7     2165EB     	LXI	H,OUTFLAG;zero, the screen will not be changed.
1906: EAFA     35         	DCR	M              
1907: EAFB     C2F4EA     	JNZ	RDBUF13        
1908: EAFE     C34CEA     	JMP	RDBUF2	;now just get the next character.
1909: EB01                ;                   
1910: EB01                ;   Just a normal character, put this in our buffer and echo.
1911: EB01                ;                   
1912: EB01                RDBUF14:            
1913: EB01     23         	INX	H              
1914: EB02     77         	MOV	M,A	;store character.
1915: EB03     04         	INR	B	;and count it.
1916: EB04                RDBUF15:            
1917: EB04     C5         	PUSH	B             
1918: EB05     E5         	PUSH	H             
1919: EB06     4F         	MOV	C,A	;echo it now.
1920: EB07     CDDAE9     	CALL	SHOWIT        
1921: EB0A     E1         	POP	H              
1922: EB0B     C1         	POP	B              
1923: EB0C     7E         	MOV	A,M	;was it an abort request?
1924: EB0D     FE03       	CPI	CNTRLC	;control-c abort?
1925: EB0F     78         	MOV	A,B            
1926: EB10     C218EB     	JNZ	RDBUF16        
1927: EB13     FE01       	CPI	1	;only if at start of line.
1928: EB15     CA0000     	JZ	0               
1929: EB18                RDBUF16:            
1930: EB18     B9         	CMP	C	;nope, have we filled the buffer?
1931: EB19     DA4AEA     	JC	RDBUF1          
1932: EB1C                RDBUF17:            
1933: EB1C     E1         	POP	H	;yes end the line and return.
1934: EB1D     70         	MOV	M,B            
1935: EB1E     0E0D       	MVI	C,CR           
1936: EB20     C3A3E9     	JMP	OUTCHAR	;output (cr) and return.
1937: EB23                ;                   
1938: EB23                ;   Function to get a character from the console device.
1939: EB23                ;                   
1940: EB23                GETCON:             
1941: EB23     CD61E9     	CALL	GETECHO	;get and echo.
1942: EB26     C35CEB     	JMP	SETSTAT	;save status and return.
1943: EB29                ;                   
1944: EB29                ;   Function to get a character from the tape reader device.
1945: EB29                ;                   
1946: EB29                GETRDR:             
1947: EB29     CD15F6     	CALL	READER	;get a character from reader, set status and return.
1948: EB2C     C35CEB     	JMP	SETSTAT        
1949: EB2F                ;                   
1950: EB2F                ;  Function to perform direct console i/o. If (C) contains (FF)
1951: EB2F                ; then this is an input request. If (C) contains (FE) then
1952: EB2F                ; this is a status request. Otherwise we are to output (C).
1953: EB2F                ;                   
1954: EB2F                DIRCIO:             
1955: EB2F     79         	MOV	A,C	;test for (FF).
1956: EB30     3C         	INR	A              
1957: EB31     CA3BEB     	JZ	DIRC1           
1958: EB34     3C         	INR	A	;test for (FE).
1959: EB35     CA06F6     	JZ	CONST           
1960: EB38     C30CF6     	JMP	CONOUT	;just output (C).
1961: EB3B                DIRC1:              
1962: EB3B     CD06F6     	CALL	CONST	;this is an input request.
1963: EB3E     B7         	ORA	A              
1964: EB3F     CA90E8     	JZ	BDOSExit1	;not ready? Just return (directly).
1965: EB42     CD09F6     	CALL	CONIN	;yes, get character.
1966: EB45     C35CEB     	JMP	SETSTAT	;set status and return.
1967: EB48                ;                   
1968: EB48                ;   Function to return the i/o byte.
1969: EB48                ;                   
1970: EB48                GETIOB:             
1971: EB48     3A0300     	LDA	IOBYTE         
1972: EB4B     C35CEB     	JMP	SETSTAT        
1973: EB4E                ;                   
1974: EB4E                ;   Function to set the i/o byte.
1975: EB4E                ;                   
1976: EB4E                SETIOB:             
1977: EB4E     210300     	LXI	H,IOBYTE       
1978: EB51     71         	MOV	M,C            
1979: EB52     C9         	RET                
1980: EB53                ;                   
1981: EB53                ;   Function to print the character string pointed to by (DE)
1982: EB53                ; on the console device. The string ends with a '$'.
1983: EB53                ;                   
1984: EB53                PRTSTR:             
1985: EB53     EB         	XCHG               
1986: EB54     4D         	MOV	C,L            
1987: EB55     44         	MOV	B,H	;now (BC) points to it.
1988: EB56     C32EEA     	JMP	PRTMESG        
1989: EB59                ;                   
1990: EB59                ;   Function to interigate the console device.
1991: EB59                ;                   
1992: EB59                GETCSTS:            
1993: EB59     CD7EE9     	CALL	CKCONSOL      
1994: EB5C                ;                   
1995: EB5C                ;   Get here to set the status and return to the cleanup
1996: EB5C                ; section. Then back to the user.
1997: EB5C                ;                   
1998: EB5C                SETSTAT:            
1999: EB5C     323FE8     	STA	StatusBDOSReturn
2000: EB5F                Return:             
2001: EB5F     C9         	RET                
2002: EB60                ;                   
2003: EB60                ;   Set the status to 1 (read or write error code).
2004: EB60                ;                   
2005: EB60                IOERR1:             
2006: EB60     3E01       	MVI	A,1            
2007: EB62     C35CEB     	JMP	SETSTAT        
2008: EB65                ;                   
2009: EB65     00         OUTFLAG:	DB	0	;output flag (non zero means no output).
2010: EB66     02         STARTING:	DB	2	;starting position for cursor.
2011: EB67     00         CURPOS:		DB	0	;cursor position (0=start of line).
2012: EB68     00         PRTFLAG:	DB	0	;printer flag (control-p toggle). List if non zero.
2013: EB69     00         CHARBUF:	DB	0	;single input character buffer.
2014: EB6A                ;                   
2015: EB6A                ;   Stack area for BDOS calls.
2016: EB6A                ;                   
2017: EB6A                                    
2018: EB6A                ;                   
2019: EB6A                ;	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
2020: EB6A                ;	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
2021: EB6A                ;BDOSstack	EQU	$	;end of stack area.
2022: EB6A                ;                   
2023: EB6A                ;                   
2024: EB6A                ;   Select error occured, jump to error routine.
2025: EB6A                ;                   
2026: EB6A                SLCTERR:            
2027: EB6A     21EEE8     	LXI	H,BADSLCT      
2028: EB6D                ;                   
2029: EB6D                ;   Jump to (HL) indirectly.
2030: EB6D                ;                   
2031: EB6D                JUMPHL:             
2032: EB6D     5E         	MOV	E,M            
2033: EB6E     23         	INX	H              
2034: EB6F     56         	MOV	D,M	;now (DE) contain the desired address.
2035: EB70     EB         	XCHG               
2036: EB71     E9         	PCHL               
2037: EB72                ;                   
2038: EB72                ;   Block move. (DE) to (HL), (C) bytes total.
2039: EB72                ;                   
2040: EB72                DE2HL:              
2041: EB72     0C         	INR	C	;is count down to zero?
2042: EB73                DE2HL1:             
2043: EB73     0D         	DCR	C              
2044: EB74     C8         	RZ		;yes, we are done.
2045: EB75     1A         	LDAX	D	;no, move one more byte.
2046: EB76     77         	MOV	M,A            
2047: EB77     13         	INX	D              
2048: EB78     23         	INX	H              
2049: EB79     C373EB     	JMP	DE2HL1	;and repeat.
2050: EB7C                ;                   
2051: EB7C                ;   Select the desired drive.
2052: EB7C                ;                   
2053: EB7C                SelectDisk:         
2054: EB7C     3AA6F5     	LDA		CurrentDrive		; get active disk.
2055: EB7F     4F         	MOV		C,A					; set up for Bios call, put disk in (C)
2056: EB80     CD1BF6     	CALL	SELDSK				; BIOS CALL )select it.
2057: EB83     7C         	MOV		A,H					; HL = 0000 if invalid
2058: EB84     B5         	ORA		L					; otherwise it points to the correct Disk Parameter Block
2059: EB85     C8         	RZ							; so, return if HL = 0000
2060: EB86                ;                   
2061: EB86                ;   Here, the BIOS returned the address of the parameter block
2062: EB86                ; in (HL). We will extract the necessary pointers and save them.
2063: EB86                ;                   
2064: EB86     5E         	MOV		E,M					; first word of DPB points to the drive's skew table
2065: EB87     23         	INX		H             
2066: EB88     56         	MOV		D,M						; Get it and put it into (DE)
2067: EB89     23         	INX		H					        
2068: EB8A     22AEF5     	SHLD	FilePosInDir		;save pointers to scratch areas.
2069: EB8D     23         	INX		H             
2070: EB8E     23         	INX		H             
2071: EB8F     22B0F5     	SHLD	LastTrackNumber		;ditto.
2072: EB92     23         	INX		H             
2073: EB93     23         	INX		H             
2074: EB94     22B2F5     	SHLD	LastSectorNumber	;ditto.
2075: EB97     23         	INX		H             
2076: EB98     23         	INX		H             
2077: EB99     EB         	XCHG						; been holding the translation table address in DE, now in HL
2078: EB9A                								; Moved Directory buffer pointer into DE (from HL
2079: EB9A     22CBF5     	SHLD	XLATE				     
2080: EB9D     21B4F5     	LXI		H,DIRBUF			; get address of the directory buffer vector
2081: EBA0     0E08       	MVI		C,8					;they consist of the directory buffer
2082: EBA2     CD72EB     	CALL	DE2HL				;pointer, parameter block pointer,
2083: EBA5     2AB6F5     	LHLD	DISKPB	;check and allocation vectors. (* DISK PARAMTER BLOCK POINTER)
2084: EBA8     EB         	XCHG					; put into DE
2085: EBA9     21BCF5     	LXI	H,SECTORS	;get Sectors per Block
2086: EBAC     0E0F       	MVI	C,15	;it is 15 bytes long. 
2087: EBAE     CD72EB     	CALL	DE2HL	;( move disk parameter block from BIOS to BDOS for current disk)
2088: EBB1     2AC1F5     	LHLD	DSKSIZE	;check disk size.
2089: EBB4     7C         	MOV	A,H	;more than 256 blocks on this?
2090: EBB5     21D7F5     	LXI	H,BIGDISK		;(should be called SmallDisk [ if BIGDISK =0 then > 256 block long])
2091: EBB8     36FF       	MVI	M,0FFH	;set to samll.
2092: EBBA     B7         	ORA	A              
2093: EBBB     CAC0EB     	JZ	SelectDisk1     
2094: EBBE     3600       	MVI	M,0	;wrong, set to large.
2095: EBC0                SelectDisk1:        
2096: EBC0     3EFF       	MVI	A,0FFH	;clear the zero flag.
2097: EBC2     B7         	ORA	A              
2098: EBC3     C9         	RET                
2099: EBC4                ;                   
2100: EBC4                ;   Routine to home the disk track head and clear pointers.
2101: EBC4                ;                   
2102: EBC4                HOMEDRV:            
2103: EBC4     CD18F6     	CALL	HOME	;home the head.
2104: EBC7     AF         	XRA	A              
2105: EBC8     2AB0F5     	LHLD	LastTrackNumber;set our track pointer also.
2106: EBCB     77         	MOV	M,A            
2107: EBCC     23         	INX	H              
2108: EBCD     77         	MOV	M,A            
2109: EBCE     2AB2F5     	LHLD	LastSectorNumber;and our sector pointer.
2110: EBD1     77         	MOV	M,A            
2111: EBD2     23         	INX	H              
2112: EBD3     77         	MOV	M,A            
2113: EBD4     C9         	RET                
2114: EBD5                ;                   
2115: EBD5                ;   Do the actual disk read and check the error return status.
2116: EBD5                ;                   
2117: EBD5                DOREAD:             
2118: EBD5     CD27F6     	CALL	READ          
2119: EBD8     C3DEEB     	JMP	IORET          
2120: EBDB                ;                   
2121: EBDB                ;   Do the actual disk write and handle any bios error.
2122: EBDB                ;                   
2123: EBDB                DOWRITE:            
2124: EBDB     CD2AF6     	CALL	WRITE         
2125: EBDE                IORET:              
2126: EBDE     B7         	ORA	A              
2127: EBDF     C8         	RZ		;return unless an error occured.
2128: EBE0     21ECE8     	LXI	H,BADSCTR;bad read/write on this sector.
2129: EBE3     C36DEB     	JMP	JUMPHL         
2130: EBE6                ;                   
2131: EBE6                ;   Routine to select the track and sector that the desired
2132: EBE6                ; block number falls in.
2133: EBE6                ;                   
2134: EBE6                TRKSEC:             
2135: EBE6     2AE4F5     	LHLD	FILEPOS			; get position of last accessed file
2136: EBE9     0E02       	MVI		C,2				; in directory and compute sector #.
2137: EBEB     CD0DED     	CALL	SHIFTR			; sector #=file-position/4.
2138: EBEE     22DFF5     	SHLD	BLKNMBR			; save this as the block number of interest.
2139: EBF1     22E6F5     	SHLD	CKSUMTBL		; what's it doing here too?
2140: EBF4                ;                   
2141: EBF4                ;   if the sector number has already been set (BLKNMBR), enter
2142: EBF4                ; at this point.    
2143: EBF4                ;                   
2144: EBF4                TRKSEC1:            
2145: EBF4                		;move Desired sector number into (BC).
2146: EBF4     21DFF5     	LXI		H,BLKNMBR     
2147: EBF7     4E         	MOV		C,M				       
2148: EBF8     23         	INX		H             
2149: EBF9     46         	MOV		B,M           
2150: EBFA                		;move Last sector number into (DE).
2151: EBFA     2AB2F5     	LHLD	LastSectorNumber
2152: EBFD     5E         	MOV		E,M	          
2153: EBFE     23         	INX		H             
2154: EBFF     56         	MOV		D,M           
2155: EC00                		;move current track number into (HL).
2156: EC00     2AB0F5     	LHLD	LastTrackNumber
2157: EC03     7E         	MOV		A,M           
2158: EC04     23         	INX		H             
2159: EC05     66         	MOV		H,M           
2160: EC06     6F         	MOV		L,A           
2161: EC07                	                   
2162: EC07                TRKSEC2:            
2163: EC07     79         	MOV		A,C			;is desired sector before current one?
2164: EC08     93         	SUB		E             
2165: EC09     78         	MOV		A,B           
2166: EC0A     9A         	SBB		D             
2167: EC0B     D21DEC     	JNC		TRKSEC3       
2168: EC0E     E5         	PUSH	H			;yes, decrement sectors by one track.
2169: EC0F     2ABCF5     	LHLD	SECTORS		;get sectors per track.
2170: EC12     7B         	MOV		A,E           
2171: EC13     95         	SUB		L             
2172: EC14     5F         	MOV		E,A           
2173: EC15     7A         	MOV		A,D           
2174: EC16     9C         	SBB		H             
2175: EC17     57         	MOV		D,A			;now we have backed up one full track.
2176: EC18     E1         	POP		H             
2177: EC19     2B         	DCX		H			;adjust track counter.
2178: EC1A     C307EC     	JMP		TRKSEC2       
2179: EC1D                TRKSEC3:            
2180: EC1D     E5         	PUSH	H			;desired sector is after current one.
2181: EC1E     2ABCF5     	LHLD	SECTORS		;get sectors per track.
2182: EC21     19         	DAD	D				;bump sector pointer to next track.
2183: EC22     DA32EC     	JC		TRKSEC4        
2184: EC25     79         	MOV		A,C			;is desired sector now before current one?
2185: EC26     95         	SUB		L             
2186: EC27     78         	MOV		A,B           
2187: EC28     9C         	SBB		H             
2188: EC29     DA32EC     	JC		TRKSEC4        
2189: EC2C     EB         	XCHG				;not yes, increment track counter
2190: EC2D     E1         	POP		H			;and continue until it is.
2191: EC2E     23         	INX		H             
2192: EC2F     C31DEC     	JMP		TRKSEC3       
2193: EC32                ;                   
2194: EC32                ;   here we have determined the track number that contains the
2195: EC32                ; desired sector.   
2196: EC32                ;                   
2197: EC32                TRKSEC4:            
2198: EC32     E1         	POP		H			;get track number (HL).
2199: EC33     C5         	PUSH	B             
2200: EC34     D5         	PUSH	D             
2201: EC35     E5         	PUSH	H             
2202: EC36     EB         	XCHG               
2203: EC37     2AC9F5     	LHLD	OFFSET		;adjust for first track offset.
2204: EC3A     19         	DAD		D             
2205: EC3B     44         	MOV		B,H           
2206: EC3C     4D         	MOV		C,L           
2207: EC3D     CD1EF6     	CALL	SETTRK		;select this track.
2208: EC40     D1         	POP		D			;reset current track pointer.
2209: EC41     2AB0F5     	LHLD	LastTrackNumber
2210: EC44     73         	MOV		M,E           
2211: EC45     23         	INX		H             
2212: EC46     72         	MOV		M,D           
2213: EC47     D1         	POP		D             
2214: EC48     2AB2F5     	LHLD	LastSectorNumber	;reset the first sector on this track.
2215: EC4B     73         	MOV		M,E           
2216: EC4C     23         	INX		H             
2217: EC4D     72         	MOV		M,D           
2218: EC4E     C1         	POP		B             
2219: EC4F     79         	MOV		A,C			;now subtract the desired one.
2220: EC50     93         	SUB		E			;to make it relative (1-# sectors/track).
2221: EC51     4F         	MOV		C,A           
2222: EC52     78         	MOV		A,B           
2223: EC53     9A         	SBB		D             
2224: EC54     47         	MOV		B,A           
2225: EC55     2ACBF5     	LHLD	XLATE		;translate this sector according to this table.
2226: EC58     EB         	XCHG               
2227: EC59     CD30F6     	CALL	SECTRN		;let the bios translate it.
2228: EC5C     4D         	MOV		C,L           
2229: EC5D     44         	MOV		B,H           
2230: EC5E     C321F6     	JMP		SETSEC		;and select it.
2231: EC61                ;                   
2232: EC61                ;   Compute block number from record number (SAVNREC) and
2233: EC61                ; extent number (SAVEXT).
2234: EC61                ;                   
2235: EC61                GETBLOCK:           
2236: EC61     21BEF5     	LXI	H,BLKSHFT;get logical to physical conversion.
2237: EC64     4E         	MOV	C,M	;note that this is base 2 log of ratio.
2238: EC65     3ADDF5     	LDA	SAVNREC	;get record number.
2239: EC68                GETBLK1:            
2240: EC68     B7         	ORA	A	;compute (A)=(A)/2^BLKSHFT.
2241: EC69     1F         	RAR                
2242: EC6A     0D         	DCR	C              
2243: EC6B     C268EC     	JNZ	GETBLK1        
2244: EC6E     47         	MOV	B,A	;save result in (B).
2245: EC6F     3E08       	MVI	A,8            
2246: EC71     96         	SUB	M              
2247: EC72     4F         	MOV	C,A	;compute (C)=8-BLKSHFT.
2248: EC73     3ADCF5     	LDA	SAVEXT         
2249: EC76                GETBLK2:            
2250: EC76     0D         	DCR	C	;compute (A)=SAVEXT*2^(8-BLKSHFT).
2251: EC77     CA7FEC     	JZ	GETBLK3         
2252: EC7A     B7         	ORA	A              
2253: EC7B     17         	RAL                
2254: EC7C     C376EC     	JMP	GETBLK2        
2255: EC7F                GETBLK3:            
2256: EC7F     80         	ADD	B              
2257: EC80     C9         	RET                
2258: EC81                ;                   
2259: EC81                ;   Routine to extract the (BC) block byte from the fcb pointed
2260: EC81                ; to by (ParamsDE). If this is a big-disk, then these are 16 bit
2261: EC81                ; block numbers, else they are 8 bit numbers.
2262: EC81                ; Number is returned in (HL).
2263: EC81                ;                   
2264: EC81                EXTBLK:             
2265: EC81     2A3CE8     	LHLD	ParamsDE	;get fcb address.
2266: EC84     111000     	LXI	D,16	;block numbers start 16 bytes into fcb.
2267: EC87     19         	DAD	D              
2268: EC88     09         	DAD	B              
2269: EC89     3AD7F5     	LDA	BIGDISK	;are we using a big-disk?
2270: EC8C     B7         	ORA	A              
2271: EC8D     CA94EC     	JZ	EXTBLK1         
2272: EC90     6E         	MOV	L,M	;no, extract an 8 bit number from the fcb.
2273: EC91     2600       	MVI	H,0            
2274: EC93     C9         	RET                
2275: EC94                EXTBLK1:            
2276: EC94     09         	DAD	B	;yes, extract a 16 bit number.
2277: EC95     5E         	MOV	E,M            
2278: EC96     23         	INX	H              
2279: EC97     56         	MOV	D,M            
2280: EC98     EB         	XCHG		;return in (HL).
2281: EC99     C9         	RET                
2282: EC9A                ;                   
2283: EC9A                ;   Compute block number.
2284: EC9A                ;                   
2285: EC9A                COMBLK:             
2286: EC9A     CD61EC     	CALL	GETBLOCK      
2287: EC9D     4F         	MOV	C,A            
2288: EC9E     0600       	MVI	B,0            
2289: ECA0     CD81EC     	CALL	EXTBLK        
2290: ECA3     22DFF5     	SHLD	BLKNMBR       
2291: ECA6     C9         	RET                
2292: ECA7                ;                   
2293: ECA7                ;   Check for a zero block number (unused).
2294: ECA7                ;                   
2295: ECA7                CHKBLK:             
2296: ECA7     2ADFF5     	LHLD	BLKNMBR       
2297: ECAA     7D         	MOV	A,L	;is it zero?
2298: ECAB     B4         	ORA	H              
2299: ECAC     C9         	RET                
2300: ECAD                ;                   
2301: ECAD                ;   Adjust physical block (BLKNMBR) and convert to logical
2302: ECAD                ; sector (LOGSECT). This is the starting sector of this block.
2303: ECAD                ; The actual sector of interest is then added to this and the
2304: ECAD                ; resulting sector number is stored back in (BLKNMBR). This
2305: ECAD                ; will still have to be adjusted for the track number.
2306: ECAD                ;                   
2307: ECAD                LOGICAL:            
2308: ECAD     3ABEF5     	LDA	BLKSHFT	;get log2(physical/logical sectors).
2309: ECB0     2ADFF5     	LHLD	BLKNMBR	;get physical sector desired.
2310: ECB3                LOGICL1:            
2311: ECB3     29         	DAD	H	;compute logical sector number.
2312: ECB4     3D         	DCR	A	;note logical sectors are 128 bytes long.
2313: ECB5     C2B3EC     	JNZ	LOGICL1        
2314: ECB8     22E1F5     	SHLD	LOGSECT	;save logical sector.
2315: ECBB     3ABFF5     	LDA	BLKMASK	;get block mask.
2316: ECBE     4F         	MOV	C,A            
2317: ECBF     3ADDF5     	LDA	SAVNREC	;get next sector to access.
2318: ECC2     A1         	ANA	C	;extract the relative position within physical block.
2319: ECC3     B5         	ORA	L	;and add it too logical sector.
2320: ECC4     6F         	MOV	L,A            
2321: ECC5     22DFF5     	SHLD	BLKNMBR	;and store.
2322: ECC8     C9         	RET                
2323: ECC9                ;                   
2324: ECC9                ;   Set (HL) to point to extent byte in fcb.
2325: ECC9                ;                   
2326: ECC9                SETEXT:             
2327: ECC9     2A3CE8     	LHLD	ParamsDE      
2328: ECCC     110C00     	LXI	D,12	;it is the twelth byte.
2329: ECCF     19         	DAD	D              
2330: ECD0     C9         	RET                
2331: ECD1                ;                   
2332: ECD1                ;   Set (HL) to point to record count byte in fcb and (DE) to
2333: ECD1                ; next record number byte.
2334: ECD1                ;                   
2335: ECD1                SETHLDE:            
2336: ECD1     2A3CE8     	LHLD	ParamsDE      
2337: ECD4     110F00     	LXI	D,15	;record count byte (#15).
2338: ECD7     19         	DAD	D              
2339: ECD8     EB         	XCHG               
2340: ECD9     211100     	LXI	H,17	;next record number (#32).
2341: ECDC     19         	DAD	D              
2342: ECDD     C9         	RET                
2343: ECDE                ;                   
2344: ECDE                ;   Save current file data from fcb.
2345: ECDE                ;                   
2346: ECDE                STRDATA:            
2347: ECDE     CDD1EC     	CALL	SETHLDE       
2348: ECE1     7E         	MOV	A,M	;get and store record count byte.
2349: ECE2     32DDF5     	STA	SAVNREC        
2350: ECE5     EB         	XCHG               
2351: ECE6     7E         	MOV	A,M	;get and store next record number byte.
2352: ECE7     32DBF5     	STA	SAVNXT         
2353: ECEA     CDC9EC     	CALL	SETEXT	;point to extent byte.
2354: ECED     3AC0F5     	LDA	EXTMASK	;get extent mask.
2355: ECF0     A6         	ANA	M              
2356: ECF1     32DCF5     	STA	SAVEXT	;and save extent here.
2357: ECF4     C9         	RET                
2358: ECF5                ;                   
2359: ECF5                ;   Set the next record to access. If (MODE) is set to 2, then
2360: ECF5                ; the last record byte (SAVNREC) has the correct number to access.
2361: ECF5                ; For sequential access, (MODE) will be equal to 1.
2362: ECF5                ;                   
2363: ECF5                SETNREC:            
2364: ECF5     CDD1EC     	CALL	SETHLDE       
2365: ECF8     3AD0F5     	LDA	MODE	;get sequential flag (=1).
2366: ECFB     FE02       	CPI	2	;a 2 indicates that no adder is needed.
2367: ECFD     C201ED     	JNZ	STNREC1        
2368: ED00     AF         	XRA	A	;clear adder (random access?).
2369: ED01                STNREC1:            
2370: ED01     4F         	MOV	C,A            
2371: ED02     3ADDF5     	LDA	SAVNREC	;get last record number.
2372: ED05     81         	ADD	C	;increment record count.
2373: ED06     77         	MOV	M,A	;and set fcb's next record byte.
2374: ED07     EB         	XCHG               
2375: ED08     3ADBF5     	LDA	SAVNXT	;get next record byte from storage.
2376: ED0B     77         	MOV	M,A	;and put this into fcb as number of records used.
2377: ED0C     C9         	RET                
2378: ED0D                ;                   
2379: ED0D                ;   Shift HL right (C) bits.
2380: ED0D                ;                   
2381: ED0D                SHIFTR:             
2382: ED0D     0C         	INR		C			; minor adjustment
2383: ED0E                SHIFTR1:            
2384: ED0E     0D         	DCR		C			; count down
2385: ED0F     C8         	RZ					; exit if done
2386: ED10     7C         	MOV		A,H			; get the hi byte
2387: ED11     B7         	ORA		A			; reset carry bit
2388: ED12     1F         	RAR					; rotate right thru carry
2389: ED13     67         	MOV		H,A			; return new hi byte
2390: ED14     7D         	MOV		A,L			; get lo byte
2391: ED15     1F         	RAR					; rotate right thru carry
2392: ED16     6F         	MOV		L,A			; return new lo byte
2393: ED17     C30EED     	JMP		SHIFTR1		; keep doing it
2394: ED1A                ;                   
2395: ED1A                ;   Compute the check-sum for the directory buffer. Return
2396: ED1A                ; integer sum in (A).
2397: ED1A                ;                   
2398: ED1A                CHECKSUM:           
2399: ED1A     0E80       	MVI	C,128	;length of buffer.
2400: ED1C     2AB4F5     	LHLD	DIRBUF	;get its location.
2401: ED1F     AF         	XRA	A	;clear summation byte.
2402: ED20                CHKSUM1:            
2403: ED20     86         	ADD	M	;and compute sum ignoring carries.
2404: ED21     23         	INX	H              
2405: ED22     0D         	DCR	C              
2406: ED23     C220ED     	JNZ	CHKSUM1        
2407: ED26     C9         	RET                
2408: ED27                ;                   
2409: ED27                ;   Shift (HL) left (C) bits.
2410: ED27                ;                   
2411: ED27                SHIFTL:             
2412: ED27     0C         	INR	C              
2413: ED28                SHIFTL1:            
2414: ED28     0D         	DCR	C              
2415: ED29     C8         	RZ                 
2416: ED2A     29         	DAD	H	;shift left 1 bit.
2417: ED2B     C328ED     	JMP	SHIFTL1        
2418: ED2E                                    
2419: ED2E                ;                   
2420: ED2E                ;   Extract the write protect status bit for the current drive.
2421: ED2E                ; The result is returned in (A), bit 0.
2422: ED2E                ;                   
2423: ED2E                GETWPRT:            
2424: ED2E     2AA8F5     	LHLD	ROBitMap		;get Read Only Bit Map
2425: ED31     3AA6F5     	LDA		CurrentDrive	;which drive is current?
2426: ED34     4F         	MOV		C,A           
2427: ED35     CD0DED     	CALL	SHIFTR			;shift status such that bit 0 is the
2428: ED38     7D         	MOV		A,L				;one of interest for this drive.
2429: ED39     E601       	ANI		01H				;and isolate it.
2430: ED3B     C9         	RET						; Zero if not write protected
2431: ED3C                ;                   
2432: ED3C                ;   Function to write protect the current disk.
2433: ED3C                ;                   
2434: ED3C                WRTPRTD:            
2435: ED3C     21A8F5     	LXI	H,ROBitMap	;point to Read Only Bit Map
2436: ED3F     4E         	MOV	C,M	;set (BC) equal to the status.
2437: ED40     23         	INX	H              
2438: ED41     46         	MOV	B,M            
2439: ED42     CD52F4     	CALL	SETBIT	;and set this bit according to current drive.
2440: ED45     22A8F5     	SHLD	ROBitMap	;then save.
2441: ED48     2AC3F5     	LHLD	DIRSIZE	;now save directory size limit.
2442: ED4B     23         	INX	H	;remember the last one.
2443: ED4C     EB         	XCHG               
2444: ED4D     2AAEF5     	LHLD	FilePosInDir;and store it here.
2445: ED50     73         	MOV	M,E	;put low byte.
2446: ED51     23         	INX	H              
2447: ED52     72         	MOV	M,D	;then high byte.
2448: ED53     C9         	RET                
2449: ED54                ;                   
2450: ED54                ;   Check for a read only file.
2451: ED54                ;                   
2452: ED54                CHKROFL:            
2453: ED54     CD6EED     	CALL	FCB2HL	;set (HL) to file entry in directory buffer.
2454: ED57                CKROF1:             
2455: ED57     110900     	LXI	D,9	;look at bit 7 of the ninth byte.
2456: ED5A     19         	DAD	D              
2457: ED5B     7E         	MOV	A,M            
2458: ED5C     17         	RAL                
2459: ED5D     D0         	RNC		;return if ok.
2460: ED5E     21F2E8     	LXI	H,ROFILE;else, print error message and terminate.
2461: ED61     C36DEB     	JMP	JUMPHL         
2462: ED64                ;                   
2463: ED64                ;   Check the write protect status of the active disk.
2464: ED64                ;                   
2465: ED64                CHKWPRT:            
2466: ED64     CD2EED     	CALL	GETWPRT			; is it write protected ?
2467: ED67     C8         	RZ						; NO, return.
2468: ED68     21F0E8     	LXI		H,RODISK      
2469: ED6B     C36DEB     	JMP	JUMPHL		; else print message and terminate.
2470: ED6E                ;                   
2471: ED6E                ;   Routine to set (HL) pointing to the proper entry in the
2472: ED6E                ; directory buffer. 
2473: ED6E                ;                   
2474: ED6E                FCB2HL:             
2475: ED6E     2AB4F5     	LHLD	DIRBUF		;get address of buffer.
2476: ED71     3AE3F5     	LDA		FCBPOS		;relative position of file.
2477: ED74                ;                   
2478: ED74                ;   Routine to add (A) to (HL).
2479: ED74                ;                   
2480: ED74                ADDA2HL:            
2481: ED74     85         	ADD		L             
2482: ED75     6F         	MOV		L,A           
2483: ED76     D0         	RNC	               
2484: ED77     24         	INR		H			;take care of any carry.
2485: ED78     C9         	RET                
2486: ED79                ;                   
2487: ED79                ;   Routine to get the 's2' byte(Extent Count) from the fcb supplied in
2488: ED79                ; the initial parameter specification.
2489: ED79                ;                   
2490: ED79                GETS2:              
2491: ED79     2A3CE8     	LHLD	ParamsDE	;get address of fcb.
2492: ED7C     110E00     	LXI		D,14		;relative position of 's2'.
2493: ED7F     19         	DAD		D             
2494: ED80     7E         	MOV		A,M			;extract this byte.
2495: ED81     C9         	RET                
2496: ED82                ;                   
2497: ED82                ;   Clear the 's2' byte in the fcb.
2498: ED82                ;                   
2499: ED82                CLEARS2:            
2500: ED82     CD79ED     	CALL	GETS2		;this sets (HL) pointing to it.
2501: ED85     3600       	MVI		M,0			;now clear it.
2502: ED87     C9         	RET                
2503: ED88                ;                   
2504: ED88                ;   Set bit 7 in the 's2' byte of the fcb.
2505: ED88                ;                   
2506: ED88                SETS2B7:            
2507: ED88     CD79ED     	CALL	GETS2		;get the byte.
2508: ED8B     F680       	ORI		80H			;and set bit 7.
2509: ED8D     77         	MOV		M,A			;then store.
2510: ED8E     C9         	RET                
2511: ED8F                ;                   
2512: ED8F                ;   Compare (FILEPOS) with (FilePosInDir) and set flags based on
2513: ED8F                ; the difference. This checks to see if there are more file
2514: ED8F                ; names in the directory. We are at (FILEPOS) and there are
2515: ED8F                ; (FilePosInDir) of them to check.
2516: ED8F                ;                   
2517: ED8F                MOREFLS:            
2518: ED8F     2AE4F5     	LHLD	FILEPOS			;we are here.
2519: ED92     EB         	XCHG               
2520: ED93     2AAEF5     	LHLD	FilePosInDir	;and don't go past here.
2521: ED96     7B         	MOV		A,E				;compute difference but don't keep.
2522: ED97     96         	SUB		M             
2523: ED98     23         	INX		H             
2524: ED99     7A         	MOV		A,D           
2525: ED9A     9E         	SBB		M				;set carry if no more names.
2526: ED9B     C9         	RET                
2527: ED9C                ;                   
2528: ED9C                ;   Call this routine to prevent (FilePosInDir) from being greater
2529: ED9C                ; than (FILEPOS).   
2530: ED9C                ;                   
2531: ED9C                CHKNMBR:            
2532: ED9C     CD8FED     	CALL	MOREFLS		;FilePosInDir too big?
2533: ED9F     D8         	RC                 
2534: EDA0     13         	INX		D		;yes, reset it to (FILEPOS).
2535: EDA1     72         	MOV		M,D           
2536: EDA2     2B         	DCX		H             
2537: EDA3     73         	MOV		M,E           
2538: EDA4     C9         	RET                
2539: EDA5                ;                   
2540: EDA5                ;   Compute (HL)=(DE)-(HL)
2541: EDA5                ;                   
2542: EDA5                SUBHL:              
2543: EDA5     7B         	MOV		A,E		;compute difference.
2544: EDA6     95         	SUB		L             
2545: EDA7     6F         	MOV		L,A		;store low byte.
2546: EDA8     7A         	MOV		A,D           
2547: EDA9     9C         	SBB		H             
2548: EDAA     67         	MOV		H,A		;and then high byte.
2549: EDAB     C9         	RET                
2550: EDAC                ;                   
2551: EDAC                ;   Set the directory checksum byte.
2552: EDAC                ;                   
2553: EDAC                SETDIR:             
2554: EDAC     0EFF       	MVI	C,0FFH         
2555: EDAE                ;                   
2556: EDAE                ;   Routine to set or compare the directory checksum byte. If
2557: EDAE                ; (C)=0ffh, then this will set the checksum byte. Else the byte
2558: EDAE                ; will be checked. If the check fails (the disk has been changed),
2559: EDAE                ; then this disk will be write protected.
2560: EDAE                ;                   
2561: EDAE                CHECKDIR:           
2562: EDAE     2AE6F5     	LHLD	CKSUMTBL      
2563: EDB1     EB         	XCHG               
2564: EDB2     2AC7F5     	LHLD	ALLOC1        
2565: EDB5     CDA5ED     	CALL	SUBHL         
2566: EDB8     D0         	RNC		;ok if (CKSUMTBL) > (ALLOC1), so return.
2567: EDB9     C5         	PUSH	B             
2568: EDBA     CD1AED     	CALL	CHECKSUM;else compute checksum.
2569: EDBD     2AB8F5     	LHLD	CHKVECT	;get address of checksum table.
2570: EDC0     EB         	XCHG               
2571: EDC1     2AE6F5     	LHLD	CKSUMTBL      
2572: EDC4     19         	DAD	D	;set (HL) to point to byte for this drive.
2573: EDC5     C1         	POP	B              
2574: EDC6     0C         	INR	C	;set or check ?
2575: EDC7     CAD4ED     	JZ	CHKDIR1         
2576: EDCA     BE         	CMP	M	;check them. 
2577: EDCB     C8         	RZ		;return if they are the same.
2578: EDCC     CD8FED     	CALL	MOREFLS	;not the same, do we care?
2579: EDCF     D0         	RNC                
2580: EDD0     CD3CED     	CALL	WRTPRTD	;yes, mark this as write protected.
2581: EDD3     C9         	RET                
2582: EDD4                CHKDIR1:            
2583: EDD4     77         	MOV	M,A	;just set the byte.
2584: EDD5     C9         	RET                
2585: EDD6                ;                   
2586: EDD6                ;   Do a write to the directory of the current disk.
2587: EDD6                ;                   
2588: EDD6                DIRWRITE:           
2589: EDD6     CDACED     	CALL	SETDIR			;set checksum byte.
2590: EDD9     CDF0ED     	CALL	SetDirDMA		;set directory dma address.
2591: EDDC     0E01       	MVI		C,1				;tell the bios to actually write.
2592: EDDE     CDDBEB     	CALL	DOWRITE			;then do the write.
2593: EDE1     C3EAED     	JMP		Set2UsersDMA  
2594: EDE4                ;                   
2595: EDE4                ;   Read from the directory.
2596: EDE4                ;                   
2597: EDE4                DIRREAD:            
2598: EDE4     CDF0ED     	CALL	SetDirDMA	;set the directory dma address.
2599: EDE7     CDD5EB     	CALL	DOREAD	;and read it.
2600: EDEA                ;                   
2601: EDEA                ;   Routine to set the dma address to the users choice.
2602: EDEA                ;                   
2603: EDEA                Set2UsersDMA:       
2604: EDEA     21ACF5     	LXI		H,UsersDMA		;reset the default dma address and return.
2605: EDED     C3F3ED     	JMP		SetDMA0       
2606: EDF0                ;                   
2607: EDF0                ;   Routine to set the dma address for directory work.
2608: EDF0                ;                   
2609: EDF0                SetDirDMA:          
2610: EDF0     21B4F5     	LXI		H,DIRBUF      
2611: EDF3                ;                   
2612: EDF3                ;   Set the dma address. On entry, (HL) points to
2613: EDF3                ; word containing the desired dma address.
2614: EDF3                ;                   
2615: EDF3                SetDMA0:            
2616: EDF3     4E         	MOV		C,M           
2617: EDF4     23         	INX		H             
2618: EDF5     46         	MOV		B,M			;setup (BC) and go to the bios to set it.
2619: EDF6     C324F6     	JMP		SETDMA        
2620: EDF9                ;                   
2621: EDF9                ;   Move the directory buffer into user's dma space.
2622: EDF9                ;                   
2623: EDF9                MOVEDIR:            
2624: EDF9     2AB4F5     	LHLD	DIRBUF	;buffer is located here, and
2625: EDFC     EB         	XCHG               
2626: EDFD     2AACF5     	LHLD	UsersDMA; put it here.
2627: EE00     0E80       	MVI	C,128	;this is its length.
2628: EE02     C372EB     	JMP	DE2HL	;move it now and return.
2629: EE05                ;                   
2630: EE05                ;   Check (FILEPOS) and set the zero flag if it equals 0ffffh.
2631: EE05                ;                   
2632: EE05                CKFILPOS:           
2633: EE05     21E4F5     	LXI	H,FILEPOS      
2634: EE08     7E         	MOV	A,M            
2635: EE09     23         	INX	H              
2636: EE0A     BE         	CMP	M	;are both bytes the same?
2637: EE0B     C0         	RNZ                
2638: EE0C     3C         	INR	A	;yes, but are they each 0ffh?
2639: EE0D     C9         	RET                
2640: EE0E                ;                   
2641: EE0E                ;   Set location (FILEPOS) to 0ffffh.
2642: EE0E                ;                   
2643: EE0E                STFILPOS:           
2644: EE0E     21FFFF     	LXI	H,-1           
2645: EE11     22E4F5     	SHLD	FILEPOS       
2646: EE14     C9         	RET                
2647: EE15                ;                   
2648: EE15                ;   Move on to the next file position within the current
2649: EE15                ; directory buffer. If no more exist, set pointer to 0ffffh
2650: EE15                ; and the calling routine will check for this. Enter with (C)
2651: EE15                ; equal to 0ffh to cause the checksum byte to be set, else we
2652: EE15                ; will check this disk and set write protect if checksums are
2653: EE15                ; not the same (applies only if another directory sector must
2654: EE15                ; be read).         
2655: EE15                ;                   
2656: EE15                NXENTRY:            
2657: EE15     2AC3F5     	LHLD	DIRSIZE		; Get directory entry size limit.
2658: EE18     EB         	XCHG               
2659: EE19     2AE4F5     	LHLD	FILEPOS		; Get index into directory.
2660: EE1C     23         	INX		H			; Point at the next one
2661: EE1D     22E4F5     	SHLD	FILEPOS		; Save it
2662: EE20     CDA5ED     	CALL	SUBHL		;(HL)=(DIRSIZE)-(FILEPOS)
2663: EE23     D229EE     	JNC		NXENTRY1	; Are there any more entries?
2664: EE26     C30EEE     	JMP		STFILPOS	; No. - Set this flag and return.
2665: EE29                	                   
2666: EE29                NXENTRY1:           
2667: EE29     3AE4F5     	LDA		FILEPOS		; Get current index for dirctory directory.
2668: EE2C     E603       	ANI		03H			;only look within this sector (only 4 entries fit).
2669: EE2E     0605       	MVI		B,5			;convert to relative position (32 bytes each).
2670: EE30                NXENTRY2:           
2671: EE30     87         	ADD		A			;note that this is not efficient code.
2672: EE31     05         	DCR		B			;5 'ADD A's would be better.
2673: EE32     C230EE     	JNZ		NXENTRY2      
2674: EE35                	                   
2675: EE35     32E3F5     	STA		FCBPOS		;save it as position of fcb.
2676: EE38     B7         	ORA		A             
2677: EE39     C0         	RNZ					;return if we are within buffer.
2678: EE3A     C5         	PUSH	B             
2679: EE3B     CDE6EB     	CALL	TRKSEC		;we need the next directory sector.
2680: EE3E     CDE4ED     	CALL	DIRREAD       
2681: EE41     C1         	POP		B             
2682: EE42     C3AEED     	JMP		CHECKDIR      
2683: EE45                ;                   
2684: EE45                ;   Routine to to get a bit from the disk space allocation
2685: EE45                ; map. It is returned in (A), bit position 0. On entry to here,
2686: EE45                ; set (BC) to the block number on the disk to check.
2687: EE45                ; On return, (D) will contain the original bit position for
2688: EE45                ; this block number and (HL) will point to the address for it.
2689: EE45                ;                   
2690: EE45                CKBITMAP:           
2691: EE45     79         	MOV	A,C	;determine bit number of interest.
2692: EE46     E607       	ANI	07H	;compute (D)=(E)=(C and 7)+1.
2693: EE48     3C         	INR	A              
2694: EE49     5F         	MOV	E,A	;save particular bit number.
2695: EE4A     57         	MOV	D,A            
2696: EE4B                ;                   
2697: EE4B                ;   compute (BC)=(BC)/8.
2698: EE4B                ;                   
2699: EE4B     79         	MOV	A,C            
2700: EE4C     0F         	RRC		;now shift right 3 bits.
2701: EE4D     0F         	RRC                
2702: EE4E     0F         	RRC                
2703: EE4F     E61F       	ANI	1FH	;and clear bits 7,6,5.
2704: EE51     4F         	MOV	C,A            
2705: EE52     78         	MOV	A,B            
2706: EE53     87         	ADD	A	;now shift (B) into bits 7,6,5.
2707: EE54     87         	ADD	A              
2708: EE55     87         	ADD	A              
2709: EE56     87         	ADD	A              
2710: EE57     87         	ADD	A              
2711: EE58     B1         	ORA	C	;and add in (C).
2712: EE59     4F         	MOV	C,A	;ok, (C) ha been completed.
2713: EE5A     78         	MOV	A,B	;is there a better way of doing this?
2714: EE5B     0F         	RRC                
2715: EE5C     0F         	RRC                
2716: EE5D     0F         	RRC                
2717: EE5E     E61F       	ANI	1FH            
2718: EE60     47         	MOV	B,A	;and now (B) is completed.
2719: EE61                ;                   
2720: EE61                ;   use this as an offset into the disk space allocation
2721: EE61                ; table.            
2722: EE61                ;                   
2723: EE61     2ABAF5     	LHLD	ALOCVECT      
2724: EE64     09         	DAD	B              
2725: EE65     7E         	MOV	A,M	;now get correct byte.
2726: EE66                CKBMAP1:            
2727: EE66     07         	RLC		;get correct bit into position 0.
2728: EE67     1D         	DCR	E              
2729: EE68     C266EE     	JNZ	CKBMAP1        
2730: EE6B     C9         	RET                
2731: EE6C                ;                   
2732: EE6C                ;   Set or clear the bit map such that block number (BC) will be marked
2733: EE6C                ; as used. On entry, if (E)=0 then this bit will be cleared, if it equals
2734: EE6C                ; 1 then it will be set (don't use anyother values).
2735: EE6C                ;                   
2736: EE6C                STBITMAP:           
2737: EE6C     D5         	PUSH	D             
2738: EE6D     CD45EE     	CALL	CKBITMAP;get the byte of interest.
2739: EE70     E6FE       	ANI	0FEH	;clear the affected bit.
2740: EE72     C1         	POP	B              
2741: EE73     B1         	ORA	C	;and now set it acording to (C).
2742: EE74                ;                   
2743: EE74                ;  entry to restore the original bit position and then store
2744: EE74                ; in table. (A) contains the value, (D) contains the bit
2745: EE74                ; position (1-8), and (HL) points to the address within the
2746: EE74                ; space allocation table for this byte.
2747: EE74                ;                   
2748: EE74                STBMAP1:            
2749: EE74     0F         	RRC		;restore original bit position.
2750: EE75     15         	DCR	D              
2751: EE76     C274EE     	JNZ	STBMAP1        
2752: EE79     77         	MOV	M,A	;and stor byte in table.
2753: EE7A     C9         	RET                
2754: EE7B                ;                   
2755: EE7B                ;   Set/clear space used bits in allocation map for this file.
2756: EE7B                ; On entry, (C)=1 to set the map and (C)=0 to clear it.
2757: EE7B                ;                   
2758: EE7B                SETFILE:            
2759: EE7B     CD6EED     	CALL	FCB2HL	;get address of fcb
2760: EE7E     111000     	LXI	D,16           
2761: EE81     19         	DAD	D	;get to block number bytes.
2762: EE82     C5         	PUSH	B             
2763: EE83     0E11       	MVI	C,17	;check all 17 bytes (max) of table.
2764: EE85                SETFL1:             
2765: EE85     D1         	POP	D              
2766: EE86     0D         	DCR	C	;done all bytes yet?
2767: EE87     C8         	RZ                 
2768: EE88     D5         	PUSH	D             
2769: EE89     3AD7F5     	LDA	BIGDISK	;check disk size for 16 bit block numbers.
2770: EE8C     B7         	ORA	A              
2771: EE8D     CA98EE     	JZ	SETFL2          
2772: EE90     C5         	PUSH	B	;only 8 bit numbers. set (BC) to this one.
2773: EE91     E5         	PUSH	H             
2774: EE92     4E         	MOV	C,M	;get low byte from table, always
2775: EE93     0600       	MVI	B,0	;set high byte to zero.
2776: EE95     C39EEE     	JMP	SETFL3         
2777: EE98                SETFL2:             
2778: EE98     0D         	DCR	C	;for 16 bit block numbers, adjust counter.
2779: EE99     C5         	PUSH	B             
2780: EE9A     4E         	MOV	C,M	;now get both the low and high bytes.
2781: EE9B     23         	INX	H              
2782: EE9C     46         	MOV	B,M            
2783: EE9D     E5         	PUSH	H             
2784: EE9E                SETFL3:             
2785: EE9E     79         	MOV	A,C	;block used?
2786: EE9F     B0         	ORA	B              
2787: EEA0     CAADEE     	JZ	SETFL4          
2788: EEA3     2AC1F5     	LHLD	DSKSIZE	;is this block number within the
2789: EEA6     7D         	MOV	A,L	;space on the disk?
2790: EEA7     91         	SUB	C              
2791: EEA8     7C         	MOV	A,H            
2792: EEA9     98         	SBB	B              
2793: EEAA     D46CEE     	CNC	STBITMAP;yes, set the proper bit.
2794: EEAD                SETFL4:             
2795: EEAD     E1         	POP	H	;point to next block number in fcb.
2796: EEAE     23         	INX	H              
2797: EEAF     C1         	POP	B              
2798: EEB0     C385EE     	JMP	SETFL1         
2799: EEB3                                    
2800: EEB3                ;                   
2801: EEB3                ;   Set the status (StatusBDOSReturn) and return.
2802: EEB3                ;                   
2803: EEB3                STSTATUS:           
2804: EEB3     3ACFF5     	LDA	FNDSTAT        
2805: EEB6     C35CEB     	JMP	SETSTAT        
2806: EEB9                ;                   
2807: EEB9                ;   Check extents in (A) and (C). Set the zero flag if they
2808: EEB9                ; are the same. The number of 16k chunks of disk space that
2809: EEB9                ; the directory extent covers is expressad is (EXTMASK+1).
2810: EEB9                ; No registers are modified.
2811: EEB9                ;                   
2812: EEB9                SAMEXT:             
2813: EEB9     C5         	PUSH	B             
2814: EEBA     F5         	PUSH	PSW           
2815: EEBB     3AC0F5     	LDA	EXTMASK	;get extent mask and use it to
2816: EEBE     2F         	CMA		;to compare both extent numbers.
2817: EEBF     47         	MOV	B,A	;save resulting mask here.
2818: EEC0     79         	MOV	A,C	;mask first extent and save in (C).
2819: EEC1     A0         	ANA	B              
2820: EEC2     4F         	MOV	C,A            
2821: EEC3     F1         	POP	PSW	;now mask second extent and compare
2822: EEC4     A0         	ANA	B	;with the first one.
2823: EEC5     91         	SUB	C              
2824: EEC6     E61F       	ANI	1FH	;(* only check buts 0-4 *)
2825: EEC8     C1         	POP	B	;the zero flag is set if they are the same.
2826: EEC9     C9         	RET		;restore (BC) and return.
2827: EECA                ;                   
2828: EECA                ;   Search for the first occurence of a file name. On entry,
2829: EECA                ; register (C) should contain the number of bytes of the fcb
2830: EECA                ; that must match.  
2831: EECA                ;                   
2832: EECA                FINDFST:            
2833: EECA     3EFF       	MVI		A,0FFH        
2834: EECC     32CFF5     	STA		FNDSTAT			; set flag to not match found
2835: EECF     21D2F5     	LXI		H,COUNTER		; point at character counter.
2836: EED2     71         	MOV		M,C				; put in number of bytes to match
2837: EED3     2A3CE8     	LHLD	ParamsDE		; get filename to match.
2838: EED6     22D3F5     	SHLD	SAVEFCB			; and save.
2839: EED9     CD0EEE     	CALL	STFILPOS		; clear initial file position (set to 0ffffh).
2840: EEDC     CDC4EB     	CALL	HOMEDRV			;home the drive.
2841: EEDF                ;                   
2842: EEDF                ;   Entry to locate the next occurence of a filename within the
2843: EEDF                ; directory. The disk is not expected to have been changed. If
2844: EEDF                ; it was, then it will be write protected.
2845: EEDF                ;                   
2846: EEDF                FINDNXT:            
2847: EEDF     0E00       	MVI		C,0			;write protect the disk if changed.
2848: EEE1     CD15EE     	CALL	NXENTRY		;get next filename entry in directory.
2849: EEE4     CD05EE     	CALL	CKFILPOS;is file position = 0ffffh?
2850: EEE7     CA46EF     	JZ	FNDNXT6	;yes, exit now then.
2851: EEEA     2AD3F5     	LHLD	SAVEFCB	;set (DE) pointing to filename to match.
2852: EEED     EB         	XCHG               
2853: EEEE     1A         	LDAX	D             
2854: EEEF     FEE5       	CPI	0E5H	;empty directory entry?
2855: EEF1     CAFCEE     	JZ	FNDNXT1	;(* are we trying to reserect erased entries? *)
2856: EEF4     D5         	PUSH	D             
2857: EEF5     CD8FED     	CALL	MOREFLS	;more files in directory?
2858: EEF8     D1         	POP	D              
2859: EEF9     D246EF     	JNC	FNDNXT6	;no more. Exit now.
2860: EEFC                FNDNXT1:            
2861: EEFC     CD6EED     	CALL	FCB2HL	;get address of this fcb in directory.
2862: EEFF     3AD2F5     	LDA	COUNTER	;get number of bytes (characters) to check.
2863: EF02     4F         	MOV	C,A            
2864: EF03     0600       	MVI	B,0	;initialize byte position counter.
2865: EF05                FNDNXT2:            
2866: EF05     79         	MOV	A,C	;are we done with the compare?
2867: EF06     B7         	ORA	A              
2868: EF07     CA35EF     	JZ	FNDNXT5         
2869: EF0A     1A         	LDAX	D	;no, check next byte.
2870: EF0B     FE3F       	CPI	QMARK		; '?'	;don't care about this character?
2871: EF0D     CA2EEF     	JZ	FNDNXT4         
2872: EF10     78         	MOV	A,B	;get bytes position in fcb.
2873: EF11     FE0D       	CPI	13	;don't care about the thirteenth byte either.
2874: EF13     CA2EEF     	JZ	FNDNXT4         
2875: EF16     FE0C       	CPI	12	;extent byte?
2876: EF18     1A         	LDAX	D             
2877: EF19     CA25EF     	JZ	FNDNXT3         
2878: EF1C     96         	SUB	M	;otherwise compare characters.
2879: EF1D     E67F       	ANI	7FH            
2880: EF1F     C2DFEE     	JNZ	FINDNXT	;not the same, check next entry.
2881: EF22     C32EEF     	JMP	FNDNXT4	;so far so good, keep checking.
2882: EF25                FNDNXT3:            
2883: EF25     C5         	PUSH	B	;check the extent byte here.
2884: EF26     4E         	MOV	C,M            
2885: EF27     CDB9EE     	CALL	SAMEXT        
2886: EF2A     C1         	POP	B              
2887: EF2B     C2DFEE     	JNZ	FINDNXT	;not the same, look some more.
2888: EF2E                ;                   
2889: EF2E                ;   So far the names compare. Bump pointers to the next byte
2890: EF2E                ; and continue until all (C) characters have been checked.
2891: EF2E                ;                   
2892: EF2E                FNDNXT4:            
2893: EF2E     13         	INX	D	;bump pointers.
2894: EF2F     23         	INX	H              
2895: EF30     04         	INR	B              
2896: EF31     0D         	DCR	C	;adjust character counter.
2897: EF32     C305EF     	JMP	FNDNXT2        
2898: EF35                FNDNXT5:            
2899: EF35     3AE4F5     	LDA	FILEPOS	;return the position of this entry.
2900: EF38     E603       	ANI	03H            
2901: EF3A     323FE8     	STA	StatusBDOSReturn
2902: EF3D     21CFF5     	LXI	H,FNDSTAT      
2903: EF40     7E         	MOV	A,M            
2904: EF41     17         	RAL                
2905: EF42     D0         	RNC                
2906: EF43     AF         	XRA	A              
2907: EF44     77         	MOV	M,A            
2908: EF45     C9         	RET                
2909: EF46                ;                   
2910: EF46                ;   Filename was not found. Set appropriate status.
2911: EF46                ;                   
2912: EF46                FNDNXT6:            
2913: EF46     CD0EEE     	CALL	STFILPOS;set (FILEPOS) to 0ffffh.
2914: EF49     3EFF       	MVI	A,0FFH	;say not located.
2915: EF4B     C35CEB     	JMP	SETSTAT        
2916: EF4E                ;                   
2917: EF4E                ;   Erase files from the directory. Only the first byte of the
2918: EF4E                ; fcb will be affected. It is set to (E5).
2919: EF4E                ;                   
2920: EF4E                ERAFILE:            
2921: EF4E     CD64ED     	CALL	CHKWPRT		;is disk write protected?
2922: EF51     0E0C       	MVI		C,12		;only compare file names.
2923: EF53     CDCAEE     	CALL	FINDFST		;get first file name.
2924: EF56                ERAFIL1:            
2925: EF56     CD05EE     	CALL	CKFILPOS	;any found?
2926: EF59     C8         	RZ					;nope, we must be done.
2927: EF5A     CD54ED     	CALL	CHKROFL	;is file read only?
2928: EF5D     CD6EED     	CALL	FCB2HL	;nope, get address of fcb and
2929: EF60     36E5       	MVI	M,0E5H	;set first byte to 'empty'.
2930: EF62     0E00       	MVI	C,0	;clear the space from the bit map.
2931: EF64     CD7BEE     	CALL	SETFILE       
2932: EF67     CDD6ED     	CALL	DIRWRITE;now write the directory sector back out.
2933: EF6A     CDDFEE     	CALL	FINDNXT	;find the next file name.
2934: EF6D     C356EF     	JMP	ERAFIL1	;and repeat process.
2935: EF70                ;                   
2936: EF70                ;   Look through the space allocation map (bit map) for the
2937: EF70                ; next available block. Start searching at block number (BC-1).
2938: EF70                ; The search procedure is to look for an empty block that is
2939: EF70                ; before the starting block. If not empty, look at a later
2940: EF70                ; block number. In this way, we return the closest empty block
2941: EF70                ; on either side of the 'target' block number. This will speed
2942: EF70                ; access on random devices. For serial devices, this should be
2943: EF70                ; changed to look in the forward direction first and then start
2944: EF70                ; at the front and search some more.
2945: EF70                ;                   
2946: EF70                ;   On return, (DE)= block number that is empty and (HL) =0
2947: EF70                ; if no empry block was found.
2948: EF70                ;                   
2949: EF70                FNDSPACE:           
2950: EF70     50         	MOV	D,B	;set (DE) as the block that is checked.
2951: EF71     59         	MOV	E,C            
2952: EF72                ;                   
2953: EF72                ;   Look before target block. Registers (BC) are used as the lower
2954: EF72                ; pointer and (DE) as the upper pointer.
2955: EF72                ;                   
2956: EF72                FNDSPA1:            
2957: EF72     79         	MOV	A,C	;is block 0 specified?
2958: EF73     B0         	ORA	B              
2959: EF74     CA83EF     	JZ	FNDSPA2         
2960: EF77     0B         	DCX	B	;nope, check previous block.
2961: EF78     D5         	PUSH	D             
2962: EF79     C5         	PUSH	B             
2963: EF7A     CD45EE     	CALL	CKBITMAP      
2964: EF7D     1F         	RAR		;is this block empty?
2965: EF7E     D29EEF     	JNC	FNDSPA3	;yes. use this.
2966: EF81                ;                   
2967: EF81                ;   Note that the above logic gets the first block that it finds
2968: EF81                ; that is empty. Thus a file could be written 'backward' making
2969: EF81                ; it very slow to access. This could be changed to look for the
2970: EF81                ; first empty block and then continue until the start of this
2971: EF81                ; empty space is located and then used that starting block.
2972: EF81                ; This should help speed up access to some files especially on
2973: EF81                ; a well used disk with lots of fairly small 'holes'.
2974: EF81                ;                   
2975: EF81     C1         	POP	B	;nope, check some more.
2976: EF82     D1         	POP	D              
2977: EF83                ;                   
2978: EF83                ;   Now look after target block.
2979: EF83                ;                   
2980: EF83                FNDSPA2:            
2981: EF83     2AC1F5     	LHLD	DSKSIZE	;is block (DE) within disk limits?
2982: EF86     7B         	MOV	A,E            
2983: EF87     95         	SUB	L              
2984: EF88     7A         	MOV	A,D            
2985: EF89     9C         	SBB	H              
2986: EF8A     D2A6EF     	JNC	FNDSPA4        
2987: EF8D     13         	INX	D	;yes, move on to next one.
2988: EF8E     C5         	PUSH	B             
2989: EF8F     D5         	PUSH	D             
2990: EF90     42         	MOV	B,D            
2991: EF91     4B         	MOV	C,E            
2992: EF92     CD45EE     	CALL	CKBITMAP;check it.
2993: EF95     1F         	RAR		;empty?       
2994: EF96     D29EEF     	JNC	FNDSPA3        
2995: EF99     D1         	POP	D	;nope, continue searching.
2996: EF9A     C1         	POP	B              
2997: EF9B     C372EF     	JMP	FNDSPA1        
2998: EF9E                ;                   
2999: EF9E                ;   Empty block found. Set it as used and return with (HL)
3000: EF9E                ; pointing to it (true?).
3001: EF9E                ;                   
3002: EF9E                FNDSPA3:            
3003: EF9E     17         	RAL		;reset byte.  
3004: EF9F     3C         	INR	A	;and set bit 0.
3005: EFA0     CD74EE     	CALL	STBMAP1	;update bit map.
3006: EFA3     E1         	POP	H	;set return registers.
3007: EFA4     D1         	POP	D              
3008: EFA5     C9         	RET                
3009: EFA6                ;                   
3010: EFA6                ;   Free block was not found. If (BC) is not zero, then we have
3011: EFA6                ; not checked all of the disk space.
3012: EFA6                ;                   
3013: EFA6                FNDSPA4:            
3014: EFA6     79         	MOV	A,C            
3015: EFA7     B0         	ORA	B              
3016: EFA8     C272EF     	JNZ	FNDSPA1        
3017: EFAB     210000     	LXI	H,0	;set 'not found' status.
3018: EFAE     C9         	RET                
3019: EFAF                ;                   
3020: EFAF                ;   Move a complete fcb entry into the directory and write it.
3021: EFAF                ;                   
3022: EFAF                FCBSET:             
3023: EFAF     0E00       	MVI	C,0            
3024: EFB1     1E20       	MVI	E,32	;length of each entry.
3025: EFB3                ;                   
3026: EFB3                ;   Move (E) bytes from the fcb pointed to by (ParamsDE) into
3027: EFB3                ; fcb in directory starting at relative byte (C). This updated
3028: EFB3                ; directory buffer is then written to the disk.
3029: EFB3                ;                   
3030: EFB3                UPDATE:             
3031: EFB3     D5         	PUSH	D             
3032: EFB4     0600       	MVI	B,0	;set (BC) to relative byte position.
3033: EFB6     2A3CE8     	LHLD	ParamsDE	;get address of fcb.
3034: EFB9     09         	DAD	B	;compute starting byte.
3035: EFBA     EB         	XCHG               
3036: EFBB     CD6EED     	CALL	FCB2HL	;get address of fcb to update in directory.
3037: EFBE     C1         	POP	B	;set (C) to number of bytes to change.
3038: EFBF     CD72EB     	CALL	DE2HL         
3039: EFC2                UPDATE1:            
3040: EFC2     CDE6EB     	CALL	TRKSEC	;determine the track and sector affected.
3041: EFC5     C3D6ED     	JMP	DIRWRITE	;then write this sector out.
3042: EFC8                ;                   
3043: EFC8                ;   Routine to change the name of all files on the disk with a
3044: EFC8                ; specified name. The fcb contains the current name as the
3045: EFC8                ; first 12 characters and the new name 16 bytes into the fcb.
3046: EFC8                ;                   
3047: EFC8                CHGNAMES:           
3048: EFC8     CD64ED     	CALL	CHKWPRT	;check for a write protected disk.
3049: EFCB     0E0C       	MVI	C,12	;match first 12 bytes of fcb only.
3050: EFCD     CDCAEE     	CALL	FINDFST	;get first name.
3051: EFD0     2A3CE8     	LHLD	ParamsDE	;get address of fcb.
3052: EFD3     7E         	MOV	A,M	;get user number.
3053: EFD4     111000     	LXI	D,16	;move over to desired name.
3054: EFD7     19         	DAD	D              
3055: EFD8     77         	MOV	M,A	;keep same user number.
3056: EFD9                CHGNAM1:            
3057: EFD9     CD05EE     	CALL	CKFILPOS;any matching file found?
3058: EFDC     C8         	RZ		;no, we must be done.
3059: EFDD     CD54ED     	CALL	CHKROFL	;check for read only file.
3060: EFE0     0E10       	MVI	C,16	;start 16 bytes into fcb.
3061: EFE2     1E0C       	MVI	E,12	;and update the first 12 bytes of directory.
3062: EFE4     CDB3EF     	CALL	UPDATE        
3063: EFE7     CDDFEE     	CALL	FINDNXT	;get te next file name.
3064: EFEA     C3D9EF     	JMP	CHGNAM1	;and continue.
3065: EFED                ;                   
3066: EFED                ;   Update a files attributes. The procedure is to search for
3067: EFED                ; every file with the same name as shown in fcb (ignoring bit 7)
3068: EFED                ; and then to update it (which includes bit 7). No other changes
3069: EFED                ; are made.         
3070: EFED                ;                   
3071: EFED                SAVEATTR:           
3072: EFED     0E0C       	MVI	C,12	;match first 12 bytes.
3073: EFEF     CDCAEE     	CALL	FINDFST	;look for first filename.
3074: EFF2                SAVATR1:            
3075: EFF2     CD05EE     	CALL	CKFILPOS;was one found?
3076: EFF5     C8         	RZ		;nope, we must be done.
3077: EFF6     0E00       	MVI	C,0	;yes, update the first 12 bytes now.
3078: EFF8     1E0C       	MVI	E,12           
3079: EFFA     CDB3EF     	CALL	UPDATE	;update filename and write directory.
3080: EFFD     CDDFEE     	CALL	FINDNXT	;and get the next file.
3081: F000     C3F2EF     	JMP	SAVATR1	;then continue until done.
3082: F003                ;                   
3083: F003                ;  Open a file (name specified in fcb).
3084: F003                ;                   
3085: F003                OPENIT:             
3086: F003     0E0F       	MVI	C,15	;compare the first 15 bytes.
3087: F005     CDCAEE     	CALL	FINDFST	;get the first one in directory.
3088: F008     CD05EE     	CALL	CKFILPOS;any at all?
3089: F00B     C8         	RZ                 
3090: F00C                OPENIT1:            
3091: F00C     CDC9EC     	CALL	SETEXT	;point to extent byte within users fcb.
3092: F00F     7E         	MOV	A,M	;and get it.
3093: F010     F5         	PUSH	PSW	;save it and address.
3094: F011     E5         	PUSH	H             
3095: F012     CD6EED     	CALL	FCB2HL	;point to fcb in directory.
3096: F015     EB         	XCHG               
3097: F016     2A3CE8     	LHLD	ParamsDE	;this is the users copy.
3098: F019     0E20       	MVI	C,32	;move it into users space.
3099: F01B     D5         	PUSH	D             
3100: F01C     CD72EB     	CALL	DE2HL         
3101: F01F     CD88ED     	CALL	SETS2B7	;set bit 7 in 's2' byte (unmodified).
3102: F022     D1         	POP	D	;now get the extent byte from this fcb.
3103: F023     210C00     	LXI	H,12           
3104: F026     19         	DAD	D              
3105: F027     4E         	MOV	C,M	;into (C). 
3106: F028     210F00     	LXI	H,15	;now get the record count byte into (B).
3107: F02B     19         	DAD	D              
3108: F02C     46         	MOV	B,M            
3109: F02D     E1         	POP	H	;keep the same extent as the user had originally.
3110: F02E     F1         	POP	PSW            
3111: F02F     77         	MOV	M,A            
3112: F030     79         	MOV	A,C	;is it the same as in the directory fcb?
3113: F031     BE         	CMP	M              
3114: F032     78         	MOV	A,B	;if yes, then use the same record count.
3115: F033     CA3DF0     	JZ	OPENIT2         
3116: F036     3E00       	MVI	A,0	;if the user specified an extent greater than
3117: F038     DA3DF0     	JC	OPENIT2	;the one in the directory, then set record count to 0.
3118: F03B     3E80       	MVI	A,128	;otherwise set to maximum.
3119: F03D                OPENIT2:            
3120: F03D     2A3CE8     	LHLD	ParamsDE	;set record count in users fcb to (A).
3121: F040     110F00     	LXI	D,15           
3122: F043     19         	DAD	D	;compute relative position.
3123: F044     77         	MOV	M,A	;and set the record count.
3124: F045     C9         	RET                
3125: F046                ;                   
3126: F046                ;   Move two bytes from (DE) to (HL) if (and only if) (HL)
3127: F046                ; point to a zero value (16 bit).
3128: F046                ;   Return with zero flag set it (DE) was moved. Registers (DE)
3129: F046                ; and (HL) are not changed. However (A) is.
3130: F046                ;                   
3131: F046                MOVEWORD:           
3132: F046     7E         	MOV	A,M	;check for a zero word.
3133: F047     23         	INX	H              
3134: F048     B6         	ORA	M	;both bytes zero?
3135: F049     2B         	DCX	H              
3136: F04A     C0         	RNZ		;nope, just return.
3137: F04B     1A         	LDAX	D	;yes, move two bytes from (DE) into
3138: F04C     77         	MOV	M,A	;this zero space.
3139: F04D     13         	INX	D              
3140: F04E     23         	INX	H              
3141: F04F     1A         	LDAX	D             
3142: F050     77         	MOV	M,A            
3143: F051     1B         	DCX	D	;don't disturb these registers.
3144: F052     2B         	DCX	H              
3145: F053     C9         	RET                
3146: F054                ;                   
3147: F054                ;   Get here to close a file specified by (fcb).
3148: F054                ;                   
3149: F054                CLOSEIT:            
3150: F054     AF         	XRA	A	;clear status and file position bytes.
3151: F055     323FE8     	STA	StatusBDOSReturn
3152: F058     32E4F5     	STA	FILEPOS        
3153: F05B     32E5F5     	STA	FILEPOS+1      
3154: F05E     CD2EED     	CALL	GETWPRT	;get write protect bit for this drive.
3155: F061     C0         	RNZ		;just return if it is set.
3156: F062     CD79ED     	CALL	GETS2	;else get the 's2' byte.
3157: F065     E680       	ANI	80H	;and look at bit 7 (file unmodified?).
3158: F067     C0         	RNZ		;just return if set.
3159: F068     0E0F       	MVI	C,15	;else look up this file in directory.
3160: F06A     CDCAEE     	CALL	FINDFST       
3161: F06D     CD05EE     	CALL	CKFILPOS;was it found?
3162: F070     C8         	RZ		;just return if not.
3163: F071     011000     	LXI	B,16	;set (HL) pointing to records used section.
3164: F074     CD6EED     	CALL	FCB2HL        
3165: F077     09         	DAD	B              
3166: F078     EB         	XCHG               
3167: F079     2A3CE8     	LHLD	ParamsDE	;do the same for users specified fcb.
3168: F07C     09         	DAD	B              
3169: F07D     0E10       	MVI	C,16	;this many bytes are present in this extent.
3170: F07F                CLOSEIT1:           
3171: F07F     3AD7F5     	LDA	BIGDISK	;8 or 16 bit record numbers?
3172: F082     B7         	ORA	A              
3173: F083     CA9AF0     	JZ	CLOSEIT4        
3174: F086     7E         	MOV	A,M	;just 8 bit. Get one from users fcb.
3175: F087     B7         	ORA	A              
3176: F088     1A         	LDAX	D	;now get one from directory fcb.
3177: F089     C28DF0     	JNZ	CLOSEIT2       
3178: F08C     77         	MOV	M,A	;users byte was zero. Update from directory.
3179: F08D                CLOSEIT2:           
3180: F08D     B7         	ORA	A              
3181: F08E     C293F0     	JNZ	CLOSEIT3       
3182: F091     7E         	MOV	A,M	;directories byte was zero, update from users fcb.
3183: F092     12         	STAX	D             
3184: F093                CLOSEIT3:           
3185: F093     BE         	CMP	M	;if neither one of these bytes were zero,
3186: F094     C2D1F0     	JNZ	CLOSEIT7	;then close error if they are not the same.
3187: F097     C3AFF0     	JMP	CLOSEIT5	;ok so far, get to next byte in fcbs.
3188: F09A                CLOSEIT4:           
3189: F09A     CD46F0     	CALL	MOVEWORD;update users fcb if it is zero.
3190: F09D     EB         	XCHG               
3191: F09E     CD46F0     	CALL	MOVEWORD;update directories fcb if it is zero.
3192: F0A1     EB         	XCHG               
3193: F0A2     1A         	LDAX	D	;if these two values are no different,
3194: F0A3     BE         	CMP	M	;then a close error occured.
3195: F0A4     C2D1F0     	JNZ	CLOSEIT7       
3196: F0A7     13         	INX	D	;check second byte.
3197: F0A8     23         	INX	H              
3198: F0A9     1A         	LDAX	D             
3199: F0AA     BE         	CMP	M              
3200: F0AB     C2D1F0     	JNZ	CLOSEIT7       
3201: F0AE     0D         	DCR	C	;remember 16 bit values.
3202: F0AF                CLOSEIT5:           
3203: F0AF     13         	INX	D	;bump to next item in table.
3204: F0B0     23         	INX	H              
3205: F0B1     0D         	DCR	C	;there are 16 entries only.
3206: F0B2     C27FF0     	JNZ	CLOSEIT1;continue if more to do.
3207: F0B5     01ECFF     	LXI	B,0FFECH;backup 20 places (extent byte).
3208: F0B8     09         	DAD	B              
3209: F0B9     EB         	XCHG               
3210: F0BA     09         	DAD	B              
3211: F0BB     1A         	LDAX	D             
3212: F0BC     BE         	CMP	M	;directory's extent already greater than the
3213: F0BD     DAC9F0     	JC	CLOSEIT6	;users extent?
3214: F0C0     77         	MOV	M,A	;no, update directory extent.
3215: F0C1     010300     	LXI	B,3	;and update the record count byte in
3216: F0C4     09         	DAD	B	;directories fcb.
3217: F0C5     EB         	XCHG               
3218: F0C6     09         	DAD	B              
3219: F0C7     7E         	MOV	A,M	;get from user.
3220: F0C8     12         	STAX	D	;and put in directory.
3221: F0C9                CLOSEIT6:           
3222: F0C9     3EFF       	MVI	A,0FFH	;set 'was open and is now closed' byte.
3223: F0CB     32CDF5     	STA	CLOSEFLG       
3224: F0CE     C3C2EF     	JMP	UPDATE1	;update the directory now.
3225: F0D1                CLOSEIT7:           
3226: F0D1     213FE8     	LXI	H,StatusBDOSReturn;set return status and then return.
3227: F0D4     35         	DCR	M              
3228: F0D5     C9         	RET                
3229: F0D6                ;                   
3230: F0D6                ;   Routine to get the next empty space in the directory. It
3231: F0D6                ; will then be cleared for use.
3232: F0D6                ;                   
3233: F0D6                GETEMPTY:           
3234: F0D6     CD64ED     	CALL	CHKWPRT		;make sure disk is not write protected.
3235: F0D9     2A3CE8     	LHLD	ParamsDE	;save current parameters (fcb).
3236: F0DC     E5         	PUSH	H             
3237: F0DD     21A7F5     	LXI		H,EMPTYFCB	;use special one for empty space.
3238: F0E0     223CE8     	SHLD	ParamsDE      
3239: F0E3     0E01       	MVI	C,1	;search for first empty spot in directory.
3240: F0E5     CDCAEE     	CALL	FINDFST	;(* only check first byte *)
3241: F0E8     CD05EE     	CALL	CKFILPOS;none?
3242: F0EB     E1         	POP	H              
3243: F0EC     223CE8     	SHLD	ParamsDE	;restore original fcb address.
3244: F0EF     C8         	RZ		;return if no more space.
3245: F0F0     EB         	XCHG               
3246: F0F1     210F00     	LXI	H,15	;point to number of records for this file.
3247: F0F4     19         	DAD	D              
3248: F0F5     0E11       	MVI	C,17	;and clear all of this space.
3249: F0F7     AF         	XRA	A              
3250: F0F8                GETMT1:             
3251: F0F8     77         	MOV	M,A            
3252: F0F9     23         	INX	H              
3253: F0FA     0D         	DCR	C              
3254: F0FB     C2F8F0     	JNZ	GETMT1         
3255: F0FE     210D00     	LXI	H,13	;clear the 's1' byte also.
3256: F101     19         	DAD	D              
3257: F102     77         	MOV	M,A            
3258: F103     CD9CED     	CALL	CHKNMBR	;keep (FilePosInDir) within bounds.
3259: F106     CDAFEF     	CALL	FCBSET	;write out this fcb entry to directory.
3260: F109     C388ED     	JMP	SETS2B7	;set 's2' byte bit 7 (unmodified at present).
3261: F10C                ;                   
3262: F10C                ;   Routine to close the current extent and open the next one
3263: F10C                ; for reading.      
3264: F10C                ;                   
3265: F10C                GETNEXT:            
3266: F10C     AF         	XRA	A              
3267: F10D     32CDF5     	STA	CLOSEFLG;clear close flag.
3268: F110     CD54F0     	CALL	CLOSEIT	;close this extent.
3269: F113     CD05EE     	CALL	CKFILPOS      
3270: F116     C8         	RZ		;not there???  
3271: F117     2A3CE8     	LHLD	ParamsDE	;get extent byte.
3272: F11A     010C00     	LXI	B,12           
3273: F11D     09         	DAD	B              
3274: F11E     7E         	MOV	A,M	;and increment it.
3275: F11F     3C         	INR	A              
3276: F120     E61F       	ANI	1FH	;keep within range 0-31.
3277: F122     77         	MOV	M,A            
3278: F123     CA35F1     	JZ	GTNEXT1	;overflow?
3279: F126     47         	MOV	B,A	;mask extent byte.
3280: F127     3AC0F5     	LDA	EXTMASK        
3281: F12A     A0         	ANA	B              
3282: F12B     21CDF5     	LXI	H,CLOSEFLG;check close flag (0ffh is ok).
3283: F12E     A6         	ANA	M              
3284: F12F     CA40F1     	JZ	GTNEXT2	;if zero, we must read in next extent.
3285: F132     C35EF1     	JMP	GTNEXT3	;else, it is already in memory.
3286: F135                GTNEXT1:            
3287: F135     010200     	LXI	B,2	;Point to the 's2' byte.
3288: F138     09         	DAD	B              
3289: F139     34         	INR	M	;and bump it.
3290: F13A     7E         	MOV	A,M	;too many extents?
3291: F13B     E60F       	ANI	0FH            
3292: F13D     CA68F1     	JZ	GTNEXT5	;yes, set error code.
3293: F140                ;                   
3294: F140                ;   Get here to open the next extent.
3295: F140                ;                   
3296: F140                GTNEXT2:            
3297: F140     0E0F       	MVI	C,15	;set to check first 15 bytes of fcb.
3298: F142     CDCAEE     	CALL	FINDFST	;find the first one.
3299: F145     CD05EE     	CALL	CKFILPOS;none available?
3300: F148     C25EF1     	JNZ	GTNEXT3        
3301: F14B     3ACEF5     	LDA	RDWRTFLG;no extent present. Can we open an empty one?
3302: F14E     3C         	INR	A	;0ffh means reading (so not possible).
3303: F14F     CA68F1     	JZ	GTNEXT5	;or an error.
3304: F152     CDD6F0     	CALL	GETEMPTY;we are writing, get an empty entry.
3305: F155     CD05EE     	CALL	CKFILPOS;none?
3306: F158     CA68F1     	JZ	GTNEXT5	;error if true.
3307: F15B     C361F1     	JMP	GTNEXT4	;else we are almost done.
3308: F15E                GTNEXT3:            
3309: F15E     CD0CF0     	CALL	OPENIT1	;open this extent.
3310: F161                GTNEXT4:            
3311: F161     CDDEEC     	CALL	STRDATA	;move in updated data (rec #, extent #, etc.)
3312: F164     AF         	XRA	A	;clear status and return.
3313: F165     C35CEB     	JMP	SETSTAT        
3314: F168                ;                   
3315: F168                ;   Error in extending the file. Too many extents were needed
3316: F168                ; or not enough space on the disk.
3317: F168                ;                   
3318: F168                GTNEXT5:            
3319: F168     CD60EB     	CALL	IOERR1	;set error code, clear bit 7 of 's2'
3320: F16B     C388ED     	JMP	SETS2B7	;so this is not written on a close.
3321: F16E                ;                   
3322: F16E                ;   Read a sequential file.
3323: F16E                ;                   
3324: F16E                RDSEQ:              
3325: F16E     3E01       	MVI	A,1	;set sequential access mode.
3326: F170     32D0F5     	STA	MODE           
3327: F173                RDSEQ1:             
3328: F173     3EFF       	MVI	A,0FFH	;don't allow reading unwritten space.
3329: F175     32CEF5     	STA	RDWRTFLG       
3330: F178     CDDEEC     	CALL	STRDATA	;put rec# and ext# into fcb.
3331: F17B     3ADDF5     	LDA	SAVNREC	;get next record to read.
3332: F17E     21DBF5     	LXI	H,SAVNXT;get number of records in extent.
3333: F181     BE         	CMP	M	;within this extent?
3334: F182     DA98F1     	JC	RDSEQ2          
3335: F185     FE80       	CPI	128	;no. Is this extent fully used?
3336: F187     C2ADF1     	JNZ	RDSEQ3	;no. End-of-file.
3337: F18A     CD0CF1     	CALL	GETNEXT	;yes, open the next one.
3338: F18D     AF         	XRA	A	;reset next record to read.
3339: F18E     32DDF5     	STA	SAVNREC        
3340: F191     3A3FE8     	LDA	StatusBDOSReturn	;check on open, successful?
3341: F194     B7         	ORA	A              
3342: F195     C2ADF1     	JNZ	RDSEQ3	;no, error.
3343: F198                RDSEQ2:             
3344: F198     CD9AEC     	CALL	COMBLK	;ok. compute block number to read.
3345: F19B     CDA7EC     	CALL	CHKBLK	;check it. Within bounds?
3346: F19E     CAADF1     	JZ	RDSEQ3	;no, error.
3347: F1A1     CDADEC     	CALL	LOGICAL	;convert (BLKNMBR) to logical sector (128 byte).
3348: F1A4     CDF4EB     	CALL	TRKSEC1	;set the track and sector for this block #.
3349: F1A7     CDD5EB     	CALL	DOREAD	;and read it.
3350: F1AA     C3F5EC     	JMP	SETNREC	;and set the next record to be accessed.
3351: F1AD                ;                   
3352: F1AD                ;   Read error occured. Set status and return.
3353: F1AD                ;                   
3354: F1AD                RDSEQ3:             
3355: F1AD     C360EB     	JMP	IOERR1         
3356: F1B0                ;                   
3357: F1B0                ;   Write the next sequential record.
3358: F1B0                ;                   
3359: F1B0                WTSEQ:              
3360: F1B0     3E01       	MVI	A,1	;set sequential access mode.
3361: F1B2     32D0F5     	STA	MODE           
3362: F1B5                WTSEQ1:             
3363: F1B5     3E00       	MVI	A,0	;allow an addition empty extent to be opened.
3364: F1B7     32CEF5     	STA	RDWRTFLG       
3365: F1BA     CD64ED     	CALL	CHKWPRT	;check write protect status.
3366: F1BD     2A3CE8     	LHLD	ParamsDE      
3367: F1C0     CD57ED     	CALL	CKROF1	;check for read only file, (HL) already set to fcb.
3368: F1C3     CDDEEC     	CALL	STRDATA	;put updated data into fcb.
3369: F1C6     3ADDF5     	LDA	SAVNREC	;get record number to write.
3370: F1C9     FE80       	CPI	128	;within range?
3371: F1CB     D260EB     	JNC	IOERR1	;no, error(?).
3372: F1CE     CD9AEC     	CALL	COMBLK	;compute block number.
3373: F1D1     CDA7EC     	CALL	CHKBLK	;check number.
3374: F1D4     0E00       	MVI	C,0	;is there one to write to?
3375: F1D6     C220F2     	JNZ	WTSEQ6	;yes, go do it.
3376: F1D9     CD61EC     	CALL	GETBLOCK;get next block number within fcb to use.
3377: F1DC     32D1F5     	STA	RELBLOCK;and save.
3378: F1DF     010000     	LXI	B,0	;start looking for space from the start
3379: F1E2     B7         	ORA	A	;if none allocated as yet.
3380: F1E3     CAEDF1     	JZ	WTSEQ2          
3381: F1E6     4F         	MOV	C,A	;extract previous block number from fcb
3382: F1E7     0B         	DCX	B	;so we can be closest to it.
3383: F1E8     CD81EC     	CALL	EXTBLK        
3384: F1EB     44         	MOV	B,H            
3385: F1EC     4D         	MOV	C,L            
3386: F1ED                WTSEQ2:             
3387: F1ED     CD70EF     	CALL	FNDSPACE;find the next empty block nearest number (BC).
3388: F1F0     7D         	MOV	A,L	;check for a zero number.
3389: F1F1     B4         	ORA	H              
3390: F1F2     C2FAF1     	JNZ	WTSEQ3         
3391: F1F5     3E02       	MVI	A,2	;no more space?
3392: F1F7     C35CEB     	JMP	SETSTAT        
3393: F1FA                WTSEQ3:             
3394: F1FA     22DFF5     	SHLD	BLKNMBR	;save block number to access.
3395: F1FD     EB         	XCHG		;put block number into (DE).
3396: F1FE     2A3CE8     	LHLD	ParamsDE	;now we must update the fcb for this
3397: F201     011000     	LXI	B,16	;newly allocated block.
3398: F204     09         	DAD	B              
3399: F205     3AD7F5     	LDA	BIGDISK	;8 or 16 bit block numbers?
3400: F208     B7         	ORA	A              
3401: F209     3AD1F5     	LDA	RELBLOCK	;(* update this entry *)
3402: F20C     CA16F2     	JZ	WTSEQ4	;zero means 16 bit ones.
3403: F20F     CD74ED     	CALL	ADDA2HL	;(HL)=(HL)+(A)
3404: F212     73         	MOV	M,E	;store new block number.
3405: F213     C31EF2     	JMP	WTSEQ5         
3406: F216                WTSEQ4:             
3407: F216     4F         	MOV	C,A	;compute spot in this 16 bit table.
3408: F217     0600       	MVI	B,0            
3409: F219     09         	DAD	B              
3410: F21A     09         	DAD	B              
3411: F21B     73         	MOV	M,E	;stuff block number (DE) there.
3412: F21C     23         	INX	H              
3413: F21D     72         	MOV	M,D            
3414: F21E                WTSEQ5:             
3415: F21E     0E02       	MVI	C,2	;set (C) to indicate writing to un-used disk space.
3416: F220                WTSEQ6:             
3417: F220     3A3FE8     	LDA	StatusBDOSReturn	;are we ok so far?
3418: F223     B7         	ORA	A              
3419: F224     C0         	RNZ                
3420: F225     C5         	PUSH	B	;yes, save write flag for bios (register C).
3421: F226     CDADEC     	CALL	LOGICAL	;convert (BLKNMBR) over to loical sectors.
3422: F229     3AD0F5     	LDA	MODE	;get access mode flag (1=sequential,
3423: F22C     3D         	DCR	A	;0=random, 2=special?).
3424: F22D     3D         	DCR	A              
3425: F22E     C26DF2     	JNZ	WTSEQ9         
3426: F231                ;                   
3427: F231                ;   Special random i/o from function #40. Maybe for M/PM, but the
3428: F231                ; current block, if it has not been written to, will be zeroed
3429: F231                ; out and then written (reason?).
3430: F231                ;                   
3431: F231     C1         	POP	B              
3432: F232     C5         	PUSH	B             
3433: F233     79         	MOV	A,C	;get write status flag (2=writing unused space).
3434: F234     3D         	DCR	A              
3435: F235     3D         	DCR	A              
3436: F236     C26DF2     	JNZ	WTSEQ9         
3437: F239     E5         	PUSH	H             
3438: F23A     2AB4F5     	LHLD	DIRBUF	;zero out the directory buffer.
3439: F23D     57         	MOV	D,A	;note that (A) is zero here.
3440: F23E                WTSEQ7:             
3441: F23E     77         	MOV	M,A            
3442: F23F     23         	INX	H              
3443: F240     14         	INR	D	;do 128 bytes.
3444: F241     F23EF2     	JP	WTSEQ7          
3445: F244     CDF0ED     	CALL	SetDirDMA	;tell the bios the dma address for directory access.
3446: F247     2AE1F5     	LHLD	LOGSECT	;get sector that starts current block.
3447: F24A     0E02       	MVI	C,2	;set 'writing to unused space' flag.
3448: F24C                WTSEQ8:             
3449: F24C     22DFF5     	SHLD	BLKNMBR	;save sector to write.
3450: F24F     C5         	PUSH	B             
3451: F250     CDF4EB     	CALL	TRKSEC1	;determine its track and sector numbers.
3452: F253     C1         	POP	B              
3453: F254     CDDBEB     	CALL	DOWRITE	;now write out 128 bytes of zeros.
3454: F257     2ADFF5     	LHLD	BLKNMBR	;get sector number.
3455: F25A     0E00       	MVI	C,0	;set normal write flag.
3456: F25C     3ABFF5     	LDA	BLKMASK	;determine if we have written the entire
3457: F25F     47         	MOV	B,A	;physical block.
3458: F260     A5         	ANA	L              
3459: F261     B8         	CMP	B              
3460: F262     23         	INX	H	;prepare for the next one.
3461: F263     C24CF2     	JNZ	WTSEQ8	;continue until (BLKMASK+1) sectors written.
3462: F266     E1         	POP	H	;reset next sector number.
3463: F267     22DFF5     	SHLD	BLKNMBR       
3464: F26A     CDEAED     	CALL	Set2UsersDMA	;and reset dma address.
3465: F26D                ;                   
3466: F26D                ;   Normal disk write. Set the desired track and sector then
3467: F26D                ; do the actual write.
3468: F26D                ;                   
3469: F26D                WTSEQ9:             
3470: F26D     CDF4EB     	CALL	TRKSEC1	;determine track and sector for this write.
3471: F270     C1         	POP	B	;get write status flag.
3472: F271     C5         	PUSH	B             
3473: F272     CDDBEB     	CALL	DOWRITE	;and write this out.
3474: F275     C1         	POP	B              
3475: F276     3ADDF5     	LDA	SAVNREC	;get number of records in file.
3476: F279     21DBF5     	LXI	H,SAVNXT;get last record written.
3477: F27C     BE         	CMP	M              
3478: F27D     DA84F2     	JC	WTSEQ10         
3479: F280     77         	MOV	M,A	;we have to update record count.
3480: F281     34         	INR	M              
3481: F282     0E02       	MVI	C,2            
3482: F284                ;                   
3483: F284                ;*   This area has been patched to correct disk update problem
3484: F284                ;* when using blocking and de-blocking in the BIOS.
3485: F284                ;                   
3486: F284                WTSEQ10:            
3487: F284     00         	NOP		;was 'dcr c'  
3488: F285     00         	NOP		;was 'dcr c'  
3489: F286     210000     	LXI	H,0	;was 'jnz wtseq99'
3490: F289                ;                   
3491: F289                ; *   End of patch. 
3492: F289                ;                   
3493: F289     F5         	PUSH	PSW           
3494: F28A     CD79ED     	CALL	GETS2	;set 'extent written to' flag.
3495: F28D     E67F       	ANI	7FH	;(* clear bit 7 *)
3496: F28F     77         	MOV	M,A            
3497: F290     F1         	POP	PSW	;get record count for this extent.
3498: F291                WTSEQ99:            
3499: F291     FE7F       	CPI	127	;is it full?
3500: F293     C2B2F2     	JNZ	WTSEQ12        
3501: F296     3AD0F5     	LDA	MODE	;yes, are we in sequential mode?
3502: F299     FE01       	CPI	1              
3503: F29B     C2B2F2     	JNZ	WTSEQ12        
3504: F29E     CDF5EC     	CALL	SETNREC	;yes, set next record number.
3505: F2A1     CD0CF1     	CALL	GETNEXT	;and get next empty space in directory.
3506: F2A4     213FE8     	LXI	H,StatusBDOSReturn;ok?
3507: F2A7     7E         	MOV	A,M            
3508: F2A8     B7         	ORA	A              
3509: F2A9     C2B0F2     	JNZ	WTSEQ11        
3510: F2AC     3D         	DCR	A	;yes, set record count to -1.
3511: F2AD     32DDF5     	STA	SAVNREC        
3512: F2B0                WTSEQ11:            
3513: F2B0     3600       	MVI	M,0	;clear status.
3514: F2B2                WTSEQ12:            
3515: F2B2     C3F5EC     	JMP	SETNREC	;set next record to access.
3516: F2B5                ;                   
3517: F2B5                ;   For random i/o, set the fcb for the desired record number
3518: F2B5                ; based on the 'r0,r1,r2' bytes. These bytes in the fcb are
3519: F2B5                ; used as follows:  
3520: F2B5                ;                   
3521: F2B5                ;       fcb+35            fcb+34            fcb+33
3522: F2B5                ;  |     'r-2'      |      'r-1'      |      'r-0'     |
3523: F2B5                ;  |7             0 | 7             0 | 7             0|
3524: F2B5                ;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
3525: F2B5                ;  |    overflow   | | extra |  extent   |   record #  |
3526: F2B5                ;  | ______________| |_extent|__number___|_____________|
3527: F2B5                ;                     also 's2'
3528: F2B5                ;                   
3529: F2B5                ;   On entry, register (C) contains 0ffh if this is a read
3530: F2B5                ; and thus we can not access unwritten disk space. Otherwise,
3531: F2B5                ; another extent will be opened (for writing) if required.
3532: F2B5                ;                   
3533: F2B5                POSITION:           
3534: F2B5     AF         	XRA	A	;set random i/o flag.
3535: F2B6     32D0F5     	STA	MODE           
3536: F2B9                ;                   
3537: F2B9                ;   Special entry (function #40). M/PM ?
3538: F2B9                ;                   
3539: F2B9                POSITN1:            
3540: F2B9     C5         	PUSH	B	;save read/write flag.
3541: F2BA     2A3CE8     	LHLD	ParamsDE	;get address of fcb.
3542: F2BD     EB         	XCHG               
3543: F2BE     212100     	LXI	H,33	;now get byte 'r0'.
3544: F2C1     19         	DAD	D              
3545: F2C2     7E         	MOV	A,M            
3546: F2C3     E67F       	ANI	7FH	;keep bits 0-6 for the record number to access.
3547: F2C5     F5         	PUSH	PSW           
3548: F2C6     7E         	MOV	A,M	;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
3549: F2C7     17         	RAL                
3550: F2C8     23         	INX	H              
3551: F2C9     7E         	MOV	A,M            
3552: F2CA     17         	RAL                
3553: F2CB     E61F       	ANI	1FH	;and save this in bits 0-4 of (C).
3554: F2CD     4F         	MOV	C,A	;this is the extent byte.
3555: F2CE     7E         	MOV	A,M	;now get the extra extent byte.
3556: F2CF     1F         	RAR                
3557: F2D0     1F         	RAR                
3558: F2D1     1F         	RAR                
3559: F2D2     1F         	RAR                
3560: F2D3     E60F       	ANI	0FH            
3561: F2D5     47         	MOV	B,A	;and save it in (B).
3562: F2D6     F1         	POP	PSW	;get record number back to (A).
3563: F2D7     23         	INX	H	;check overflow byte 'r2'.
3564: F2D8     6E         	MOV	L,M            
3565: F2D9     2C         	INR	L              
3566: F2DA     2D         	DCR	L              
3567: F2DB     2E06       	MVI	L,6	;prepare for error.
3568: F2DD     C23DF3     	JNZ	POSITN5	;out of disk space error.
3569: F2E0     212000     	LXI	H,32	;store record number into fcb.
3570: F2E3     19         	DAD	D              
3571: F2E4     77         	MOV	M,A            
3572: F2E5     210C00     	LXI	H,12	;and now check the extent byte.
3573: F2E8     19         	DAD	D              
3574: F2E9     79         	MOV	A,C            
3575: F2EA     96         	SUB	M	;same extent as before?
3576: F2EB     C2F9F2     	JNZ	POSITN2        
3577: F2EE     210E00     	LXI	H,14	;yes, check extra extent byte 's2' also.
3578: F2F1     19         	DAD	D              
3579: F2F2     78         	MOV	A,B            
3580: F2F3     96         	SUB	M              
3581: F2F4     E67F       	ANI	7FH            
3582: F2F6     CA31F3     	JZ	POSITN3;same, we are almost done then.
3583: F2F9                ;                   
3584: F2F9                ;  Get here when another extent is required.
3585: F2F9                ;                   
3586: F2F9                POSITN2:            
3587: F2F9     C5         	PUSH	B             
3588: F2FA     D5         	PUSH	D             
3589: F2FB     CD54F0     	CALL	CLOSEIT	;close current extent.
3590: F2FE     D1         	POP	D              
3591: F2FF     C1         	POP	B              
3592: F300     2E03       	MVI	L,3	;prepare for error.
3593: F302     3A3FE8     	LDA	StatusBDOSReturn
3594: F305     3C         	INR	A              
3595: F306     CA36F3     	JZ	POSITN4	;close error.
3596: F309     210C00     	LXI	H,12	;put desired extent into fcb now.
3597: F30C     19         	DAD	D              
3598: F30D     71         	MOV	M,C            
3599: F30E     210E00     	LXI	H,14	;and store extra extent byte 's2'.
3600: F311     19         	DAD	D              
3601: F312     70         	MOV	M,B            
3602: F313     CD03F0     	CALL	OPENIT	;try and get this extent.
3603: F316     3A3FE8     	LDA	StatusBDOSReturn	;was it there?
3604: F319     3C         	INR	A              
3605: F31A     C231F3     	JNZ	POSITN3        
3606: F31D     C1         	POP	B	;no. can we create a new one (writing?).
3607: F31E     C5         	PUSH	B             
3608: F31F     2E04       	MVI	L,4	;prepare for error.
3609: F321     0C         	INR	C              
3610: F322     CA36F3     	JZ	POSITN4	;nope, reading unwritten space error.
3611: F325     CDD6F0     	CALL	GETEMPTY;yes we can, try to find space.
3612: F328     2E05       	MVI	L,5	;prepare for error.
3613: F32A     3A3FE8     	LDA	StatusBDOSReturn
3614: F32D     3C         	INR	A              
3615: F32E     CA36F3     	JZ	POSITN4	;out of space?
3616: F331                ;                   
3617: F331                ;   Normal return location. Clear error code and return.
3618: F331                ;                   
3619: F331                POSITN3:            
3620: F331     C1         	POP	B	;restore stack.
3621: F332     AF         	XRA	A	;and clear error code byte.
3622: F333     C35CEB     	JMP	SETSTAT        
3623: F336                ;                   
3624: F336                ;   Error. Set the 's2' byte to indicate this (why?).
3625: F336                ;                   
3626: F336                POSITN4:            
3627: F336     E5         	PUSH	H             
3628: F337     CD79ED     	CALL	GETS2         
3629: F33A     36C0       	MVI	M,0C0H         
3630: F33C     E1         	POP	H              
3631: F33D                ;                   
3632: F33D                ;   Return with error code (presently in L).
3633: F33D                ;                   
3634: F33D                POSITN5:            
3635: F33D     C1         	POP	B              
3636: F33E     7D         	MOV	A,L	;get error code.
3637: F33F     323FE8     	STA	StatusBDOSReturn
3638: F342     C388ED     	JMP	SETS2B7        
3639: F345                ;                   
3640: F345                ;   Read a random record.
3641: F345                ;                   
3642: F345                READRAN:            
3643: F345     0EFF       	MVI	C,0FFH	;set 'read' status.
3644: F347     CDB5F2     	CALL	POSITION;position the file to proper record.
3645: F34A     CC73F1     	CZ	RDSEQ1	;and read it as usual (if no errors).
3646: F34D     C9         	RET                
3647: F34E                ;                   
3648: F34E                ;   Write to a random record.
3649: F34E                ;                   
3650: F34E                WRITERAN:           
3651: F34E     0E00       	MVI	C,0	;set 'writing' flag.
3652: F350     CDB5F2     	CALL	POSITION;position the file to proper record.
3653: F353     CCB5F1     	CZ	WTSEQ1	;and write as usual (if no errors).
3654: F356     C9         	RET                
3655: F357                ;                   
3656: F357                ;   Compute the random record number. Enter with (HL) pointing
3657: F357                ; to a fcb an (DE) contains a relative location of a record
3658: F357                ; number. On exit, (C) contains the 'r0' byte, (B) the 'r1'
3659: F357                ; byte, and (A) the 'r2' byte.
3660: F357                ;                   
3661: F357                ;   On return, the zero flag is set if the record is within
3662: F357                ; bounds. Otherwise, an overflow occured.
3663: F357                ;                   
3664: F357                COMPRAND:           
3665: F357     EB         	XCHG		;save fcb pointer in (DE).
3666: F358     19         	DAD	D	;compute relative position of record #.
3667: F359     4E         	MOV	C,M	;get record number into (BC).
3668: F35A     0600       	MVI	B,0            
3669: F35C     210C00     	LXI	H,12	;now get extent.
3670: F35F     19         	DAD	D              
3671: F360     7E         	MOV	A,M	;compute (BC)=(record #)+(extent)*128.
3672: F361     0F         	RRC		;move lower bit into bit 7.
3673: F362     E680       	ANI	80H	;and ignore all other bits.
3674: F364     81         	ADD	C	;add to our record number.
3675: F365     4F         	MOV	C,A            
3676: F366     3E00       	MVI	A,0	;take care of any carry.
3677: F368     88         	ADC	B              
3678: F369     47         	MOV	B,A            
3679: F36A     7E         	MOV	A,M	;now get the upper bits of extent into
3680: F36B     0F         	RRC		;bit positions 0-3.
3681: F36C     E60F       	ANI	0FH	;and ignore all others.
3682: F36E     80         	ADD	B	;add this in to 'r1' byte.
3683: F36F     47         	MOV	B,A            
3684: F370     210E00     	LXI	H,14	;get the 's2' byte (extra extent).
3685: F373     19         	DAD	D              
3686: F374     7E         	MOV	A,M            
3687: F375     87         	ADD	A	;and shift it left 4 bits (bits 4-7).
3688: F376     87         	ADD	A              
3689: F377     87         	ADD	A              
3690: F378     87         	ADD	A              
3691: F379     F5         	PUSH	PSW	;save carry flag (bit 0 of flag byte).
3692: F37A     80         	ADD	B	;now add extra extent into 'r1'.
3693: F37B     47         	MOV	B,A            
3694: F37C     F5         	PUSH	PSW	;and save carry (overflow byte 'r2').
3695: F37D     E1         	POP	H	;bit 0 of (L) is the overflow indicator.
3696: F37E     7D         	MOV	A,L            
3697: F37F     E1         	POP	H	;and same for first carry flag.
3698: F380     B5         	ORA	L	;either one of these set?
3699: F381     E601       	ANI	01H	;only check the carry flags.
3700: F383     C9         	RET                
3701: F384                ;                   
3702: F384                ;   Routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
3703: F384                ; reflect the last record used for a random (or other) file.
3704: F384                ; This reads the directory and looks at all extents computing
3705: F384                ; the largerst record number for each and keeping the maximum
3706: F384                ; value only. Then 'r0', 'r1', and 'r2' will reflect this
3707: F384                ; maximum record number. This is used to compute the space used
3708: F384                ; by a random file. 
3709: F384                ;                   
3710: F384                RANSIZE:            
3711: F384     0E0C       	MVI	C,12	;look thru directory for first entry with
3712: F386     CDCAEE     	CALL	FINDFST	;this name.
3713: F389     2A3CE8     	LHLD	ParamsDE	;zero out the 'r0, r1, r2' bytes.
3714: F38C     112100     	LXI	D,33           
3715: F38F     19         	DAD	D              
3716: F390     E5         	PUSH	H             
3717: F391     72         	MOV	M,D	;note that (D)=0.
3718: F392     23         	INX	H              
3719: F393     72         	MOV	M,D            
3720: F394     23         	INX	H              
3721: F395     72         	MOV	M,D            
3722: F396                RANSIZ1:            
3723: F396     CD05EE     	CALL	CKFILPOS;is there an extent to process?
3724: F399     CABEF3     	JZ	RANSIZ3	;no, we are done.
3725: F39C     CD6EED     	CALL	FCB2HL	;set (HL) pointing to proper fcb in dir.
3726: F39F     110F00     	LXI	D,15	;point to last record in extent.
3727: F3A2     CD57F3     	CALL	COMPRAND;and compute random parameters.
3728: F3A5     E1         	POP	H              
3729: F3A6     E5         	PUSH	H	;now check these values against those
3730: F3A7     5F         	MOV	E,A	;already in fcb.
3731: F3A8     79         	MOV	A,C	;the carry flag will be set if those
3732: F3A9     96         	SUB	M	;in the fcb represent a larger size than
3733: F3AA     23         	INX	H	;this extent does.
3734: F3AB     78         	MOV	A,B            
3735: F3AC     9E         	SBB	M              
3736: F3AD     23         	INX	H              
3737: F3AE     7B         	MOV	A,E            
3738: F3AF     9E         	SBB	M              
3739: F3B0     DAB8F3     	JC	RANSIZ2         
3740: F3B3     73         	MOV	M,E	;we found a larger (in size) extent.
3741: F3B4     2B         	DCX	H	;stuff these values into fcb.
3742: F3B5     70         	MOV	M,B            
3743: F3B6     2B         	DCX	H              
3744: F3B7     71         	MOV	M,C            
3745: F3B8                RANSIZ2:            
3746: F3B8     CDDFEE     	CALL	FINDNXT	;now get the next extent.
3747: F3BB     C396F3     	JMP	RANSIZ1	;continue til all done.
3748: F3BE                RANSIZ3:            
3749: F3BE     E1         	POP	H	;we are done, restore the stack and
3750: F3BF     C9         	RET		;return.      
3751: F3C0                ;                   
3752: F3C0                ;   Function to return the random record position of a given
3753: F3C0                ; file which has been read in sequential mode up to now.
3754: F3C0                ;                   
3755: F3C0                SETRAN:             
3756: F3C0     2A3CE8     	LHLD	ParamsDE	;point to fcb.
3757: F3C3     112000     	LXI	D,32	;and to last used record.
3758: F3C6     CD57F3     	CALL	COMPRAND;compute random position.
3759: F3C9     212100     	LXI	H,33	;now stuff these values into fcb.
3760: F3CC     19         	DAD	D              
3761: F3CD     71         	MOV	M,C	;move 'r0'.
3762: F3CE     23         	INX	H              
3763: F3CF     70         	MOV	M,B	;and 'r1'. 
3764: F3D0     23         	INX	H              
3765: F3D1     77         	MOV	M,A	;and lastly 'r2'.
3766: F3D2     C9         	RET                
3767: F3D3                ;                   
3768: F3D3                ; This routine selects the drive specified in (CurrentDrive) and
3769: F3D3                ; updates the login vector and bitmap table if this drive was
3770: F3D3                ; not already active.
3771: F3D3                ;                   
3772: F3D3                LoginDrive:         
3773: F3D3     2AAAF5     	LHLD	LoggedBitMap		; point at the "logged In" Bitmap.
3774: F3D6     3AA6F5     	LDA		CurrentDrive		; get the Subject Drive.
3775: F3D9     4F         	MOV		C,A					; Save current drive
3776: F3DA     CD0DED     	CALL	SHIFTR				; Return with CurrentDrive's bit in L's lsb (byte 0)
3777: F3DD     E5         	PUSH	H					; Save it, so we will know if it is already active
3778: F3DE     EB         	XCHG               
3779: F3DF     CD7CEB     	CALL	SelectDisk			; select this drive (in BIOS).
3780: F3E2     CA6AEB     	JZ		SLCTERR				; If not valid then error exit outta here
3781: F3E5     E1         	POP	H						; retreive original state of the drive
3782: F3E6     7D         	MOV	A,L						; and put it into (A) 
3783: F3E7     1F         	RAR							; move the lsb (bit 0) into the carry flag		
3784: F3E8     D8         	RC							; if its set then this drive has already been activated
3785: F3E9                							;No, then update the logged Bitmap to reflect this drive.
3786: F3E9     2AAAF5     	LHLD	LoggedBitMap		
3787: F3EC     4D         	MOV		C,L           
3788: F3ED     44         	MOV		B,H					; put the map into (BC)
3789: F3EE     CD52F4     	CALL	SETBIT				; Set it in the LoggedBitMap
3790: F3F1     22AAF5     	SHLD	LoggedBitMap		; and save the Bit map.
3791: F3F4                ;	JMP	BITMAP	;now update the bitmap.
3792: F3F4                ;-----------------------------------------------------------
3793: F3F4                ;                   
3794: F3F4                ;   Construct the space used allocation bit map for the active
3795: F3F4                ; drive. If a file name starts with '$' and it is under the
3796: F3F4                ; current user number, then (StatusBDOSReturn) is set to minus 1. Otherwise
3797: F3F4                ; it is not set at all.
3798: F3F4                ;                   
3799: F3F4                BITMAP:             
3800: F3F4                								;compute size of allocation table.
3801: F3F4     2AC1F5     	LHLD		DSKSIZE		; get maximum  Allocation Block number
3802: F3F7     0E03       	MVI			C,3			; 2 raised to 3rd power = 8
3803: F3F9     CD0DED     	CALL		SHIFTR		;(HL)=(HL)/8.
3804: F3FC     23         	INX			H			;at lease 1 byte.
3805: F3FD     44         	MOV			B,H          
3806: F3FE     4D         	MOV			C,L			;set (BC) to the allocation table length.
3807: F3FF                ;                   
3808: F3FF                ;   Initialize the bitmap for this drive. Right now, the first
3809: F3FF                ; two bytes are specified by the disk parameter block. However
3810: F3FF                ; a patch could be entered here if it were necessary to setup
3811: F3FF                ; this table in a special mannor. For example, the bios could
3812: F3FF                ; determine locations of 'bad blocks' and set them as already
3813: F3FF                ; 'used' in the map.
3814: F3FF                ;                   
3815: F3FF     2ABAF5     	LHLD		ALOCVECT	;now zero out the table now.
3816: F402                BITMAP1:            
3817: F402     3600       	MVI			M,0			; put zero in vector
3818: F404     23         	INX			H			; point at next locatio
3819: F405     0B         	DCX			B			; count down
3820: F406     78         	MOV			A,B          
3821: F407     B1         	ORA			C			; equals zero if both (B) and (B) are Zero
3822: F408     C202F4     	JNZ			BITMAP1		; loop for more
3823: F40B     2AC5F5     	LHLD		ALLOC0		;get initial space used by directory.
3824: F40E     EB         	XCHG               
3825: F40F     2ABAF5     	LHLD	ALOCVECT;and put this into map.
3826: F412     73         	MOV	M,E            
3827: F413     23         	INX	H              
3828: F414     72         	MOV	M,D            
3829: F415                ;                   
3830: F415                ;   End of initialization portion.
3831: F415                ;                   
3832: F415     CDC4EB     	CALL	HOMEDRV	;now home the drive.
3833: F418     2AAEF5     	LHLD	FilePosInDir  
3834: F41B     3603       	MVI	M,3	;force next directory request to read
3835: F41D     23         	INX	H	;in a sector.
3836: F41E     3600       	MVI	M,0            
3837: F420     CD0EEE     	CALL	STFILPOS;clear initial file position also.
3838: F423                BITMAP2:            
3839: F423     0EFF       	MVI	C,0FFH	;read next file name in directory
3840: F425     CD15EE     	CALL	NXENTRY	;and set checksum byte.
3841: F428     CD05EE     	CALL	CKFILPOS;is there another file?
3842: F42B     C8         	RZ                 
3843: F42C     CD6EED     	CALL	FCB2HL	;yes, get its address.
3844: F42F     3EE5       	MVI	A,0E5H         
3845: F431     BE         	CMP	M	;empty file entry?
3846: F432     CA23F4     	JZ	BITMAP2         
3847: F435     3AA5F5     	LDA	CurrentUser;no, correct user number?
3848: F438     BE         	CMP	M              
3849: F439     C247F4     	JNZ	BITMAP3        
3850: F43C     23         	INX	H              
3851: F43D     7E         	MOV	A,M	;yes, does name start with a '$'?
3852: F43E     D624       	SUI	DOLLAR		; '$'  
3853: F440     C247F4     	JNZ	BITMAP3        
3854: F443     3D         	DCR	A	;yes, set atatus to minus one.
3855: F444     323FE8     	STA	StatusBDOSReturn
3856: F447                BITMAP3:            
3857: F447     0E01       	MVI	C,1	;now set this file's space as used in bit map.
3858: F449     CD7BEE     	CALL	SETFILE       
3859: F44C     CD9CED     	CALL	CHKNMBR	;keep (FilePosInDir) in bounds.
3860: F44F     C323F4     	JMP	BITMAP2        
3861: F452                ;-----------------------------------------------------------
3862: F452                ;                   
3863: F452                ;  Routine to set a bit in a 16 bit value contained in (BC).
3864: F452                ; The bit set depends on the current drive selection.
3865: F452                ;                   
3866: F452                SETBIT:             
3867: F452     C5         	PUSH	B					;save original bit (BC)
3868: F453     3AA6F5     	LDA		CurrentDrive		;get active drive.
3869: F456     4F         	MOV		C,A           
3870: F457     210100     	LXI		H,1           
3871: F45A     CD27ED     	CALL	SHIFTL				;shift bit into place for Drive bit .
3872: F45D     C1         	POP		B					;now 'or' this with the original word.
3873: F45E     79         	MOV		A,C           
3874: F45F     B5         	ORA		L             
3875: F460     6F         	MOV		L,A					;low byte done, do high byte.
3876: F461     78         	MOV		A,B           
3877: F462     B4         	ORA		H             
3878: F463     67         	MOV		H,A           
3879: F464     C9         	RET							; HL has the result
3880: F465                ;                   
3881: F465                ;   Function to set the active disk number.
3882: F465                ;                   
3883: F465                SETDSK:             
3884: F465     3A3EE8     	LDA	ParamE	;get parameter passed and see if this
3885: F468     21A6F5     	LXI	H,CurrentDrive;represents a change in drives.
3886: F46B     BE         	CMP	M              
3887: F46C     C8         	RZ                 
3888: F46D     77         	MOV	M,A	;yes it does, log it in.
3889: F46E     C3D3F3     	JMP	LoginDrive     
3890: F471                ;                   
3891: F471                ;   This is the 'auto disk select' routine. The firsst byte
3892: F471                ; of the fcb is examined for a drive specification. If non
3893: F471                ; zero then the drive will be selected and loged in.
3894: F471                ;                   
3895: F471                AUTOSEL:            
3896: F471     3EFF       	MVI		A,0FFH			;say 'auto-select activated'.
3897: F473     32D8F5     	STA		AutoSelectActive
3898: F476     2A3CE8     	LHLD	ParamsDE		;get drive specified.
3899: F479     7E         	MOV		A,M           
3900: F47A     E61F       	ANI		1FH				;look at lower 5 bits.
3901: F47C     3D         	DCR		A				;adjust for (1=A, 2=B) etc.
3902: F47D     323EE8     	STA		ParamE			;and save for the select routine.
3903: F480     FE1E       	CPI		1EH				;check for 'no change' condition.
3904: F482     D295F4     	JNC		AUTOSL1			;yes, don't change.
3905: F485     3AA6F5     	LDA		CurrentDrive	;we must change, save currently active
3906: F488     32D9F5     	STA		OLDDRV			;drive.
3907: F48B     7E         	MOV		A,M				;and save first byte of fcb also.
3908: F48C     32DAF5     	STA		AutoSelectFlag	;this must be non-zero.
3909: F48F     E6E0       	ANI		0E0H			;whats this for (bits 6,7 are used for
3910: F491     77         	MOV		M,A				;something)?
3911: F492     CD65F4     	CALL	SETDSK			;select and log in this drive.
3912: F495                AUTOSL1:            
3913: F495     3AA5F5     	LDA		CurrentUser		;move user number into fcb.
3914: F498     2A3CE8     	LHLD	ParamsDE		;(* upper half of first byte *)
3915: F49B     B6         	ORA		M             
3916: F49C     77         	MOV		M,A           
3917: F49D     C9         	RET		;and return (all done).
3918: F49E                ;                   
3919: F49E                ;   Function to return the current cp/m version number.
3920: F49E                ;                   
3921: F49E                GETVER:             
3922: F49E     3E22       	MVI	A,022h	;version 2.2
3923: F4A0     C35CEB     	JMP	SETSTAT        
3924: F4A3                ;                   
3925: F4A3                ;   Function (0D) to reset the disk system.
3926: F4A3                ;                   
3927: F4A3                RSTDSK:             
3928: F4A3     210000     	LXI		H,0				; clear write protect status and log
3929: F4A6     22A8F5     	SHLD	ROBitMap		; clear All Read Only Bits
3930: F4A9     22AAF5     	SHLD	LoggedBitMap	; clear all logged in drives
3931: F4AC     AF         	XRA		A             
3932: F4AD     32A6F5     	STA		CurrentDrive	;select drive 'A'.
3933: F4B0     218000     	LXI		H,Pg0Buffer		;setup default dma address.
3934: F4B3     22ACF5     	SHLD	UsersDMA      
3935: F4B6     CDEAED     	CALL	Set2UsersDMA	; Call BIOS to set DMAA 
3936: F4B9     C3D3F3     	JMP		LoginDrive		;now log in drive 'A'.
3937: F4BC                ;                   
3938: F4BC                ;   Function to open a specified file.
3939: F4BC                ;                   
3940: F4BC                OPENFIL:            
3941: F4BC     CD82ED     	CALL	CLEARS2	;clear 's2' byte.
3942: F4BF     CD71F4     	CALL	AUTOSEL	;select proper disk.
3943: F4C2     C303F0     	JMP	OPENIT	;and open the file.
3944: F4C5                ;                   
3945: F4C5                ;   Function to close a specified file.
3946: F4C5                ;                   
3947: F4C5                CLOSEFIL:           
3948: F4C5     CD71F4     	CALL	AUTOSEL	;select proper disk.
3949: F4C8     C354F0     	JMP	CLOSEIT	;and close the file.
3950: F4CB                ;                   
3951: F4CB                ;   Function to return the first occurence of a specified file
3952: F4CB                ; name. If the first byte of the fcb is '?' then the name will
3953: F4CB                ; not be checked (get the first entry no matter what).
3954: F4CB                ;                   
3955: F4CB                GETFST:             
3956: F4CB     0E00       	MVI	C,0	;prepare for special search.
3957: F4CD     EB         	XCHG               
3958: F4CE     7E         	MOV	A,M	;is first byte a '?'?
3959: F4CF     FE3F       	CPI	QMARK		;'?'    
3960: F4D1     CAE2F4     	JZ	GETFST1	;yes, just get very first entry (zero length match).
3961: F4D4     CDC9EC     	CALL	SETEXT	;get the extension byte from fcb.
3962: F4D7     7E         	MOV	A,M	;is it '?'? if yes, then we want
3963: F4D8     FE3F       	CPI	QMARK		; '?'	;an entry with a specific 's2' byte.
3964: F4DA     C482ED     	CNZ	CLEARS2	;otherwise, look for a zero 's2' byte.
3965: F4DD     CD71F4     	CALL	AUTOSEL	;select proper drive.
3966: F4E0     0E0F       	MVI	C,15	;compare bytes 0-14 in fcb (12&13 excluded).
3967: F4E2                GETFST1:            
3968: F4E2     CDCAEE     	CALL	FINDFST	;find an entry and then move it into
3969: F4E5     C3F9ED     	JMP	MOVEDIR	;the users dma space.
3970: F4E8                ;                   
3971: F4E8                ;   Function to return the next occurence of a file name.
3972: F4E8                ;                   
3973: F4E8                GETNXT:             
3974: F4E8     2AD3F5     	LHLD	SAVEFCB	;restore pointers. note that no
3975: F4EB     223CE8     	SHLD	ParamsDE	;other dbos calls are allowed.
3976: F4EE     CD71F4     	CALL	AUTOSEL	;no error will be returned, but the
3977: F4F1     CDDFEE     	CALL	FINDNXT	;results will be wrong.
3978: F4F4     C3F9ED     	JMP	MOVEDIR        
3979: F4F7                ;                   
3980: F4F7                ;   Function to delete a file by name.
3981: F4F7                ;                   
3982: F4F7                DELFILE:            
3983: F4F7     CD71F4     	CALL	AUTOSEL		;select proper drive.
3984: F4FA     CD4EEF     	CALL	ERAFILE		;erase the file.
3985: F4FD     C3B3EE     	JMP		STSTATUS	;set status and return.
3986: F500                ;                   
3987: F500                ;   Function to execute a sequential read of the specified
3988: F500                ; record number.    
3989: F500                ;                   
3990: F500                READSEQ:            
3991: F500     CD71F4     	CALL	AUTOSEL	;select proper drive then read.
3992: F503     C36EF1     	JMP	RDSEQ          
3993: F506                ;                   
3994: F506                ;   Function to write the net sequential record.
3995: F506                ;                   
3996: F506                WRTSEQ:             
3997: F506     CD71F4     	CALL	AUTOSEL	;select proper drive then write.
3998: F509     C3B0F1     	JMP	WTSEQ          
3999: F50C                ;                   
4000: F50C                ;   Create a file function.
4001: F50C                ;                   
4002: F50C                FCREATE:            
4003: F50C     CD82ED     	CALL	CLEARS2	;clear the 's2' byte ( extents counter hi byte).
4004: F50F     CD71F4     	CALL	AUTOSEL	;select proper drive and get the next
4005: F512     C3D6F0     	JMP		GETEMPTY;empty directory space.
4006: F515                ;                   
4007: F515                ;   Function to rename a file.
4008: F515                ;                   
4009: F515                RENFILE:            
4010: F515     CD71F4     	CALL	AUTOSEL	;select proper drive and then switch
4011: F518     CDC8EF     	CALL	CHGNAMES;file names.
4012: F51B     C3B3EE     	JMP	STSTATUS       
4013: F51E                ;                   
4014: F51E                ;   Function to return the logged in Bit map.
4015: F51E                ;                   
4016: F51E                GETLOG:             
4017: F51E     2AAAF5     	LHLD	LoggedBitMap  
4018: F521     C349F5     	JMP	GETPRM1        
4019: F524                ;                   
4020: F524                ;   Function to return the current disk assignment.
4021: F524                ;                   
4022: F524                GETCRNT:            
4023: F524     3AA6F5     	LDA	CurrentDrive   
4024: F527     C35CEB     	JMP	SETSTAT        
4025: F52A                ;                   
4026: F52A                ;   Function to set the dma address.
4027: F52A                ;                   
4028: F52A                PUTDMA:             
4029: F52A     EB         	XCHG               
4030: F52B     22ACF5     	SHLD	UsersDMA	;save in our space and then get to
4031: F52E     C3EAED     	JMP	Set2UsersDMA	;the bios with this also.
4032: F531                ;                   
4033: F531                ;   Function to return the allocation vector.
4034: F531                ;                   
4035: F531                GETALOC:            
4036: F531     2ABAF5     	LHLD	ALOCVECT      
4037: F534     C349F5     	JMP	GETPRM1        
4038: F537                ;                   
4039: F537                ;   Function to return the read-only status vector.
4040: F537                ;                   
4041: F537                GETROV:             
4042: F537     2AA8F5     	LHLD	ROBitMap      
4043: F53A     C349F5     	JMP	GETPRM1        
4044: F53D                ;                   
4045: F53D                ;   Function to set the file attributes (read-only, system).
4046: F53D                ;                   
4047: F53D                SETATTR:            
4048: F53D     CD71F4     	CALL	AUTOSEL	;select proper drive then save attributes.
4049: F540     CDEDEF     	CALL	SAVEATTR      
4050: F543     C3B3EE     	JMP	STSTATUS       
4051: F546                ;                   
4052: F546                ;   Function to return the address of the disk parameter block
4053: F546                ; for the current drive.
4054: F546                ;                   
4055: F546                GETPARM:            
4056: F546     2AB6F5     	LHLD	DISKPB        
4057: F549                GETPRM1:            
4058: F549     223FE8     	SHLD	StatusBDOSReturn
4059: F54C     C9         	RET                
4060: F54D                ;                   
4061: F54D                ;   Function to get or set the user number. If (E) was (FF)
4062: F54D                ; then this is a request to return the current user number.
4063: F54D                ; Else set the user number from (E).
4064: F54D                ;                   
4065: F54D                GETUSER:            
4066: F54D     3A3EE8     	LDA			ParamE			; get parameter.
4067: F550     FEFF       	CPI			0FFH			; want to get user number?
4068: F552     C25BF5     	JNZ			SETUSER			; No, then set it
4069: F555     3AA5F5     	LDA			CurrentUser		;yes, just return it in A
4070: F558     C35CEB     	JMP			SETSTAT			; exit while setting return status
4071: F55B                	                   
4072: F55B                SETUSER:            
4073: F55B     E61F       	ANI			1FH				;no,just keep the low bits (000X XXXX)
4074: F55D     32A5F5     	STA			CurrentUser		;and save in Current user
4075: F560     C9         	RET                
4076: F561                ;                   
4077: F561                ;   Function to read a random record from a file.
4078: F561                ;                   
4079: F561                RDRANDOM:           
4080: F561     CD71F4     	CALL	AUTOSEL	;select proper drive and read.
4081: F564     C345F3     	JMP	READRAN        
4082: F567                ;                   
4083: F567                ;   Function to compute the file size for random files.
4084: F567                ;                   
4085: F567                WTRANDOM:           
4086: F567     CD71F4     	CALL	AUTOSEL	;select proper drive and write.
4087: F56A     C34EF3     	JMP	WRITERAN       
4088: F56D                ;                   
4089: F56D                ;   Function to compute the size of a random file.
4090: F56D                ;                   
4091: F56D                FILESIZE:           
4092: F56D     CD71F4     	CALL	AUTOSEL	;select proper drive and check file length
4093: F570     C384F3     	JMP	RANSIZE        
4094: F573                ;                   
4095: F573                ;   Function #37. This allows a program to log off any drives.
4096: F573                ; On entry, set (DE) to contain a word with bits set for those
4097: F573                ; drives that are to be logged off. The log-in vector and the
4098: F573                ; write protect vector will be updated. This must be a M/PM
4099: F573                ; special function. 
4100: F573                ;                   
4101: F573                LOGOFF:             
4102: F573     2A3CE8     	LHLD	ParamsDE	;get drives to log off.
4103: F576     7D         	MOV	A,L	;for each bit that is set, we want
4104: F577     2F         	CMA		;to clear that bit in (LoggedBitMap)
4105: F578     5F         	MOV	E,A	;and (ROBitMap).
4106: F579     7C         	MOV	A,H            
4107: F57A     2F         	CMA                
4108: F57B     2AAAF5     	LHLD	LoggedBitMap	;reset the login Bit map.
4109: F57E     A4         	ANA	H              
4110: F57F     57         	MOV	D,A            
4111: F580     7D         	MOV	A,L            
4112: F581     A3         	ANA	E              
4113: F582     5F         	MOV	E,A            
4114: F583     2AA8F5     	LHLD	ROBitMap      
4115: F586     EB         	XCHG               
4116: F587     22AAF5     	SHLD	LoggedBitMap	;and save.
4117: F58A     7D         	MOV	A,L	;now do the write protect vector.
4118: F58B     A3         	ANA	E              
4119: F58C     6F         	MOV	L,A            
4120: F58D     7C         	MOV	A,H            
4121: F58E     A2         	ANA	D              
4122: F58F     67         	MOV	H,A            
4123: F590     22A8F5     	SHLD	ROBitMap	;and save. all done.
4124: F593     C9         	RET                
4125: F594                ;                   
4126: F594                ;   Get here to return to the user.
4127: F594                ;                   
4128: F594                                    
4129: F594                ;                   
4130: F594                ;   Function #40. This is a special entry to do random i/o.
4131: F594                ; For the case where we are writing to unused disk space, this
4132: F594                ; space will be zeroed out first. This must be a M/PM special
4133: F594                ; purpose function, because why would any normal program even
4134: F594                ; care about the previous contents of a sector about to be
4135: F594                ; written over.     
4136: F594                ;                   
4137: F594                WTSPECL:            
4138: F594     CD71F4     	CALL	AUTOSEL	;select proper drive.
4139: F597     3E02       	MVI	A,2	;use special write mode.
4140: F599     32D0F5     	STA	MODE           
4141: F59C     0E00       	MVI	C,0	;set write indicator.
4142: F59E     CDB9F2     	CALL	POSITN1	;position the file.
4143: F5A1     CCB5F1     	CZ	WTSEQ1	;and write (if no errors).
4144: F5A4     C9         	RET                
4145: F5A5                                    
4146: F5A5                ;**************************************************************
4147: F5A5                ;*                  
4148: F5A5                ;*     BDOS data storage pool.
4149: F5A5                ;*                  
4150: F5A5                ;**************************************************************
4151: F5A5                                    
4152: F5A5     00         CurrentUser:			DB	0	;current user number.
4153: F5A6     00         CurrentDrive:			DB	0	;currently active drive.
4154: F5A7                                    
4155: F5A7                ;                   
4156: F5A7     E5         EMPTYFCB:				DB	0E5H	;empty directory segment indicator.
4157: F5A8     0000       ROBitMap:				DW	0	;write protect status for all 16 drives.
4158: F5AA     0000       LoggedBitMap:			DW	0	;drive active word (1 bit per drive).
4159: F5AC     8000       UsersDMA:				DW	080H	;user's dma address (defaults to 80h).
4160: F5AE                ;                   
4161: F5AE                ;   Scratch areas from parameter block.
4162: F5AE                ;                   
4163: F5AE     0000       FilePosInDir:			DW	0	;relative position within dir segment for file (0-3).
4164: F5B0     0000       LastTrackNumber:		DW	0	;last selected track number.
4165: F5B2     0000       LastSectorNumber:		DW	0	;last selected sector number.
4166: F5B4                ;                   
4167: F5B4                ;   Disk storage areas from parameter block.
4168: F5B4                ;                   
4169: F5B4     0000       DIRBUF:					DW	0	;address of directory buffer to use.
4170: F5B6     0000       DISKPB:					DW	0	;contains address of disk parameter block.
4171: F5B8     0000       CHKVECT:				DW	0	;address of check vector.
4172: F5BA     0000       ALOCVECT:				DW	0	;address of allocation vector (bit map).
4173: F5BC                ;                   
4174: F5BC                ;   Parameter block returned from the bios.
4175: F5BC                ;                   
4176: F5BC     0000       SECTORS:				DW	0	;sectors per track from bios.
4177: F5BE     00         BLKSHFT:				DB	0	;block shift.
4178: F5BF     00         BLKMASK:				DB	0	;block mask.
4179: F5C0     00         EXTMASK:				DB	0	;extent mask.
4180: F5C1     0000       DSKSIZE:				DW	0	;disk size from bios (number of blocks-1).
4181: F5C3     0000       DIRSIZE:				DW	0	;directory size.
4182: F5C5     0000       ALLOC0:					DW	0	;storage for first bytes of bit map (dir space used).
4183: F5C7     0000       ALLOC1:					DW	0    
4184: F5C9     0000       OFFSET:					DW	0	;first usable track number.
4185: F5CB     0000       XLATE:					DW	0	;sector translation table address.
4186: F5CD                ;                   
4187: F5CD                ;                   
4188: F5CD     00         CLOSEFLG:				DB	0	;close flag (=0ffh is extent written ok).
4189: F5CE     00         RDWRTFLG:				DB	0	;read/write flag (0ffh=read, 0=write).
4190: F5CF     00         FNDSTAT:				DB	0	;filename found status (0=found first entry).
4191: F5D0     00         MODE:					DB	0	;I/o mode select (0=random, 1=sequential, 2=special random).
4192: F5D1     00         RELBLOCK:				DB	0	;relative position within fcb of block number written.
4193: F5D2     00         COUNTER:				DB	0	;byte counter for directory name searches.
4194: F5D3     00000000   SAVEFCB:				DW	0,0	;save space for address of fcb (for directory searches).
4195: F5D7     00         BIGDISK:				DB	0	;if =0 then disk is > 256 blocks long.
4196: F5D8     00         AutoSelectActive:		DB	0	;if non-zero, then auto select activated.
4197: F5D9     00         OLDDRV:					DB	0	;on auto select, storage for previous drive.
4198: F5DA     00         AutoSelectFlag:			DB	0	;if non-zero, then auto select changed drives.
4199: F5DB     00         SAVNXT:					DB	0	;storage for next record number to access.
4200: F5DC     00         SAVEXT:					DB	0	;storage for extent number of file.
4201: F5DD     0000       SAVNREC:				DW	0	;storage for number of records in file.
4202: F5DF     0000       BLKNMBR:				DW	0	;block number (physical sector) used within a file or logical sector.
4203: F5E1     0000       LOGSECT:				DW	0	;starting logical (128 byte) sector of block (physical sector).
4204: F5E3     00         FCBPOS:					DB	0	;relative position within buffer for fcb of file of interest.
4205: F5E4     0000       FILEPOS:				DW	0	;files position within directory (0 to max entries -1).
4206: F5E6                ;                   
4207: F5E6                ;   Disk directory buffer checksum bytes. One for each of the
4208: F5E6                ; 16 possible drives.
4209: F5E6                ;                   
4210: F5E6                CKSUMTBL:           
4211: F5E6     00000000000000000000000000000000 	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
4212: F5F6                ;                   
4213: F5F6                ;   Extra space ?   
4214: F5F6                ;                   
4215: F5F6     00000000   	DB	0,0,0,0         
4216: F5FA                ;                   
4217: F5FA                ;**************************************************************
4218: F5FA                ;*                  
4219: F5FA                ;*        B I O S   J U M P   T A B L E
4220: F5FA                ;*                  
4221: F5FA                ;**************************************************************
4222: F5FA                ;                   
4223: F5FA                BIOSEntry	Equ	0F600H		; start of bios
4224: F5FA                                    
4225: F5FA                BOOT	EQU		BIOSEntry + 000H	
4226: F5FA                WBOOT	EQU		BIOSEntry + 003H
4227: F5FA                CONST	EQU		BIOSEntry + 006H
4228: F5FA                CONIN	EQU		BIOSEntry + 009H
4229: F5FA                CONOUT	EQU		BIOSEntry + 00CH
4230: F5FA                LIST	EQU		BIOSEntry + 00FH
4231: F5FA                PUNCH	EQU		BIOSEntry + 012H
4232: F5FA                READER	EQU		BIOSEntry + 015H
4233: F5FA                HOME	EQU		BIOSEntry + 018H
4234: F5FA                SELDSK	EQU		BIOSEntry + 01BH
4235: F5FA                SETTRK	EQU		BIOSEntry + 01EH
4236: F5FA                SETSEC	EQU		BIOSEntry + 021H
4237: F5FA                SETDMA	EQU		BIOSEntry + 024H
4238: F5FA                READ	EQU		BIOSEntry + 027H
4239: F5FA                WRITE	EQU		BIOSEntry + 02AH
4240: F5FA                PRSTAT	EQU		BIOSEntry + 02DH
4241: F5FA                SECTRN	EQU		BIOSEntry + 030H
4242: F5FA                                    
4243: F5FA                ;*                  
4244: F5FA                ;******************   E N D   O F   C P / M   *****************
4245: F5FA                ;*                  
4246: F5FA                CodeEnd:            
4247: F5FA                		END               




                                    Xref


0000	0000	$                             		  1554,

2480	ED74	ADDA2HL                       		  3403,
0500	E245	ADDHL                         		  0518,  0884,  1077,
0631	E2ED	AFN                           		  0639,
0637	E2F5	AFN1                          		  0635,
4182	F5C5	ALLOC0                        		  3823,
4183	F5C7	ALLOC1                        		  2564,
4172	F5BA	ALOCVECT                      		  2723,  3815,  3825,  4036,
0050	002A	ASTRK                         		  0559,  0592,
0052	0040	ATSIGN                        		  1727,
3895	F471	AUTOSEL                       		  3942,  3948,  3965,  3976,  3983,  3991,  3997,  4004,  4010,  4048,  4080,  4086,  4092,  4138,
4196	F5D8	AUTOSELECTACTIVE              		  1453,  1483,  3897,
4198	F5DA	AUTOSELECTFLAG                		  1452,  1488,  3908,
3912	F495	AUTOSL1                       		  3904,

1749	E9FF	BACKUP                        		  1864,  1904,
1753	EA07	BACKUP1                       		  1750,
1368	E75D	BADLOAD                       		  1365,
1559	E8EC	BADSCTR                       		  2128,
1591	E925	BADSEC                        		  1568,
1592	E930	BADSEL                        		  1575,
1560	E8EE	BADSLCT                       		  2027,
1395	E78E	BATCH                         		  0288,  0406,  0726,  1354,
1397	E78F	BATCHFCB                      		  0300,  0303,  0305,  0306,  0316,  0320,  0413,
1590	E921	BDOSDRV                       		  1603,
1438	E806	BDOSENTRY                     		
1589	E915	BDOSERR                       		  1604,
1482	E873	BDOSEXIT                      		  1454,
1495	E890	BDOSEXIT1                     		  1485,  1490,  1964,
1480	E873	BDOSSTACK                     		  1450,
4195	F5D7	BIGDISK                       		  2090,  2269,  2769,  3171,  3399,
4223	F600	BIOSENTRY                     		  4225,  4226,  4227,  4228,  4229,  4230,  4231,  4232,  4233,  4234,  4235,  4236,  4237,  4238,  4239,  4240,  4241,
3799	F3F4	BITMAP                        		
3816	F402	BITMAP1                       		  3822,
3838	F423	BITMAP2                       		  3846,  3860,
3856	F447	BITMAP3                       		  3849,  3853,
0039	0020	BLANK                         		  0112,  0442,  0466,  0492,  0577,  0611,  0686,  0827,  0854,  0929,  0981,  0990,  0993,  1235,  1249,  1265,  1325,  1382,  1645,  1699,  1738,  1751,  1769,
4178	F5BF	BLKMASK                       		  2315,  3456,
4202	F5DF	BLKNMBR                       		  2138,  2146,  2290,  2296,  2309,  2321,  3394,  3449,  3454,  3463,
4177	F5BE	BLKSHFT                       		  2236,  2308,
4225	F600	BOOT                          		
0040	007B	BRACKETLEFT                   		  0278,
0041	007D	BRACKETRIGHT                  		
0026	0008	BS                            		  1643,  1706,  1754,  1816,

0051	005E	CARET                         		  1724,
0062	E000	CBASE                         		  0792,  0793,  1289,
1391	E78E	CCPSTACK                      		  0715,  0739,
1406	E7D2	CDRIVE                        		  0260,  0268,  0296,  0323,  0415,  0542,  0730,  0754,  0899,  0912,  0915,  1255,
2013	EB69	CHARBUF                       		  1613,  1654,  1669,
0461	E21C	CHECK                         		  0556,  0571,  0589,  0604,
2561	EDAE	CHECKDIR                      		  2682,
2398	ED1A	CHECKSUM                      		  2568,
1408	E7D3	CHGDRV                        		  0522,  0547,  0757,  0820,  0895,  0908,  1166,  1190,  1251,  1305,  1383,
3056	EFD9	CHGNAM1                       		  3064,
3047	EFC8	CHGNAMES                      		  4011,
2295	ECA7	CHKBLK                        		  3345,  3373,
1636	E96F	CHKCHAR                       		  1624,  1721,
0376	E1C2	CHKCON                        		  0331,  1007,  1082,
2582	EDD4	CHKDIR1                       		  2575,
2531	ED9C	CHKNMBR                       		  3258,  3859,
2452	ED54	CHKROFL                       		  2927,  3059,
2402	ED20	CHKSUM1                       		  2406,
4171	F5B8	CHKVECT                       		  2569,
2465	ED64	CHKWPRT                       		  2921,  3048,  3234,  3365,
2690	EE45	CKBITMAP                      		  2738,  2963,  2992,
2726	EE66	CKBMAP1                       		  2729,
1668	E99D	CKCON1                        		  1662,
1670	E9A0	CKCON2                        		  1656,
1653	E97E	CKCONSOL                      		  1683,  1993,
2632	EE05	CKFILPOS                      		  2849,  2925,  3057,  3075,  3088,  3161,  3241,  3269,  3299,  3305,  3723,  3841,
2454	ED57	CKROF1                        		  3367,
4210	F5E6	CKSUMTBL                      		  2139,  2562,  2571,
0701	E33E	CLEARBUF                      		  0064,
0615	E2DC	CLEAREXTENT                   		  0605,  0621,
0617	E2DE	CLEAREXTENT1                  		
2499	ED82	CLEARS2                       		  3941,  3964,  4003,
0170	E0DA	CLOSE                         		  0321,  1142,
3947	F4C5	CLOSEFIL                      		  1528,
4188	F5CD	CLOSEFLG                      		  3223,  3267,  3282,
3149	F054	CLOSEIT                       		  3268,  3589,  3949,
3170	F07F	CLOSEIT1                      		  3206,
3179	F08D	CLOSEIT2                      		  3177,
3184	F093	CLOSEIT3                      		  3181,
3188	F09A	CLOSEIT4                      		  3173,
3202	F0AF	CLOSEIT5                      		  3187,
3221	F0C9	CLOSEIT6                      		  3213,
3225	F0D1	CLOSEIT7                      		  3186,  3195,  3200,
0779	E3A7	CMDADR                        		  0766,
0647	E2FC	CMDTBL                        		  0669,
0738	E368	CMMND1                        		  0339,  0456,  1030,  1034,  1357,  1386,
0750	E37E	CMMND2                        		  0734,
0024	0003	CNTRLC                        		  1570,  1664,  1924,
0025	0005	CNTRLE                        		  1836,
0031	0010	CNTRLP                        		  1845,
0032	0012	CNTRLR                        		  1873,
0033	0013	CNTRLS                        		  1661,
0034	0015	CNTRLU                        		  1867,
0035	0018	CNTRLX                        		  1855,
0036	001A	CNTRLZ                        		  1079,
4246	F5FA	CODEEND                       		
0060	E000	CODESTART                     		
0046	003A	COLON                         		  0476,  0538,  0967,  0972,
2285	EC9A	COMBLK                        		  3344,  3372,
1370	E766	COMFILE                       		  1271,
0714	E342	COMMAND                       		  0063,
3664	F357	COMPRAND                      		  3727,  3758,
4228	F609	CONIN                         		  1618,  1660,  1663,  1965,
4229	F60C	CONOUT                        		  1686,  1752,  1755,  1960,
4227	F606	CONST                         		  1657,  1959,  1962,
0516	E24C	CONVERT                       		  1310,
0509	E24A	CONVFST                       		  0755,  0819,  0925,  1022,  1054,  1105,  1164,  1186,  1304,  1380,
0541	E275	CONVRT1                       		  0532,
0545	E27C	CONVRT2                       		  0539,
0553	E282	CONVRT3                       		  0544,
0555	E284	CONVRT4                       		  0569,
0564	E295	CONVRT5                       		  0560,
0567	E297	CONVRT6                       		  0563,
0570	E29B	CONVRT7                       		  0574,
4193	F5D2	COUNTER                       		  2835,  2862,
0030	000D	CR                            		  0104,  1637,  1776,  1812,  1935,
0229	E109	CREATE                        		  1112,
0103	E098	CRLF                          		  0120,  0438,  0454,  0740,  0961,  1059,  1347,
2011	EB67	CURPOS                        		  1695,  1740,  1765,  1797,  1822,  1860,  1900,
4153	F5A6	CURRENTDRIVE                  		  1601,  2054,  2425,  3774,  3868,  3885,  3905,  3932,  4023,
4152	F5A5	CURRENTUSER                   		  3847,  3913,  4069,  4074,

2040	EB72	DE2HL                         		  2082,  2087,  2628,  3038,  3100,
2042	EB73	DE2HL1                        		  2049,
0818	E3DE	DECODE                        		  1103,  1230,
0825	E3EE	DECODE1                       		  0850,
0037	007F	DEL                           		  1696,  1826,
0405	E1DD	DELBATCH                      		  0338,  0345,  0455,
0195	E0EF	DELETE                        		  0414,  1040,  1110,
3982	F4F7	DELFILE                       		  1531,
4169	F5B4	DIRBUF                        		  2080,  2400,  2475,  2610,  2624,  3438,
1961	EB3B	DIRC1                         		  1957,
1954	EB2F	DIRCIO                        		  1517,
0924	E45D	DIRECT                        		  0780,
0932	E46E	DIRECT1                       		  0936,
0937	E475	DIRECT2                       		  0930,
0942	E47E	DIRECT3                       		  1010,
0970	E4B2	DIRECT4                       		  0960,
0974	E4BA	DIRECT5                       		  0969,
0977	E4BF	DIRECT6                       		  1001,  1003,
1004	E4F4	DIRECT7                       		  0991,  0999,
1006	E4F5	DIRECT8                       		  0953,
1011	E501	DIRECT9                       		  0943,  1008,
2597	EDE4	DIRREAD                       		  2680,
4181	F5C3	DIRSIZE                       		  2441,  2657,
2588	EDD6	DIRWRITE                      		  2932,  3041,
4170	F5B6	DISKPB                        		  2083,  4056,
1594	E93C	DISKRO                        		  1579,
0399	E1D8	DMASET                        		  0752,  1130,  1282,
0054	0024	DOLLAR                        		  1785,  3852,
2117	EBD5	DOREAD                        		  2599,  3349,
2123	EBDB	DOWRITE                       		  2592,  3453,  3473,
0992	E4DD	DRECT63                       		  0986,
0994	E4DF	DRECT65                       		  0982,
0892	E43A	DSELECT                       		  0926,  1038,  1056,  1107,  1168,  1269,
0140	E0BD	DSKSEL                        		  0299,  0325,  0412,  0416,  0731,  0902,  0916,  1257,  1356,
4180	F5C1	DSKSIZE                       		  2088,  2788,  2981,  3801,

4156	F5A7	EMPTYFCB                      		  3237,
0017	0005	ENTRY                         		  0090,  0136,  0143,  0149,  0197,  0203,  0238,  0250,  0349,  0378,  0382,  0390,  0401,
0148	E0C3	ENTRY1                        		  0158,  0172,  0179,  0185,  0231,
0202	E0F4	ENTRY2                        		  0212,  0225,
0043	003D	EQUALS                        		  0470,  1178,
2924	EF56	ERAFIL1                       		  2934,
2920	EF4E	ERAFILE                       		  3984,
1021	E505	ERASE                         		  0781,
1037	E528	ERASE1                        		  1024,
1567	E8F4	ERROR1                        		  1559,
1574	E900	ERROR2                        		  1560,
1578	E906	ERROR3                        		  1561,
1582	E90C	ERROR4                        		  1562,
1585	E90F	ERROR5                        		  1576,  1580,
1220	E668	EXISTS                        		  1217,
2264	EC81	EXTBLK                        		  2289,  3383,
2275	EC94	EXTBLK1                       		  2271,
4179	F5C0	EXTMASK                       		  2354,  2815,  3280,
0881	E431	EXTRACT                       		  0951,  0979,  0988,

1402	E7B0	FCB                           		  0164,  0165,  0190,  0217,  0517,  0675,  0823,  0894,  0927,  1039,  1108,  1115,  1131,  1141,  1171,  1172,  1200,  1204,  1234,  1248,  1263,  1283,  1308,  1313,  1315,  1317,  1381,
2474	ED6E	FCB2HL                        		  2453,  2759,  2861,  2928,  3036,  3095,  3164,  3725,  3843,
4204	F5E3	FCBPOS                        		  2476,  2675,
3022	EFAF	FCBSET                        		  3259,
4002	F50C	FCREATE                       		  1534,
0029	000C	FF                            		
4205	F5E4	FILEPOS                       		  2135,  2518,  2633,  2645,  2659,  2661,  2667,  2899,  3152,  3153,
4163	F5AE	FILEPOSINDIR                  		  2068,  2444,  2520,  3833,
1593	E937	FILERO                        		  1583,
4091	F56D	FILESIZE                      		  1547,
2832	EECA	FINDFST                       		  2923,  3050,  3073,  3087,  3160,  3240,  3298,  3712,  3968,
2846	EEDF	FINDNXT                       		  2880,  2887,  2933,  3063,  3080,  3746,  3977,
2860	EEFC	FNDNXT1                       		  2855,
2865	EF05	FNDNXT2                       		  2897,
2882	EF25	FNDNXT3                       		  2877,
2892	EF2E	FNDNXT4                       		  2871,  2874,  2881,
2898	EF35	FNDNXT5                       		  2868,
2912	EF46	FNDNXT6                       		  2850,  2859,
2956	EF72	FNDSPA1                       		  2997,  3016,
2980	EF83	FNDSPA2                       		  2959,
3002	EF9E	FNDSPA3                       		  2965,  2994,
3013	EFA6	FNDSPA4                       		  2986,
2949	EF70	FNDSPACE                      		  3387,
4190	F5CF	FNDSTAT                       		  2804,  2834,  2902,
1554	0028	FUNCTIONCOUNT                 		  1457,
1510	E89A	FUNCTIONVECTOR                		  1554,  1460,

4035	F531	GETALOC                       		  1539,
1377	E769	GETBACK                       		  1013,  1043,  1080,  1083,  1090,  1153,  1206,  1212,  1219,  1367,
1379	E76C	GETBACK1                      		  1238,  1253,  1258,
2239	EC68	GETBLK1                       		  2243,
2249	EC76	GETBLK2                       		  2254,
2255	EC7F	GETBLK3                       		  2251,
2235	EC61	GETBLOCK                      		  2286,  3376,
1612	E956	GETCHAR                       		  1623,  1808,
1940	EB23	GETCON                        		  1512,
4022	F524	GETCRNT                       		  1537,
1992	EB59	GETCSTS                       		  1522,
0388	E1D0	GETDSK                        		  0741,  0753,  0963,
1622	E961	GETECHO                       		  1941,
3233	F0D6	GETEMPTY                      		  3304,  3611,  4005,
0583	E2AC	GETEXT                        		  0572,
0588	E2B4	GETEXT1                       		  0602,
0597	E2C5	GETEXT2                       		  0593,
0600	E2C7	GETEXT3                       		  0596,
0603	E2CB	GETEXT4                       		  0607,
3955	F4CB	GETFST                        		  1529,
3967	F4E2	GETFST1                       		  3960,
0287	E139	GETINP                        		  0746,  1027,
0344	E196	GETINP1                       		  0290,  0302,  0308,  0322,
0354	E1A7	GETINP2                       		  0332,
0357	E1AB	GETINP3                       		  0366,
0367	E1BA	GETINP4                       		  0361,
1970	EB48	GETIOB                        		  1518,
4016	F51E	GETLOG                        		  1536,
3250	F0F8	GETMT1                        		  3254,
3265	F10C	GETNEXT                       		  3337,  3505,
3973	F4E8	GETNXT                        		  1530,
4055	F546	GETPARM                       		  1543,
4057	F549	GETPRM1                       		  4018,  4037,  4043,
1946	EB29	GETRDR                        		  1514,
4041	F537	GETROV                        		  1541,
2490	ED79	GETS2                         		  2500,  2507,  3156,  3494,  3628,
0248	E115	GETSETUC                      		  0724,  1237,
4065	F54D	GETUSER                       		  1544,
0242	E113	GETUSR                        		  0255,
3921	F49E	GETVER                        		  1523,
2423	ED2E	GETWPRT                       		  2466,  3154,
0049	003E	GRTTHAN                       		  0482,  0744,
3286	F135	GTNEXT1                       		  3278,
3296	F140	GTNEXT2                       		  3284,
3308	F15E	GTNEXT3                       		  3285,  3300,
3310	F161	GTNEXT4                       		  3307,
3318	F168	GTNEXT5                       		  3292,  3303,  3306,

0790	E3B5	HALT                          		
0870	E428	HL2DE                         		  0315,  0876,  1174,  1319,
4233	F618	HOME                          		  2103,
2102	EBC4	HOMEDRV                       		  2840,  3832,

0070	E006	INBUFF                        		  0080,  0312,  0329,  0348,  0355,  0369,  0703,  0732,  1028,  1320,
0079	E088	INPOINT                       		  0370,  0523,  0623,  1036,  1175,  1185,
0015	0003	IOBYTE                        		  1971,  1977,
2005	EB60	IOERR1                        		  3319,  3355,  3371,
2125	EBDE	IORET                         		  2119,

2031	EB6D	JUMPHL                        		  2129,  2461,  2469,

4165	F5B2	LASTSECTORNUMBER              		  2074,  2109,  2151,  2214,
4164	F5B0	LASTTRACKNUMBER               		  2071,  2105,  2156,  2209,
0048	003C	LESSTH                        		  0480,
0028	000A	LF                            		  0106,  1639,  1711,  1778,  1814,
4230	F60F	LIST                          		  1516,  1691,
4158	F5AA	LOGGEDBITMAP                  		  3773,  3786,  3790,  3930,  4017,  4108,  4116,
2307	ECAD	LOGICAL                       		  3347,  3421,
2310	ECB3	LOGICL1                       		  2313,
3772	F3D3	LOGINDRIVE                    		  3889,  3936,
4101	F573	LOGOFF                        		  1549,
4203	F5E1	LOGSECT                       		  2314,  3446,

0013	0040	MEM                           		  0059,
4191	F5D0	MODE                          		  2365,  3326,  3361,  3422,  3501,  3535,  4140,
2517	ED8F	MOREFLS                       		  2532,  2578,  2857,
0865	E426	MOVE3                         		  1272,
0267	E129	MOVECD                        		  0350,  1256,  1355,
2623	EDF9	MOVEDIR                       		  3969,  3978,
3131	F046	MOVEWORD                      		  3189,  3191,

0081	E08A	NAMEPNT                       		  0439,  0527,
1410	E7D4	NBYTES                        		  1060,  1063,
1760	EA0C	NEWLINE                       		  1869,  1877,
1764	EA14	NEWLN1                        		  1771,
0810	E3D6	NOFILE                        		  0808,
0488	E23B	NONBLANK                      		  0496,  0525,  1177,
0807	E3D0	NONE                          		  0941,  1042,  1211,
1154	E5ED	NOSPACE                       		  1149,
0646	0006	NUMCMDS                       		  0673,
2656	EE15	NXENTRY                       		  2848,  3840,
2666	EE29	NXENTRY1                      		  2663,
2670	EE30	NXENTRY2                      		  2673,

4184	F5C9	OFFSET                        		  2203,
4197	F5D9	OLDDRV                        		  1492,  3906,
0156	E0CB	OPEN                          		  0166,  0301,
0162	E0D0	OPENFCB                       		  1057,  1273,
3940	F4BC	OPENFIL                       		  1527,
3085	F003	OPENIT                        		  3602,  3943,
3090	F00C	OPENIT1                       		  3309,
3119	F03D	OPENIT2                       		  3115,  3117,
1678	E9A3	OUTCHAR                       		  1725,  1736,  1739,  1762,  1770,  1777,  1779,  1936,
1693	E9BD	OUTCHR1                       		  1681,
1710	E9D4	OUTCHR2                       		  1707,
1733	E9EB	OUTCON                        		  1513,  1628,  1722,  1790,
1737	E9F1	OUTCON1                       		  1743,
1775	EA24	OUTCRLF                       		  1600,  1763,  1840,
2009	EB65	OUTFLAG                       		  1679,  1823,  1897,  1902,  1905,

0609	E2D5	PADEXT                        		  0586,  0590,  0613,
0575	E2A5	PADNAME                       		  0557,  0579,
0852	E419	PADNUMBER                     		  0828,  0858,
1473	E83E	PARAME                        		  1445,  1493,  3884,  3902,  4066,
1472	E83C	PARAMSDE                      		  1442,  1468,  1486,  1799,  2265,  2327,  2336,  2491,  2837,  3033,  3051,  3097,  3120,  3167,  3235,  3238,  3243,  3271,  3366,  3396,  3541,  3713,  3756,  3898,  3914,  3975,  4102,
0045	002E	PERIOD                        		  0474,  0585,
0019	0080	PG0BUFFER                     		  0313,  0395,  0751,  0882,  1076,  1334,  1346,  3933,
0118	E0A7	PLINE                         		  0800,  0809,  1026,  1150,  1218,  1366,
0122	E0AC	PLINE2                        		  0130,  0330,
3533	F2B5	POSITION                      		  3644,  3652,
3539	F2B9	POSITN1                       		  4142,
3586	F2F9	POSITN2                       		  3576,
3619	F331	POSITN3                       		  3582,  3605,
3626	F336	POSITN4                       		  3595,  3610,  3615,
3634	F33D	POSITN5                       		  3568,
0053	0023	POUNDSN                       		  1761,
0087	E08C	PRINT                         		  0096,  0128,  0447,  0453,  0743,  0745,  1081,
0094	E092	PRINTB                        		  0105,  0107,  0113,  0966,  0968,  0973,  0995,
4240	F62D	PRSTAT                        		
1598	E940	PRTERR                        		  1569,  1586,
2012	EB68	PRTFLAG                       		  1689,  1848,
1783	EA2E	PRTMESG                       		  1605,  1607,  1792,  1988,
1984	EB53	PRTSTR                        		  1520,
4231	F612	PUNCH                         		  1515,
4028	F52A	PUTDMA                        		  1538,

0042	003F	QMARK                         		  0452,  0562,  0595,  0634,  0933,  2870,  3959,  3963,

3722	F396	RANSIZ1                       		  3747,
3745	F3B8	RANSIZ2                       		  3739,
3748	F3BE	RANSIZ3                       		  3724,
3710	F384	RANSIZE                       		  4093,
1804	EA4A	RDBUF1                        		  1820,  1830,  1853,  1931,
1875	EACB	RDBUF10                       		  1824,
1882	EAD3	RDBUF11                       		  1894,
1895	EAE5	RDBUF12                       		  1885,
1903	EAF4	RDBUF13                       		  1907,
1912	EB01	RDBUF14                       		  1874,
1916	EB04	RDBUF15                       		  1834,
1929	EB18	RDBUF16                       		  1926,
1932	EB1C	RDBUF17                       		  1813,  1815,
1807	EA4C	RDBUF2                        		  1843,  1899,  1908,
1825	EA71	RDBUF3                        		  1817,
1835	EA81	RDBUF4                        		  1827,
1844	EA92	RDBUF5                        		  1837,
1854	EAA3	RDBUF6                        		  1846,
1858	EAA9	RDBUF7                        		  1865,
1866	EABA	RDBUF8                        		  1856,
1872	EAC6	RDBUF9                        		  1868,
1796	EA3C	RDBUFF                        		  1521,  1862,  1871,
0801	E3C5	RDERR                         		  0799,
0798	E3BF	RDERROR                       		  1091,
4079	F561	RDRANDOM                      		  1545,
0210	E0F9	RDREC                         		  0218,  0307,  1284,
3324	F16E	RDSEQ                         		  3992,
3327	F173	RDSEQ1                        		  3645,
3343	F198	RDSEQ2                        		  3334,
3354	F1AD	RDSEQ3                        		  3336,  3342,  3346,
4189	F5CE	RDWRTFLG                      		  3301,  3329,  3364,
4238	F627	READ                          		  2118,
4232	F615	READER                        		  1947,
0216	E0FE	READFCB                       		  1069,
3642	F345	READRAN                       		  4081,
3990	F500	READSEQ                       		  1532,
4192	F5D1	RELBLOCK                      		  3377,  3401,
0236	E10E	RENAM                         		  1205,
1163	E5F6	RENAME                        		  0784,
1182	E625	RENAME1                       		  1179,
1197	E63F	RENAME2                       		  1193,
1201	E644	RENAME3                       		
1210	E653	RENAME4                       		  1203,
1213	E659	RENAME5                       		  1181,  1187,  1196,
1216	E65F	RENAME6                       		  1170,
4009	F515	RENFILE                       		  1535,
0134	E0B8	RESDSK                        		  0725,
0907	E44C	RESETDR                       		  1093,  1214,  1303,  1362,  1378,
2000	EB5F	RETURN                        		  1550,  1551,
4157	F5A8	ROBITMAP                      		  2424,  2435,  2440,  3929,  4042,  4114,  4123,
1561	E8F0	RODISK                        		  2468,
1562	E8F2	ROFILE                        		  2460,
3927	F4A3	RSTDSK                        		  1525,
1404	E7D1	RTNCODE                       		  0150,  0944,

2812	EEB9	SAMEXT                        		  2885,
3074	EFF2	SAVATR1                       		  3081,
1102	E593	SAVE                          		  0783,
1121	E5BA	SAVE1                         		  1136,
1140	E5D7	SAVE2                         		  1124,
1148	E5E1	SAVE3                         		  1113,  1135,
1151	E5E7	SAVE4                         		  1144,
3071	EFED	SAVEATTR                      		  4049,
4194	F5D3	SAVEFCB                       		  2838,  2851,  3974,
4200	F5DC	SAVEXT                        		  2248,  2356,
4201	F5DD	SAVNREC                       		  2238,  2317,  2349,  2371,  3331,  3339,  3369,  3475,  3511,
4199	F5DB	SAVNXT                        		  2352,  2375,  3332,  3476,
0668	E314	SEARCH                        		  0760,
0671	E319	SEARCH1                       		  0696,
0677	E322	SEARCH2                       		  0684,
0690	E335	SEARCH3                       		  0680,  0693,
0694	E33A	SEARCH4                       		  0687,
4176	F5BC	SECTORS                       		  2085,  2169,  2181,
4241	F630	SECTRN                        		  2227,
4234	F61B	SELDSK                        		  2056,
2053	EB7C	SELECTDISK                    		  3779,
2095	EBC0	SELECTDISK1                   		  2093,
0047	003B	SEMIC                         		  0478,
2603	EDEA	SET2USERSDMA                  		  2593,  3464,  3935,  4031,
4047	F53D	SETATTR                       		  1542,
3866	F452	SETBIT                        		  2439,  3789,
0254	E11A	SETCDRV                       		  0346,  1349,
2553	EDAC	SETDIR                        		  2589,
2609	EDF0	SETDIRDMA                     		  2590,  2598,  3445,
4237	F624	SETDMA                        		  2619,
2615	EDF3	SETDMA0                       		  2605,
3883	F465	SETDSK                        		  1494,  1526,  3911,
2326	ECC9	SETEXT                        		  2353,  3091,  3961,
2758	EE7B	SETFILE                       		  2931,  3858,
2764	EE85	SETFL1                        		  2798,
2777	EE98	SETFL2                        		  2771,
2784	EE9E	SETFL3                        		  2776,
2794	EEAD	SETFL4                        		  2787,
2335	ECD1	SETHLDE                       		  2347,  2364,
1976	EB4E	SETIOB                        		  1519,
2363	ECF5	SETNREC                       		  3350,  3504,  3515,
3755	F3C0	SETRAN                        		  1548,
2506	ED88	SETS2B7                       		  3101,  3260,  3320,  3638,
4236	F621	SETSEC                        		  2230,
1998	EB5C	SETSTAT                       		  1942,  1948,  1966,  1972,  2007,  2805,  2915,  3313,  3392,  3622,  3923,  4024,  4070,
4235	F61E	SETTRK                        		  2207,
4072	F55B	SETUSER                       		  4068,
2411	ED27	SHIFTL                        		  3871,
2413	ED28	SHIFTL1                       		  2417,
2381	ED0D	SHIFTR                        		  2137,  2427,  3776,  3803,
2383	ED0E	SHIFTR1                       		  2393,
1719	E9DA	SHOWIT                        		  1891,  1920,
2026	EB6A	SLCTERR                       		  3780,
0111	E0A2	SPACE                         		  0971,  0975,  1002,
0189	E0E9	SRCHFCB                       		  0940,  1169,  1202,
0177	E0DF	SRCHFST                       		  0191,
0183	E0E4	SRCHNXT                       		  1009,
2010	EB66	STARTING                      		  1766,  1798,  1842,  1859,
1474	E83F	STATUSBDOSRETURN              		  1447,  1498,  1999,  2901,  3151,  3226,  3340,  3417,  3506,  3593,  3603,  3613,  3637,  3855,  4058,
2736	EE6C	STBITMAP                      		  2793,
2748	EE74	STBMAP1                       		  2751,  3005,
0394	E1D5	STDDMA                        		  1152,  1348,
2643	EE0E	STFILPOS                      		  2664,  2839,  2913,  3837,
2369	ED01	STNREC1                       		  2367,
2346	ECDE	STRDATA                       		  3311,  3330,  3368,
2803	EEB3	STSTATUS                      		  3985,  4012,  4050,
2542	EDA5	SUBHL                         		  2565,  2662,
0437	E1F5	SYNERR                        		  0467,  0756,  0822,  0832,  0837,  0843,  0845,  0847,  0855,  1055,  1094,  1106,  1165,  1215,  1232,  1236,  1266,  1363,  1385,
0440	E1FB	SYNERR1                       		  0450,
0451	E20E	SYNERR2                       		  0443,  0445,

0027	0009	TAB                           		  1641,  1735,
0020	0100	TBASE                         		  1120,  1278,  1350,
0016	0004	TDRIVE                        		  0262,  0269,
0018	005C	TFCB                          		  1316,
2134	EBE6	TRKSEC                        		  2679,  3040,
2144	EBF4	TRKSEC1                       		  3348,  3451,  3470,
2162	EC07	TRKSEC2                       		  2178,
2179	EC1D	TRKSEC3                       		  2167,  2192,
2197	EC32	TRKSEC4                       		  2183,  2188,
1053	E543	TYPE                          		  0782,
1062	E55A	TYPE1                         		  1084,
1064	E55D	TYPE2                         		
1074	E56D	TYPE3                         		  1067,
1088	E586	TYPE4                         		  1071,
1092	E58D	TYPE5                         		  1058,

1246	E68B	UNKNOWN                       		  0759,  0786,
1364	E754	UNKWN0                        		  1294,  1302,
1262	E6A7	UNKWN1                        		  1250,
1267	E6B0	UNKWN2                        		
1279	E6C4	UNKWN3                        		  1295,
1299	E6E4	UNKWN4                        		  1285,
1321	E713	UNKWN5                        		  1328,
1332	E721	UNKWN6                        		  1324,  1326,
1335	E726	UNKWN7                        		  1343,
1344	E732	UNKWN8                        		  1339,
1361	E74E	UNKWN9                        		  1274,
3030	EFB3	UPDATE                        		  3062,  3079,
3039	EFC2	UPDATE1                       		  3224,
0275	E130	UPPER                         		  0363,
0044	005F	USCORE                        		  0472,  1180,
1229	E674	USER                          		  0785,
4159	F5AC	USERSDMA                      		  2604,  2626,  3934,  4030,
1475	E841	USERSTACK                     		  1449,  1496,

4226	F603	WBOOT                         		  1511,
4239	F62A	WRITE                         		  2124,
3650	F34E	WRITERAN                      		  4087,
2434	ED3C	WRTPRTD                       		  1540,  2580,
0223	E104	WRTREC                        		  1132,
3996	F506	WRTSEQ                        		  1533,
4085	F567	WTRANDOM                      		  1546,
3359	F1B0	WTSEQ                         		  3998,
3362	F1B5	WTSEQ1                        		  3653,  4143,
3486	F284	WTSEQ10                       		  3478,
3512	F2B0	WTSEQ11                       		  3509,
3514	F2B2	WTSEQ12                       		  3500,  3503,
3386	F1ED	WTSEQ2                        		  3380,
3393	F1FA	WTSEQ3                        		  3390,
3406	F216	WTSEQ4                        		  3402,
3414	F21E	WTSEQ5                        		  3405,
3416	F220	WTSEQ6                        		  3375,
3440	F23E	WTSEQ7                        		  3444,
3448	F24C	WTSEQ8                        		  3461,
3469	F26D	WTSEQ9                        		  3425,  3436,
3498	F291	WTSEQ99                       		
4137	F594	WTSPECL                       		  1552,

4185	F5CB	XLATE                         		  2079,  2225,

1044	E538	YESNO                         		  1025,
