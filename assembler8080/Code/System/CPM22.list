0001: 0000                                    
0002: 0000                ;**************************************************************
0003: 0000                ;*                  
0004: 0000                ;*             C P / M   version   2 . 2
0005: 0000                ;*                    Sourced from:
0006: 0000                ;*  Reconstructed from memory image on February 27, 1981
0007: 0000                ;*                by Clark A. Calkins
0008: 0000                ;*                  
0009: 0000                ;**************************************************************
0010: 0000                ;                   
0011: 0000                                    
0012: 0000                ;                   
0013: 0000                MEM			EQU		64			;for a 64k system 
0014: 0000                ;                   
0015: 0000                IOBYTE		EQU		3			;i/o definition byte.
0016: 0000                TDRIVE		EQU		4			;current drive name and user number.
0017: 0000                ENTRY		EQU		5			;entry point for the cp/m bdos.
0018: 0000                TFCB		EQU		5CH			;default file control block.
0019: 0000                Pg0Buffer	EQU		80H			;i/o buffer and command line storage.
0020: 0000                TBASE		EQU		100H		;transiant program storage area.
0021: 0000                ;                   
0022: 0000                ;   Set control character equates.
0023: 0000                ;                   
0024: 0000                CNTRLC		EQU		03H			;control-c
0025: 0000                CNTRLE		EQU		05H			;control-e
0026: 0000                BS			EQU		08H			;backspace
0027: 0000                TAB			EQU		09H			;tab
0028: 0000                LF			EQU		0AH			;line feed
0029: 0000                FF			EQU		0CH			;form feed
0030: 0000                CR			EQU		0DH			;carriage return
0031: 0000                CNTRLP		EQU		10H			;control-p
0032: 0000                CNTRLR		EQU		12H			;control-r
0033: 0000                CNTRLS		EQU		13H			;control-s
0034: 0000                CNTRLU		EQU		15H			;control-u
0035: 0000                CNTRLX		EQU		18H			;control-x
0036: 0000                CNTRLZ		EQU		1AH			;control-z (end-of-file mark)
0037: 0000                DEL			EQU		7FH			;rubout
0038: 0000                ;                   
0039: 0000                BLANK		EQU		020H		; Space/Blank
0040: 0000                BRACKETLEFT		EQU	07BH		; {
0041: 0000                BRACKETRIGHT	EQU	07DH		; }
0042: 0000                QMARK		EQU		03FH		; ?
0043: 0000                EQUALS		EQU		03DH		; =
0044: 0000                USCORE		EQU		05FH		; _
0045: 0000                PERIOD		EQU		02EH		; .
0046: 0000                COLON		EQU		03AH		; :
0047: 0000                SEMIC		EQU		03BH		; ;
0048: 0000                LESSTH		EQU		03CH		; <
0049: 0000                GRTTHAN		EQU		03EH		; >
0050: 0000                ASTRK		EQU		02AH		; *
0051: 0000                CARET		EQU		05EH		; ^
0052: 0000                ATSIGN		EQU		040H		; @
0053: 0000                POUNDSN		EQU		023H		; #
0054: 0000                DOLLAR		EQU		024H		; $
0055: 0000                                    
0056: 0000                EndOfMessage	EQU	00H
0057: 0000                EmptyFileFlag	EQU	0E5H		; empty file slot in dorectory
0058: 0000                ;                   
0059: 0000                ;   Set origin for CP/M
0060: 0000                ;                   
0061: 0000                	ORG	(MEM-8)*1024   
0062: E000                CodeStart:          
0063: E000                ;                   
0064: E000                CBASE:              
0065: E000     C32FE3     		JMP		COMMAND		;execute command processor (ccp).
0066: E003     C32BE3     		JMP		CLEARBUF	;entry to empty input buffer before starting ccp.
0067: E006                                    
0068: E006                ;                   
0069: E006                ;   Standard cp/m ccp input buffer. Format is (max length),
0070: E006                ; (actual length), (char #1), (char #2), (char #3), etc.
0071: E006                ;                   
0072: E006                InBuffStart:        
0073: E006                InBuffSize:					;length of input buffer.
0074: E006     7F         		DB		InBuffEnd - InBuffStart		
0075: E007                InBuffCount:			;current Count of contents.
0076: E007     00         		DB		0             
0077: E008                InBuff:             
0078: E008     434F5059524947485420 		DB		'Copyright '  
0079: E012     313937392028432920425920 		DB		'1979 (c) by '
0080: E01E     4449474954414C205245534541524348 		DB		'Digital Research'
0081: E02E     00         		DB		00            
0082: E02F                		DS		86			         
0083: E085                InBuffEnd:          
0084: E085                		                  
0085: E085                InBuffAddress:      
0086: E085     08E0       		DW		InBuff		;input line pointer
0087: E087                ErrorMsgPointer:    
0088: E087     0000       		DW		0			; input line pointer used for error message. Points to
0089: E089                							; start of name in error.
0090: E089                ;                   
0091: E089                ;   Routine to print (A) on the console. All registers used.
0092: E089                ;                   
0093: E089                PRINT:              
0094: E089     5F         	MOV		E,A			;setup bdos call.
0095: E08A     0E02       	MVI		C,2           
0096: E08C     C30500     	JMP		ENTRY         
0097: E08F                ;                   
0098: E08F                ;   Routine to print (A) on the console and to save (BC).
0099: E08F                ;                   
0100: E08F                PRINTB:             
0101: E08F     C5         	PUSH	B             
0102: E090     CD89E0     	CALL	PRINT         
0103: E093     C1         	POP		B             
0104: E094     C9         	RET                
0105: E095                ;                   
0106: E095                ;   Routine to send a carriage return, line feed combination
0107: E095                ; to the console.   
0108: E095                ;                   
0109: E095                CRLF:               
0110: E095     3E0D       	MVI		A,CR          
0111: E097     CD8FE0     	CALL	PRINTB        
0112: E09A     3E0A       	MVI		A,LF          
0113: E09C     C38FE0     	JMP		PRINTB        
0114: E09F                ;                   
0115: E09F                ;   Routine to send one space to the console and save (BC).
0116: E09F                ;                   
0117: E09F                SPACE:              
0118: E09F     3E20       	MVI		A,BLANK		; blank/Space
0119: E0A1     C38FE0     	JMP		PRINTB        
0120: E0A4                ;                   
0121: E0A4                ;   Routine to print character string pointed to be (BC) on the
0122: E0A4                ; console. It must terminate with a null byte.
0123: E0A4                ;                   
0124: E0A4                PLINE:              
0125: E0A4     C5         	PUSH	B             
0126: E0A5     CD95E0     	CALL	CRLF          
0127: E0A8     E1         	POP		H             
0128: E0A9                PLINE2:             
0129: E0A9     7E         	MOV		A,M           
0130: E0AA     B7         	ORA		A             
0131: E0AB     C8         	RZ                 
0132: E0AC     23         	INX		H             
0133: E0AD     E5         	PUSH	H             
0134: E0AE     CD89E0     	CALL	PRINT         
0135: E0B1     E1         	POP		H             
0136: E0B2     C3A9E0     	JMP		PLINE2        
0137: E0B5                ;                   
0138: E0B5                ;   Routine to reset the disk system.
0139: E0B5                ;                   
0140: E0B5                ResetDiskSystem:    
0141: E0B5     0E0D       	MVI		C,13          
0142: E0B7     C30500     	JMP		ENTRY         
0143: E0BA                ;                   
0144: E0BA                ;   Routine to select disk (A).
0145: E0BA                ;                   
0146: E0BA                DSKSEL:             
0147: E0BA     5F         	MOV		E,A           
0148: E0BB     0E0E       	MVI		C,14          
0149: E0BD     C30500     	JMP		ENTRY         
0150: E0C0                ;                   
0151: E0C0                ;   Routine to call bdos and save the return code. The zero
0152: E0C0                ; flag is set on a return of 0ffh.
0153: E0C0                ;                   
0154: E0C0                ENTRY1:             
0155: E0C0     CD0500     	CALL	ENTRY         
0156: E0C3     32BEE7     	STA		RTNCODE		;save return code.
0157: E0C6     3C         	INR		A			;set zero if 0ffh returned.
0158: E0C7     C9         	RET                
0159: E0C8                ;                   
0160: E0C8                ;   Routine to open a file. (DE) must point to the FCB.
0161: E0C8                ;                   
0162: E0C8                OPEN:               
0163: E0C8     0E0F       	MVI		C,15          
0164: E0CA     C3C0E0     	JMP		ENTRY1        
0165: E0CD                ;                   
0166: E0CD                ;   Routine to open file at (FCB).
0167: E0CD                ;                   
0168: E0CD                OPENFCB:            
0169: E0CD     AF         	XRA		A		;clear the record number byte at fcb+32
0170: E0CE     32BDE7     	STA		FCB+32        
0171: E0D1     119DE7     	LXI		D,FCB         
0172: E0D4     C3C8E0     	JMP		OPEN          
0173: E0D7                ;                   
0174: E0D7                ;   Routine to close a file. (DE) points to FCB.
0175: E0D7                ;                   
0176: E0D7                CLOSE:              
0177: E0D7     0E10       	MVI		C,16          
0178: E0D9     C3C0E0     	JMP		ENTRY1        
0179: E0DC                ;                   
0180: E0DC                ;   Routine to search for the first file with ambigueous name
0181: E0DC                ; (DE).             
0182: E0DC                ;                   
0183: E0DC                SRCHFST:            
0184: E0DC     0E11       	MVI		C,17          
0185: E0DE     C3C0E0     	JMP		ENTRY1        
0186: E0E1                ;                   
0187: E0E1                ;   Search for the next ambigeous file name.
0188: E0E1                ;                   
0189: E0E1                SRCHNXT:            
0190: E0E1     0E12       	MVI		C,18          
0191: E0E3     C3C0E0     	JMP		ENTRY1        
0192: E0E6                ;                   
0193: E0E6                ;   Search for file at (FCB).
0194: E0E6                ;                   
0195: E0E6                SRCHFCB:            
0196: E0E6     119DE7     	LXI		D,FCB         
0197: E0E9     C3DCE0     	JMP		SRCHFST       
0198: E0EC                ;                   
0199: E0EC                ;   Routine to delete a file pointed to by (DE).
0200: E0EC                ;                   
0201: E0EC                DELETE:             
0202: E0EC     0E13       	MVI		C,19          
0203: E0EE     C30500     	JMP		ENTRY         
0204: E0F1                ;                   
0205: E0F1                ;   Routine to call the bdos and set the zero flag if a zero
0206: E0F1                ; status is returned.
0207: E0F1                ;                   
0208: E0F1                ENTRY2:             
0209: E0F1     CD0500     	CALL	ENTRY         
0210: E0F4     B7         	ORA		A		;set zero flag if appropriate.
0211: E0F5     C9         	RET                
0212: E0F6                ;                   
0213: E0F6                ;   Routine to read the next record from a sequential file.
0214: E0F6                ; (DE) points to the FCB.
0215: E0F6                ;                   
0216: E0F6                RDREC:              
0217: E0F6     0E14       	MVI		C,20          
0218: E0F8     C3F1E0     	JMP		ENTRY2        
0219: E0FB                ;                   
0220: E0FB                ;   Routine to read file at (FCB).
0221: E0FB                ;                   
0222: E0FB                READFCB:            
0223: E0FB     119DE7     	LXI		D,FCB         
0224: E0FE     C3F6E0     	JMP		RDREC         
0225: E101                ;                   
0226: E101                ;   Routine to write the next record of a sequential file.
0227: E101                ; (DE) points to the FCB.
0228: E101                ;                   
0229: E101                WRTREC:             
0230: E101     0E15       	MVI		C,21          
0231: E103     C3F1E0     	JMP		ENTRY2        
0232: E106                ;                   
0233: E106                ;   Routine to create the file pointed to by (DE).
0234: E106                ;                   
0235: E106                CREATE:             
0236: E106     0E16       	MVI		C,22          
0237: E108     C3C0E0     	JMP		ENTRY1        
0238: E10B                ;                   
0239: E10B                ;   Routine to rename the file pointed to by (DE). Note that
0240: E10B                ; the new name starts at (DE+16).
0241: E10B                ;                   
0242: E10B                RENAM:              
0243: E10B     0E17       	MVI		C,23          
0244: E10D     C30500     	JMP		ENTRY         
0245: E110                ;                   
0246: E110                ;   Get the current user code.
0247: E110                ;                   
0248: E110                GETUSR:             
0249: E110     1EFF       	MVI		E,0FFH			; make it get
0250: E112                ;                   
0251: E112                ;   Routine to get or set the current user code.
0252: E112                ; If (E) is FF then this is a GET, else it is a SET.
0253: E112                ;                   
0254: E112                GetSetCurrentUser:  
0255: E112     0E20       	MVI		C,32			; BDOS vector
0256: E114     C30500     	JMP		ENTRY         
0257: E117                ;                   
0258: E117                ;   Routine to set the current drive byte at (TDRIVE).
0259: E117                ;                   
0260: E117                SETCDRV:            
0261: E117     CD10E1     	CALL	GETUSR			;get user number
0262: E11A     87         	ADD		A				;and shift into the upper 4 bits.
0263: E11B     87         	ADD		A             
0264: E11C     87         	ADD		A             
0265: E11D     87         	ADD		A             
0266: E11E     21BFE7     	LXI		H,CDRIVE		;now add in the current drive number.
0267: E121     B6         	ORA		M             
0268: E122     320400     	STA		TDRIVE			;and save.
0269: E125     C9         	RET                
0270: E126                ;                   
0271: E126                ;   Move currently active drive down to (TDRIVE).
0272: E126                ;                   
0273: E126                MOVECD:             
0274: E126     3ABFE7     	LDA		CDRIVE        
0275: E129     320400     	STA		TDRIVE        
0276: E12C     C9         	RET                
0277: E12D                ;                   
0278: E12D                ;   Routine to convert (A) into upper case ascii. Only letters
0279: E12D                ; are affected.     
0280: E12D                ;                   
0281: E12D                UPPER:              
0282: E12D     FE61       	CPI		061H			; 'a'	;check for letters in the range of 'a' to 'z'.
0283: E12F     D8         	RC                 
0284: E130     FE7B       	CPI		BRACKETLEFT		;'{'
0285: E132     D0         	RNC                
0286: E133     E65F       	ANI		5FH				;convert it if found.
0287: E135     C9         	RET                
0288: E136                ;                   
0289: E136                ;   Routine to get a line of input. We must check to see if the
0290: E136                ; user is in (BATCH) mode. If so, then read the input from file
0291: E136                ; ($$$.SUB). At the end, reset to console input.
0292: E136                ;                   
0293: E136                GETINP:             
0294: E136     3A7BE7     	LDA		BATCH			;if =0, then use console input.
0295: E139     B7         	ORA		A             
0296: E13A     CA93E1     	JZ		GETINP1        
0297: E13D                ;                   
0298: E13D                ;   Use the submit file ($$$.sub) which is prepared by a
0299: E13D                ; SUBMIT run. It must be on drive (A) and it will be deleted
0300: E13D                ; if and error occures (like eof).
0301: E13D                ;                   
0302: E13D     3ABFE7     	LDA		CDRIVE		;select drive 0 if need be.
0303: E140     B7         	ORA		A             
0304: E141     3E00       	MVI		A,0			;always use drive A for submit.
0305: E143     C4BAE0     	CNZ		DSKSEL		;select it if required.
0306: E146     117CE7     	LXI		D,BATCHFCB    
0307: E149     CDC8E0     	CALL	OPEN		;look for it.
0308: E14C     CA93E1     	JZ		GETINP1		;if not there, use normal input.
0309: E14F     3A8BE7     	LDA		BATCHFCB+15	;get last record number+1.
0310: E152     3D         	DCR		A             
0311: E153     329CE7     	STA		BATCHFCB+32   
0312: E156     117CE7     	LXI		D,BATCHFCB    
0313: E159     CDF6E0     	CALL	RDREC		;read last record.
0314: E15C     C293E1     	JNZ		GETINP1		;quit on end of file.
0315: E15F                ;                   
0316: E15F                ;   Move this record into input buffer.
0317: E15F                ;                   
0318: E15F     1107E0     	LXI		D,InBuffCount 
0319: E162     218000     	LXI		H,Pg0Buffer	;data was read into buffer here.
0320: E165     06E006     	MVI		B,InBuffSize		;all 128 characters may be used.
0321: E167     CD15E4     	CALL	HL2DE		;(HL) to (DE), (B) bytes.
0322: E16A     218AE7     	LXI		H,BATCHFCB+14 
0323: E16D     3600       	MVI		M,0			;zero out the 's2' byte.
0324: E16F     23         	INX		H			;and decrement the record count.
0325: E170     35         	DCR		M             
0326: E171     117CE7     	LXI		D,BATCHFCB	;close the batch file now.
0327: E174     CDD7E0     	CALL	CLOSE         
0328: E177     CA93E1     	JZ		GETINP1		;quit on an error.
0329: E17A     3ABFE7     	LDA		CDRIVE		;re-select previous drive if need be.
0330: E17D     B7         	ORA		A             
0331: E17E     C4BAE0     	CNZ		DSKSEL		;don't do needless selects.
0332: E181                ;                   
0333: E181                ;   Print line just read on console.
0334: E181                ;                   
0335: E181     2108E0     	LXI		H,InBuff      
0336: E184     CDA9E0     	CALL	PLINE2        
0337: E187     CDBFE1     	CALL	CHKCON		;check console, quit on a key.
0338: E18A     CAA4E1     	JZ		GETINP2		;jump if no key is pressed.
0339: E18D                ;                   
0340: E18D                ;   Terminate the submit job on any keyboard input. Delete this
0341: E18D                ; file such that it is not re-started and jump to normal keyboard
0342: E18D                ; input section.    
0343: E18D                ;                   
0344: E18D     CDDAE1     	CALL	DELBATCH	;delete the batch file.
0345: E190     C355E3     	JMP		CMMND1		;and restart command input.
0346: E193                ;                   
0347: E193                ;   Get here for normal keyboard input. Delete the submit file
0348: E193                ; incase there was one.
0349: E193                ;                   
0350: E193                GETINP1:            
0351: E193     CDDAE1     	CALL	DELBATCH	;delete file ($$$.sub).
0352: E196     CD17E1     	CALL	SETCDRV		;reset active disk.
0353: E199     0E0A       	MVI		C,10		;get line from console device.
0354: E19B     1106E0     	LXI		D,InBuffStart	; point at the Inbuff construct (Size, Pos, Buffer)
0355: E19E     CD0500     	CALL	ENTRY         
0356: E1A1     CD26E1     	CALL	MOVECD		;reset current drive (again).
0357: E1A4                ;                   
0358: E1A4                ;   Convert input line to upper case.
0359: E1A4                ;                   
0360: E1A4                GETINP2:            
0361: E1A4     2107E0     	LXI		H,InBuffCount 
0362: E1A7     46         	MOV		B,M			;(B)=character counter.
0363: E1A8                GETINP3:            
0364: E1A8     23         	INX		H             
0365: E1A9     78         	MOV		A,B			;end of the line?
0366: E1AA     B7         	ORA		A             
0367: E1AB     CAB7E1     	JZ		GETINP4        
0368: E1AE     7E         	MOV		A,M			;convert to upper case.
0369: E1AF     CD2DE1     	CALL	UPPER         
0370: E1B2     77         	MOV		M,A           
0371: E1B3     05         	DCR		B			;adjust character count.
0372: E1B4     C3A8E1     	JMP		GETINP3       
0373: E1B7                GETINP4:            
0374: E1B7     77         	MOV		M,A			;add trailing null.
0375: E1B8     2108E0     	LXI		H,InBuff      
0376: E1BB     2285E0     	SHLD	InBuffAddress		;reset input line pointer.
0377: E1BE     C9         	RET                
0378: E1BF                ;                   
0379: E1BF                ;   Routine to check the console for a key pressed. The zero
0380: E1BF                ; flag is set is none, else the character is returned in (A).
0381: E1BF                ;                   
0382: E1BF                CHKCON:             
0383: E1BF     0E0B       	MVI		C,11		;check console.
0384: E1C1     CD0500     	CALL	ENTRY         
0385: E1C4     B7         	ORA		A             
0386: E1C5     C8         	RZ					;return if nothing.
0387: E1C6     0E01       	MVI		C,1			;else get character.
0388: E1C8     CD0500     	CALL	ENTRY         
0389: E1CB     B7         	ORA		A			;clear zero flag and return.
0390: E1CC     C9         	RET                
0391: E1CD                ;                   
0392: E1CD                ;   Routine to get the currently active drive number.
0393: E1CD                ;                   
0394: E1CD                GETDSK:             
0395: E1CD     0E19       	MVI		C,25          
0396: E1CF     C30500     	JMP		ENTRY         
0397: E1D2                ;                   
0398: E1D2                ;   Set the stabdard dma address.
0399: E1D2                ;                   
0400: E1D2                STDDMA:             
0401: E1D2     118000     	LXI		D,Pg0Buffer   
0402: E1D5                ;                   
0403: E1D5                ;   Routine to set the dma address to (DE).
0404: E1D5                ;                   
0405: E1D5                DMASET:             
0406: E1D5     0E1A       	MVI		C,26          
0407: E1D7     C30500     	JMP		ENTRY         
0408: E1DA                ;                   
0409: E1DA                ;  Delete the batch file created by SUBMIT.
0410: E1DA                ;                   
0411: E1DA                DELBATCH:           
0412: E1DA     217BE7     	LXI		H,BATCH			;is batch active?
0413: E1DD     7E         	MOV		A,M           
0414: E1DE     B7         	ORA		A             
0415: E1DF     C8         	RZ                 
0416: E1E0     3600       	MVI		M,0				;yes, de-activate it.
0417: E1E2     AF         	XRA		A             
0418: E1E3     CDBAE0     	CALL	DSKSEL			;select drive 0 for sure.
0419: E1E6     117CE7     	LXI		D,BATCHFCB		;and delete this file.
0420: E1E9     CDECE0     	CALL	DELETE        
0421: E1EC     3ABFE7     	LDA		CDRIVE			;reset current drive.
0422: E1EF     C3BAE0     	JMP		DSKSEL        
0423: E1F2                ;                   
0424: E1F2                ;   Check to two strings at (PATTRN1) and (PATTRN2). They must be
0425: E1F2                ; the same or we halt....
0426: E1F2                ;                   
0427: E1F2                ;VERIFY:            
0428: E1F2                ;	LXI		D,PATTRN1		;these are the serial number bytes.
0429: E1F2                ;	LXI		H,PATTRN2		;ditto, but how could they be different?
0430: E1F2                ;	MVI		B,6				;6 bytes each.
0431: E1F2                ;VERIFY1:           
0432: E1F2                ;	LDAX	D            
0433: E1F2                ;	CMP		M            
0434: E1F2                ;	JNZ		HALT			;jump to halt routine.
0435: E1F2                ;	INX		D            
0436: E1F2                ;	INX		H            
0437: E1F2                ;	DCR		B            
0438: E1F2                ;	JNZ		VERIFY1      
0439: E1F2                ;	RET               
0440: E1F2                ;                   
0441: E1F2                ;   Print back file name with a '?' to indicate a syntax error.
0442: E1F2                ;                   
0443: E1F2                SYNERR:             
0444: E1F2     CD95E0     	CALL	CRLF	;end current line.
0445: E1F5     2A87E0     	LHLD	ErrorMsgPointer	;this points to name in error.
0446: E1F8                SYNERR1:            
0447: E1F8     7E         	MOV	A,M	;print it until a space or null is found.
0448: E1F9     FE20       	CPI	BLANK		; Space 
0449: E1FB     CA0BE2     	JZ	SYNERR2         
0450: E1FE     B7         	ORA	A              
0451: E1FF     CA0BE2     	JZ	SYNERR2         
0452: E202     E5         	PUSH	H             
0453: E203     CD89E0     	CALL	PRINT         
0454: E206     E1         	POP	H              
0455: E207     23         	INX	H              
0456: E208     C3F8E1     	JMP	SYNERR1        
0457: E20B                SYNERR2:            
0458: E20B     3E3F       	MVI	A,QMARK		;add trailing '?'.
0459: E20D     CD89E0     	CALL	PRINT         
0460: E210     CD95E0     	CALL	CRLF          
0461: E213     CDDAE1     	CALL	DELBATCH;delete any batch file.
0462: E216     C355E3     	JMP	CMMND1	;and restart from console input.
0463: E219                ;                   
0464: E219                ;   Check character at (DE) for legal command input. Note that the
0465: E219                ; zero flag is set if the character is a delimiter.
0466: E219                ;                   
0467: E219                CHECK:              
0468: E219     1A         	LDAX	D			; Grab the character
0469: E21A     B7         	ORA		A             
0470: E21B     C8         	RZ					; Exit, its a Null (00)
0471: E21C                	                   
0472: E21C     FE20       	CPI		BLANK		; Is  less than 020H - controls character
0473: E21E     DAF2E1     	JC		SYNERR		; Yes,  Syntax error - exit CCP
0474: E221     C8         	RZ					; Exit because Space is valid delimiter.
0475: E222                	                   
0476: E222     FE3D       	CPI	EQUALS			; '=' 
0477: E224     C8         	RZ                 
0478: E225     FE5F       	CPI	USCORE			; '_' 
0479: E227     C8         	RZ                 
0480: E228     FE2E       	CPI	PERIOD			; '.' 
0481: E22A     C8         	RZ                 
0482: E22B     FE3A       	CPI	COLON			; ':'  
0483: E22D     C8         	RZ                 
0484: E22E     FE3B       	CPI	SEMIC			; ';'  
0485: E230     C8         	RZ                 
0486: E231     FE3C       	CPI	LESSTH			; '<' 
0487: E233     C8         	RZ                 
0488: E234     FE3E       	CPI	GRTTHAN			; '>'
0489: E236     C8         	RZ                 
0490: E237     C9         	RET					; Character is legal, but not a delimiter
0491: E238                ;                   
0492: E238                ;   Get the next non-blank character from (DE).
0493: E238                ;                   
0494: E238                NONBLANK:           
0495: E238     1A         	LDAX	D			; get the next character
0496: E239     B7         	ORA		A			;Since string ends with a null.
0497: E23A     C8         	RZ					; we return here if its 00
0498: E23B     FE20       	CPI		BLANK		; Is it a space?
0499: E23D     C0         	RNZ					; No, then we have the next non-space char
0500: E23E                	                   
0501: E23E     13         	INX		D			; since it a space we need to look at the next character
0502: E23F     C338E2     	JMP		NONBLANK      
0503: E242                ;                   
0504: E242                ;   Add (HL)=(HL)+(A)
0505: E242                ;                   
0506: E242                ADDHL:              
0507: E242     85         	ADD		L             
0508: E243     6F         	MOV		L,A           
0509: E244     D0         	RNC					;take care of any carry.
0510: E245     24         	INR		H             
0511: E246     C9         	RET                
0512: E247                ;                   
0513: E247                ;   Convert the first name in (FCB).
0514: E247                ;                   
0515: E247                CONVFST:            
0516: E247     3E00       	MVI	A,0		; set up index for first filename
0517: E249                ;                   
0518: E249                ;   Format a file name (convert * to '?', etc.). On return,
0519: E249                ; (A)=0 is an unambigeous name was specified. Enter with (A) equal to
0520: E249                ; the position within the fcb for the name (either 0 or 16).
0521: E249                ;                   
0522: E249                CONVERT:            
0523: E249     219DE7     	LXI		H,FCB		; point at FCB setup by CCP
0524: E24C     CD42E2     	CALL	ADDHL		; now pointing at correct FCB
0525: E24F     E5         	PUSH	H			; save    
0526: E250     E5         	PUSH	H             
0527: E251     AF         	XRA		A             
0528: E252     32C0E7     	STA		CHGDRV		; initialize drive change flag - no change.
0529: E255     2A85E0     	LHLD	InBuffAddress		; set (HL) as pointer into input line.
0530: E258     EB         	XCHG				; put line pointer in DE for call
0531: E259     CD38E2     	CALL	NONBLANK	; return the next non-blank character in A
0532: E25C     EB         	XCHG				; put line buffer pointer in HL for now
0533: E25D     2287E0     	SHLD	ErrorMsgPointer		; save pointer here for any error message.
0534: E260     EB         	XCHG				; put line buffer pointer back in DE
0535: E261     E1         	POP		H			; retreive the CCP created FCB
0536: E262     1A         	LDAX	D			; get first character.
0537: E263     B7         	ORA		A			; is it a null 00 ?
0538: E264     CA72E2     	JZ		CONVRT1		; Yes, this FCB is empty (no argument)
0539: E267                	                   
0540: E267     DE40       	SBI		040H		; 'A'-1	;might be a drive name, convert to binary.
0541: E269     47         	MOV		B,A			; and save in case its a drive specifier.
0542: E26A     13         	INX		D			; get the next character 
0543: E26B     1A         	LDAX	D             
0544: E26C     FE3A       	CPI		COLON		; is it ':'
0545: E26E     CA79E2     	JZ		CONVRT2		; Yes, then we have a drive specification
0546: E271     1B         	DCX		D			; No, move pointer back to the start of the line.
0547: E272                CONVRT1:            
0548: E272     3ABFE7     	LDA		CDRIVE		; get current drive
0549: E275     77         	MOV		M,A			; put into the CCP FCB
0550: E276     C37FE2     	JMP		CONVRT3       
0551: E279                CONVRT2:            
0552: E279     78         	MOV		A,B			; get the saved drive number
0553: E27A     32C0E7     	STA		CHGDRV		; set change in drives flag.
0554: E27D     70         	MOV		M,B			; put new drive number in FCB
0555: E27E     13         	INX		D			; point past drive number
0556: E27F                ;                   
0557: E27F                ;   Convert the basic file name.
0558: E27F                ;                   
0559: E27F                CONVRT3:            
0560: E27F     0608       	MVI		B,08H		; File name size
0561: E281                CONVRT4:            
0562: E281     CDC9E2     	CALL	DECODENAME	; Expand all 8 characters in name
0563: E284                ;	CALL	CHECK		; Legal input character ?
0564: E284                ;	JZ		PADNAME		; its a delimiter, skip the rest of the filename
0565: E284                ;	INX		H            
0566: E284                ;	CPI		ASTRK		; '*'	;note that an '*' will fill the remaining
0567: E284                ;	JNZ		CONVRT5		; otherwise move to the next character and process.
0568: E284                ;	                  
0569: E284                ;	MVI		M,QMARK		; '?'
0570: E284                ;	JMP		CONVRT6      
0571: E284                ;CONVRT5:				; move on to the next character
0572: E284                ;	MOV		M,A			; put character in FCB
0573: E284                ;	INX		D			; move to next character in input line buffer
0574: E284                ;CONVRT6:           
0575: E284                ;	DCR		B			; decrement counter
0576: E284                ;	JNZ		CONVRT4		; loop if not done with fileName
0577: E284                CONVRT7:            
0578: E284     CD19E2     	CALL	CHECK		; Do we have a delimiter ?.
0579: E287     CA8EE2     	JZ		GETEXT		; Yes, process the extension
0580: E28A     13         	INX		D			; No, point a the next character
0581: E28B     C384E2     	JMP		CONVRT7		; and see if its a demiliter
0582: E28E                ;PADNAME:           
0583: E28E                ;	INX		H			; blank fill the remaining file name.
0584: E28E                ;	MVI		M,BLANK		; store the blank
0585: E28E                ;	DCR		B			; keep count
0586: E28E                ;	JNZ		PADNAME		; loop till done
0587: E28E                ;                   
0588: E28E                ;   Get the extension and convert it.
0589: E28E                ;                   
0590: E28E                GETEXT:             
0591: E28E     0603       	MVI		B,03H		; file extension size
0592: E290     FE2E       	CPI		PERIOD		; do we have the Period '.'
0593: E292                ;	JNZ		PADEXT		; No, Pad fill the extension
0594: E292     CA9BE2     	JZ		GETEXT1		; yes, process the extension
0595: E295     CDE1E2     	CALL	PADFIELD	; No, Pad fill the extension
0596: E298     C3A9E2     	JMP		CLEAREXTENT	; process the stuff after the extension
0597: E29B                GETEXT1:            
0598: E29B     13         	INX		D			; get past the period
0599: E29C                :                   
0600: E29C     CDC9E2     	CALL	DECODENAME	; Expand all 3 characters in extension
0601: E29F                ;	CALL	CHECK		; Legal input character ?		
0602: E29F                ;	JZ		PADEXT		; its a delimiter, so pad the rest of the extension
0603: E29F                ;	INX		H			; point at next spot in the CCP FCB
0604: E29F                ;	CPI		ASTRK		; ; '*'	;note that an '*' will fill the remaining
0605: E29F                ;	JNZ		GETEXT2		; otherwise move to the next character and process.
0606: E29F                ;	                  
0607: E29F                ;	MVI		M,QMARK		;'?'
0608: E29F                ;	JMP		GETEXT3      
0609: E29F                ;GETEXT2:				; move on to the next character
0610: E29F                ;	MOV		M,A			; put character in FCB
0611: E29F                ;	INX		D			; move to next character in input line buffer
0612: E29F                ;GETEXT3:           
0613: E29F                ;	DCR		B			; decrement counter
0614: E29F                ;	JNZ		GETEXT1		; loop if not done with file extension
0615: E29F                GETEXT4:            
0616: E29F     CD19E2     	CALL	CHECK		; Do we have a delimiter ?.
0617: E2A2     CAA9E2     	JZ		CLEAREXTENT	; Yes, Clear the EX, S1 & S2
0618: E2A5     13         	INX		D			; No, point a the next character
0619: E2A6     C39FE2     	JMP		GETEXT4		; and see if its a demiliter
0620: E2A9                	                   
0621: E2A9                ;PADEXT:            
0622: E2A9                ;	INX		H			; blank fill the remaining extension.
0623: E2A9                ;	MVI		M,BLANK		; store the blank
0624: E2A9                ;	DCR		B			; keep count
0625: E2A9                ;	JNZ		PADEXT		; loop till done
0626: E2A9                	                   
0627: E2A9                CLEAREXTENT:        
0628: E2A9     0603       	MVI		B,03H		; set count for clearing EX, S1 & S2
0629: E2AB                CLEAREXTENT1:       
0630: E2AB     23         	INX		H			; point at location in the CCP FCB
0631: E2AC     3600       	MVI		M,0			; initialize it
0632: E2AE     05         	DCR		B			; keep count
0633: E2AF     C2ABE2     	JNZ		CLEAREXTENT1	; loop til done
0634: E2B2     EB         	XCHG               
0635: E2B3     2285E0     	SHLD	InBuffAddress		; save current input line pointer.
0636: E2B6     E1         	POP		H			; point at correct CCP FCB
0637: E2B7                ;                   
0638: E2B7                ;   Check to see if this is an ambigeous file name specification.
0639: E2B7                ; Set the (A) register to non zero if it is.
0640: E2B7                ;                   
0641: E2B7                ;AFN - Ambiguous File Name
0642: E2B7     010B00     	LXI		B,11		; set name & Extension length .
0643: E2BA                AFN:                
0644: E2BA     23         	INX		H             
0645: E2BB     7E         	MOV		A,M           
0646: E2BC     FE3F       	CPI		QMARK		; '?'	;any question marks?
0647: E2BE     C2C2E2     	JNZ		AFN1          
0648: E2C1     04         	INR		B			; increment count
0649: E2C2                AFN1:               
0650: E2C2     0D         	DCR		C             
0651: E2C3     C2BAE2     	JNZ		AFN			; loop if not done
0652: E2C6     78         	MOV		A,B			; B has the question mark count 
0653: E2C7     B7         	ORA		A			; set the Z flag for calling routine
0654: E2C8     C9         	RET                
0655: E2C9                	                   
0656: E2C9                ;                   
0657: E2C9                ; DECODENAME -	expands the name/ext to all 8/3 characters by either padding with SPACES
0658: E2C9                ;				or, replaceing *'s with ?s for the remainder of the name/ext
0659: E2C9                ;                   
0660: E2C9                DECODENAME:         
0661: E2C9     CD19E2     	CALL	CHECK		; Legal input character ?
0662: E2CC     CAE1E2     	JZ		PADFIELD	; its a delimiter, skip the rest of the name/ext 
0663: E2CF     23         	INX		HL            
0664: E2D0     FE2A       	CPI		ASTRK		; '*'	;note that an '*' will fill the remaining
0665: E2D2     C2DAE2     	JNZ		DECODENAME1	; otherwise move to the next character and process.
0666: E2D5     363F       	MVI		M,QMARK		; '?'
0667: E2D7     C3DCE2     	JMP		DECODENAME2   
0668: E2DA                DECODENAME1:        
0669: E2DA     77         	MOV		M,A			; put character in FCB
0670: E2DB     13         	INX		D			; move to next character in input line buffer
0671: E2DC                DECODENAME2:        
0672: E2DC     05         	DCR		B			; decrement counter
0673: E2DD     C2C9E2     	JNZ		DECODENAME	; loop if not done with fileName
0674: E2E0     C9         	RET					; exit when done!
0675: E2E1                	                   
0676: E2E1                PADFIELD:            
0677: E2E1     23         	INX		H			; blank fill the remaining file name.
0678: E2E2     3620       	MVI		M,BLANK		; store the blank
0679: E2E4     05         	DCR		B			; keep count
0680: E2E5     C2E1E2     	JNZ		PADFIELD		; loop till done
0681: E2E8     C9         	RET					; exit when done!
0682: E2E9                		                  
0683: E2E9                ;                   
0684: E2E9                ;   CP/M command table. Note commands can be either 3 or 4 characters long.
0685: E2E9                ;                   
0686: E2E9                NUMCMDS	EQU	6	;number of commands
0687: E2E9                CMDTBL:             
0688: E2E9     44495220   	DB	'DIR '		; 0     
0689: E2ED     45524120   	DB	'ERA '		; 1     
0690: E2F1     54595045   	DB	'TYPE'		; 2     
0691: E2F5     53415645   	DB	'SAVE'		; 3     
0692: E2F9     52454E20   	DB	'REN '		; 4     
0693: E2FD     55534552   	DB	'USER'		; 5     
0694: E301                	;Unknown		; 6      
0695: E301                ;                   
0696: E301                ;   The following six bytes must agree with those at (PATTRN2)
0697: E301                ; or cp/m will HALT. Why?
0698: E301                ;                   
0699: E301                ;PATTRN1:           
0700: E301                ;	DB	0,22,0,0,0,0;(* serial number bytes *).
0701: E301                ;                   
0702: E301                ;   Search the command table for a match with what has just
0703: E301                ; been entered. If a match is found, then we jump to the
0704: E301                ; proper section. Else jump to (UNKNOWN).
0705: E301                ; On return, the (C) register is set to the command number
0706: E301                ; that matched (or NUMCMDS+1 if no match).
0707: E301                ;                   
0708: E301                SEARCH:             
0709: E301     21E9E2     	LXI	H,CMDTBL       
0710: E304     0E00       	MVI	C,0            
0711: E306                SEARCH1:            
0712: E306     79         	MOV	A,C            
0713: E307     FE06       	CPI	NUMCMDS	;this commands exists.
0714: E309     D0         	RNC                
0715: E30A     119EE7     	LXI	D,FCB+1	;check this one.
0716: E30D     0604       	MVI	B,4	;max command length.
0717: E30F                SEARCH2:            
0718: E30F     1A         	LDAX	D             
0719: E310     BE         	CMP	M              
0720: E311     C222E3     	JNZ	SEARCH3	;not a match.
0721: E314     13         	INX	D              
0722: E315     23         	INX	H              
0723: E316     05         	DCR	B              
0724: E317     C20FE3     	JNZ	SEARCH2        
0725: E31A     1A         	LDAX	D	;allow a 3 character command to match.
0726: E31B     FE20       	CPI	BLANK          
0727: E31D     C227E3     	JNZ	SEARCH4        
0728: E320     79         	MOV	A,C	;set return register for this command.
0729: E321     C9         	RET                
0730: E322                SEARCH3:            
0731: E322     23         	INX	H              
0732: E323     05         	DCR	B              
0733: E324     C222E3     	JNZ	SEARCH3        
0734: E327                SEARCH4:            
0735: E327     0C         	INR	C              
0736: E328     C306E3     	JMP	SEARCH1        
0737: E32B                ;                   
0738: E32B                ;   Set the input buffer to empty and then start the command
0739: E32B                ; processor (ccp).  
0740: E32B                ;                   
0741: E32B                CLEARBUF:           
0742: E32B     AF         XRA	A               
0743: E32C     3207E0     	STA	InBuffCount			;second byte is actual length.
0744: E32F                ;                   
0745: E32F                ;**************************************************************
0746: E32F                ;*                  
0747: E32F                ;*                  
0748: E32F                ;* C C P  -   C o n s o l e   C o m m a n d   P r o c e s s o r
0749: E32F                ;*                  
0750: E32F                ;                   
0751: E32F                ;   On entry (C) points at Current disk & user (defaultDisk 0004)
0752: E32F                ;**************************************************************
0753: E32F                ;*                  
0754: E32F                COMMAND:            
0755: E32F     317BE7     	LXI			SP,CCPStack				; Use dedicated stack space.
0756: E332     C5         	PUSH		B						; (C) should be equal to currentDisk where:
0757: E333     79         	MOV			A,C						; (uuuudddd) where 'uuuu' is the user number
0758: E334     1F         	RAR									; and 'dddd' is the drive number.
0759: E335     1F         	RAR                
0760: E336     1F         	RAR                
0761: E337     1F         	RAR                
0762: E338     E60F       	ANI			0FH						; isolate the user number.
0763: E33A     5F         	MOV			E,A						; and put into E for call
0764: E33B     CD12E1     	CALL		GetSetCurrentUser		; to set the current user
0765: E33E     CDB5E0     	CALL		ResetDiskSystem			;reset the disk system.
0766: E341     327BE7     	STA	BATCH	;clear batch mode flag.
0767: E344     C1         	POP	B              
0768: E345     79         	MOV	A,C            
0769: E346     E60F       	ANI	0FH	;isolate the drive number.
0770: E348     32BFE7     	STA	CDRIVE	;and save.
0771: E34B     CDBAE0     	CALL	DSKSEL	;...and select.
0772: E34E     3A07E0     	LDA	InBuffCount    
0773: E351     B7         	ORA	A	;anything in input buffer already?
0774: E352     C26BE3     	JNZ	CMMND2	;yes, we just process it.
0775: E355                ;                   
0776: E355                ;   Entry point to get a command line from the console.
0777: E355                ;                   
0778: E355                CMMND1:             
0779: E355     317BE7     	LXI	SP,CCPStack;set stack straight.
0780: E358     CD95E0     	CALL	CRLF	;start a new line on the screen.
0781: E35B     CDCDE1     	CALL	GETDSK	;get current drive.
0782: E35E     C661       	ADI	061H		; 'a'    
0783: E360     CD89E0     	CALL	PRINT	;print current drive.
0784: E363     3E3E       	MVI	A,GRTTHAN	; '>'
0785: E365     CD89E0     	CALL	PRINT	;and add prompt.
0786: E368     CD36E1     	CALL	GETINP	;get line from user.
0787: E36B                ;                   
0788: E36B                ;   Process command line here.
0789: E36B                ;                   
0790: E36B                CMMND2:             
0791: E36B     118000     	LXI	D,Pg0Buffer    
0792: E36E     CDD5E1     	CALL	DMASET	;set standard dma address.
0793: E371     CDCDE1     	CALL	GETDSK        
0794: E374     32BFE7     	STA	CDRIVE	;set current drive.
0795: E377     CD47E2     	CALL	CONVFST	;convert name typed in.
0796: E37A     C4F2E1     	CNZ	SYNERR	;wild cards are not allowed.
0797: E37D     3AC0E7     	LDA	CHGDRV	;if a change in drives was indicated,
0798: E380     B7         	ORA	A	;then treat this as an unknown command
0799: E381     C278E6     	JNZ	UNKNOWN	;which gets executed.
0800: E384     CD01E3     	CALL	SEARCH	;else search command table for a match.
0801: E387                ;                   
0802: E387                ;   Note that an unknown command returns
0803: E387                ; with (A) pointing to the last address
0804: E387                ; in our table which is (UNKNOWN).
0805: E387                ;                   
0806: E387     2194E3     	LXI	H,CMDADR;now, look thru our address table for command (A).
0807: E38A     5F         	MOV	E,A	;set (DE) to command number.
0808: E38B     1600       	MVI	D,0            
0809: E38D     19         	DAD	D              
0810: E38E     19         	DAD	D	;(HL)=(CMDADR)+2*(command number).
0811: E38F     7E         	MOV	A,M	;now pick out this address.
0812: E390     23         	INX	H              
0813: E391     66         	MOV	H,M            
0814: E392     6F         	MOV	L,A            
0815: E393     E9         	PCHL		;now execute it.
0816: E394                ;                   
0817: E394                ;   CP/M command address table.
0818: E394                ;                   
0819: E394                CMDADR:             
0820: E394     4AE4       	DW	DIRECT		; 0     
0821: E396     F2E4       	DW	ERASE		; 1      
0822: E398     30E5       	DW	TYPE		; 2       
0823: E39A     80E5       	DW	SAVE		; 3       
0824: E39C     E3E5       	DW	RENAME		; 4     
0825: E39E     61E6       	DW	USER		; 5       
0826: E3A0     78E6       	DW	UNKNOWN		; 6    
0827: E3A2                ;                   
0828: E3A2                ;   Halt the system. Reason for this is unknown at present.
0829: E3A2                ;                   
0830: E3A2                HALT:               
0831: E3A2     21F376     	LXI	H,76F3H	;'DI HLT' instructions.
0832: E3A5     2200E0     	SHLD	CBASE         
0833: E3A8     2100E0     	LXI	H,CBASE        
0834: E3AB     E9         	PCHL               
0835: E3AC                ;                   
0836: E3AC                ;   Read error while TYPEing a file.
0837: E3AC                ;                   
0838: E3AC                RDERROR:            
0839: E3AC     01B2E3     	LXI	B,RDERR        
0840: E3AF     C3A4E0     	JMP	PLINE          
0841: E3B2                RDERR:              
0842: E3B2     52454144204552524F5200 	DB	'Read error',0  
0843: E3BD                ;                   
0844: E3BD                ;   Required file was not located.
0845: E3BD                ;                   
0846: E3BD                                    
0847: E3BD                NONE:               
0848: E3BD     01C3E3     	LXI	B,NOFILE       
0849: E3C0     C3A4E0     	JMP	PLINE          
0850: E3C3                NOFILE:             
0851: E3C3     4E4F2046494C4500 	DB	'No file',EndOfMessage
0852: E3CB                ;                   
0853: E3CB                ;   Decode a command of the form 'A>filename number{ filename}.
0854: E3CB                ; Note that a drive specifier is not allowed on the first file
0855: E3CB                ; name. On return, the number is in register (A). Any error
0856: E3CB                ; causes 'filename?' to be printed and the command is aborted.
0857: E3CB                ;                   
0858: E3CB                DECODE:             
0859: E3CB     CD47E2     	CALL	CONVFST		;convert first filename.
0860: E3CE     3AC0E7     	LDA		CHGDRV		;do not allow a drive to be specified.
0861: E3D1     B7         	ORA		A             
0862: E3D2     C2F2E1     	JNZ		SYNERR		; exit with a syntax error
0863: E3D5     219EE7     	LXI		H,FCB+1		;convert number now.
0864: E3D8     010B00     	LXI		B,11		;(B)=sum register, (C)=max digit count.
0865: E3DB                DECODE1:            
0866: E3DB     7E         	MOV		A,M			; get the caracter from the CCP FCB
0867: E3DC     FE20       	CPI		BLANK		; a space terminates the numeral.
0868: E3DE     CA06E4     	JZ		PADNUMBER	; skip, the rest must be blanks
0869: E3E1     23         	INX		H			; bump pointer
0870: E3E2     D630       	SUI		030H  		; '0'	make binary from ascii. ZERO ????
0871: E3E4     FE0A       	CPI		10			; legal digit?
0872: E3E6     D2F2E1     	JNC		SYNERR		; exit with syntax error
0873: E3E9     57         	MOV		D,A			; yes, save the number in (D).
0874: E3EA                	;                  
0875: E3EA     78         	MOV		A,B			; compute (B)=(B)*10 and check for overflow.
0876: E3EB     E6E0       	ANI		0E0H          
0877: E3ED     C2F2E1     	JNZ		SYNERR		; Exit with math overflow error??
0878: E3F0     78         	MOV		A,B           
0879: E3F1     07         	RLC                
0880: E3F2     07         	RLC                
0881: E3F3     07         	RLC					;(A)=(B)*8 
0882: E3F4     80         	ADD		B			;.......*9
0883: E3F5     DAF2E1     	JC		SYNERR		; Exit with math overflow error??	
0884: E3F8     80         	ADD		B			;.......*10
0885: E3F9     DAF2E1     	JC		SYNERR		; Exit with math overflow error??
0886: E3FC     82         	ADD		D			;	add in new digit now.
0887: E3FD     DAF2E1     	JC		SYNERR		; Exit with math overflow error??
0888: E400     47         	MOV		B,A			;	and save result in B (subtotal)
0889: E401     0D         	DCR		C			;	only look at 11 digits.
0890: E402     C2DBE3     	JNZ		DECODE1       
0891: E405     C9         	RET					; return with value in (A)
0892: E406                PADNUMBER:          
0893: E406     7E         	MOV		A,M			; spaces must follow (why?).
0894: E407     FE20       	CPI		BLANK		; is it a blank
0895: E409     C2F2E1     	JNZ		SYNERR		; exit with syntax error
0896: E40C     23         	INX		H			; point at next
0897: E40D     0D         	DCR		C             
0898: E40E     C206E4     	JNZ		PADNUMBER	; loop till done
0899: E411     78         	MOV		A,B			;set (A)=the numeric value entered.
0900: E412     C9         	RET                
0901: E413                ;                   
0902: E413                ;   Move 3 bytes from (HL) to (DE). Note that there is only
0903: E413                ; one reference to this at (A2D5h).
0904: E413                ;                   
0905: E413                MOVE3:              
0906: E413     0603       	MVI	B,3            
0907: E415                ;                   
0908: E415                ;   Move (B) bytes from (HL) to (DE).
0909: E415                ;                   
0910: E415                HL2DE:              
0911: E415     7E         	MOV	A,M            
0912: E416     12         	STAX	D             
0913: E417     23         	INX	H              
0914: E418     13         	INX	D              
0915: E419     05         	DCR	B              
0916: E41A     C215E4     	JNZ	HL2DE          
0917: E41D     C9         	RET                
0918: E41E                ;                   
0919: E41E                ;   Compute (HL)=(Pg0Buffer)+(A)+(C) and get the byte that's here.
0920: E41E                ;                   
0921: E41E                EXTRACT:            
0922: E41E     218000     	LXI	H,Pg0Buffer    
0923: E421     81         	ADD	C              
0924: E422     CD42E2     	CALL	ADDHL         
0925: E425     7E         	MOV	A,M            
0926: E426     C9         	RET                
0927: E427                ;                   
0928: E427                ;  Check drive specified. If it means a change, then the new
0929: E427                ; drive will be selected. In any case, the drive byte of the
0930: E427                ; fcb will be set to null (means use current drive).
0931: E427                ;                   
0932: E427                DSELECT:            
0933: E427     AF         	XRA		A             
0934: E428     329DE7     	STA		FCB				; null out first byte of fcb.
0935: E42B     3AC0E7     	LDA		CHGDRV			; is a drive change indicated?
0936: E42E     B7         	ORA		A             
0937: E42F     C8         	RZ						; No, drive OK
0938: E430     3D         	DCR		A				; yes, is it the same as the current drive?
0939: E431     21BFE7     	LXI		H,CDRIVE      
0940: E434     BE         	CMP		M				; FCB drive number same as this?
0941: E435     C8         	RZ						; Yes, return 					
0942: E436     C3BAE0     	JMP		DSKSEL			;	no. Select it then.
0943: E439                ;                   
0944: E439                ;   Check the drive selection and reset it to the previous
0945: E439                ; drive if it was changed for the preceeding command.
0946: E439                ;                   
0947: E439                RESETDR:            
0948: E439     3AC0E7     	LDA	CHGDRV	;drive change indicated?
0949: E43C     B7         	ORA	A              
0950: E43D     C8         	RZ                 
0951: E43E     3D         	DCR	A	;yes, was it a different drive?
0952: E43F     21BFE7     	LXI	H,CDRIVE       
0953: E442     BE         	CMP	M              
0954: E443     C8         	RZ                 
0955: E444     3ABFE7     	LDA	CDRIVE	;yes, re-select our old drive.
0956: E447     C3BAE0     	JMP	DSKSEL         
0957: E44A                ;                   
0958: E44A                ;**************************************************************
0959: E44A                ;*                  
0960: E44A                ;*           D I R E C T O R Y   C O M M A N D
0961: E44A                ;*                  
0962: E44A                ;**************************************************************
0963: E44A                ;                   
0964: E44A                DIRECT:             
0965: E44A     CD47E2     	CALL	CONVFST	;convert file name.
0966: E44D     CD27E4     	CALL	DSELECT	;select indicated drive.
0967: E450     219EE7     	LXI	H,FCB+1	;was any file indicated?
0968: E453     7E         	MOV	A,M            
0969: E454     FE20       	CPI	BLANK          
0970: E456     C262E4     	JNZ	DIRECT2        
0971: E459     060B       	MVI	B,11	;no. Fill field with '?' - same as *.*.
0972: E45B                DIRECT1:            
0973: E45B     363F       	MVI	M,QMARK		; '?' 
0974: E45D     23         	INX	H              
0975: E45E     05         	DCR	B              
0976: E45F     C25BE4     	JNZ	DIRECT1        
0977: E462                DIRECT2:            
0978: E462     1E00       	MVI	E,0	;set initial cursor position.
0979: E464     D5         	PUSH	D             
0980: E465     CDE6E0     	CALL	SRCHFCB	;get first file name.
0981: E468     CCBDE3     	CZ	NONE	;none found at all?
0982: E46B                DIRECT3:            
0983: E46B     CAEEE4     	JZ	DIRECT9	;terminate if no more names.
0984: E46E     3ABEE7     	LDA	RTNCODE	;get file's position in segment (0-3).
0985: E471     0F         	RRC                
0986: E472     0F         	RRC                
0987: E473     0F         	RRC                
0988: E474     E660       	ANI	60H	;(A)=position*32
0989: E476     4F         	MOV	C,A            
0990: E477     3E0A       	MVI	A,10           
0991: E479     CD1EE4     	CALL	EXTRACT	;extract the tenth entry in fcb.
0992: E47C     17         	RAL		;check system file status bit.
0993: E47D     DAE2E4     	JC	DIRECT8	;we don't list them.
0994: E480     D1         	POP	D              
0995: E481     7B         	MOV	A,E	;bump name count.
0996: E482     1C         	INR	E              
0997: E483     D5         	PUSH	D             
0998: E484     E603       	ANI	03H	;at end of line?
0999: E486     F5         	PUSH	PSW           
1000: E487     C29FE4     	JNZ	DIRECT4        
1001: E48A     CD95E0     	CALL	CRLF	;yes, end this line and start another.
1002: E48D     C5         	PUSH	B             
1003: E48E     CDCDE1     	CALL	GETDSK	;start line with ('A:').
1004: E491     C1         	POP	B              
1005: E492     C641       	ADI	041H	; 'A'     
1006: E494     CD8FE0     	CALL	PRINTB        
1007: E497     3E3A       	MVI	A, COLON		; ':'
1008: E499     CD8FE0     	CALL	PRINTB        
1009: E49C     C3A7E4     	JMP	DIRECT5        
1010: E49F                DIRECT4:            
1011: E49F     CD9FE0     	CALL	SPACE	;add seperator between file names.
1012: E4A2     3E3A       	MVI	A, COLON	;':'  
1013: E4A4     CD8FE0     	CALL	PRINTB        
1014: E4A7                DIRECT5:            
1015: E4A7     CD9FE0     	CALL	SPACE         
1016: E4AA     0601       	MVI	B,1	;'extract' each file name character at a time.
1017: E4AC                DIRECT6:            
1018: E4AC     78         	MOV	A,B            
1019: E4AD     CD1EE4     	CALL	EXTRACT       
1020: E4B0     E67F       	ANI	7FH	;strip bit 7 (status bit).
1021: E4B2     FE20       	CPI	BLANK	;are we at the end of the name?
1022: E4B4     C2CCE4     	JNZ	DRECT65        
1023: E4B7     F1         	POP	PSW	;yes, don't print spaces at the end of a line.
1024: E4B8     F5         	PUSH	PSW           
1025: E4B9     FE03       	CPI	3              
1026: E4BB     C2CAE4     	JNZ	DRECT63        
1027: E4BE     3E09       	MVI	A,9	;first check for no extension.
1028: E4C0     CD1EE4     	CALL	EXTRACT       
1029: E4C3     E67F       	ANI	7FH            
1030: E4C5     FE20       	CPI	BLANK          
1031: E4C7     CAE1E4     	JZ	DIRECT7	;don't print spaces.
1032: E4CA                DRECT63:            
1033: E4CA     3E20       	MVI	A,BLANK	;else print them.
1034: E4CC                DRECT65:            
1035: E4CC     CD8FE0     	CALL	PRINTB        
1036: E4CF     04         	INR	B	;bump to next character psoition.
1037: E4D0     78         	MOV	A,B            
1038: E4D1     FE0C       	CPI	12	;end of the name?
1039: E4D3     D2E1E4     	JNC	DIRECT7        
1040: E4D6     FE09       	CPI	9	;nope, starting extension?
1041: E4D8     C2ACE4     	JNZ	DIRECT6        
1042: E4DB     CD9FE0     	CALL	SPACE	;yes, add seperating space.
1043: E4DE     C3ACE4     	JMP	DIRECT6        
1044: E4E1                DIRECT7:            
1045: E4E1     F1         	POP	PSW	;get the next file name.
1046: E4E2                DIRECT8:            
1047: E4E2     CDBFE1     	CALL	CHKCON	;first check console, quit on anything.
1048: E4E5     C2EEE4     	JNZ	DIRECT9        
1049: E4E8     CDE1E0     	CALL	SRCHNXT	;get next name.
1050: E4EB     C36BE4     	JMP	DIRECT3	;and continue with our list.
1051: E4EE                DIRECT9:            
1052: E4EE     D1         	POP	D	;restore the stack and return to command level.
1053: E4EF     C356E7     	JMP	GETBACK        
1054: E4F2                ;                   
1055: E4F2                ;**************************************************************
1056: E4F2                ;*                  
1057: E4F2                ;*                E R A S E   C O M M A N D
1058: E4F2                ;*                  
1059: E4F2                ;**************************************************************
1060: E4F2                ;                   
1061: E4F2                ERASE:              
1062: E4F2     CD47E2     	CALL	CONVFST	;convert file name.
1063: E4F5     FE0B       	CPI	11	;was '*.*' entered?
1064: E4F7     C215E5     	JNZ	ERASE1         
1065: E4FA     0125E5     	LXI	B,YESNO	;yes, ask for confirmation.
1066: E4FD     CDA4E0     	CALL	PLINE         
1067: E500     CD36E1     	CALL	GETINP        
1068: E503     2107E0     	LXI	H,InBuffCount  
1069: E506     35         	DCR	M	;must be exactly 'y'.
1070: E507     C255E3     	JNZ	CMMND1         
1071: E50A     23         	INX	H              
1072: E50B     7E         	MOV	A,M            
1073: E50C     FE59       	CPI	059H	; 'Y'     
1074: E50E     C255E3     	JNZ	CMMND1         
1075: E511     23         	INX	H              
1076: E512     2285E0     	SHLD	InBuffAddress	;save input line pointer.
1077: E515                ERASE1:             
1078: E515     CD27E4     	CALL	DSELECT	;select desired disk.
1079: E518     119DE7     	LXI	D,FCB          
1080: E51B     CDECE0     	CALL	DELETE	;delete the file.
1081: E51E     3C         	INR	A              
1082: E51F     CCBDE3     	CZ	NONE	;not there?
1083: E522     C356E7     	JMP	GETBACK	;return to command level now.
1084: E525                YESNO:              
1085: E525     414C4C2028592F4E293F00 	DB	'All (y/n)?',0  
1086: E530                ;                   
1087: E530                ;**************************************************************
1088: E530                ;*                  
1089: E530                ;*            T Y P E   C O M M A N D
1090: E530                ;*                  
1091: E530                ;**************************************************************
1092: E530                ;                   
1093: E530                TYPE:               
1094: E530     CD47E2     	CALL	CONVFST	;convert file name.
1095: E533     C2F2E1     	JNZ	SYNERR	;wild cards not allowed.
1096: E536     CD27E4     	CALL	DSELECT	;select indicated drive.
1097: E539     CDCDE0     	CALL	OPENFCB	;open the file.
1098: E53C     CA7AE5     	JZ	TYPE5	;not there?
1099: E53F     CD95E0     	CALL	CRLF	;ok, start a new line on the screen.
1100: E542     21C1E7     	LXI	H,NBYTES;initialize byte counter.
1101: E545     36FF       	MVI	M,0FFH	;set to read first sector.
1102: E547                TYPE1:              
1103: E547     21C1E7     	LXI	H,NBYTES       
1104: E54A                TYPE2:              
1105: E54A     7E         	MOV	A,M	;have we written the entire sector?
1106: E54B     FE80       	CPI	LogicalSecSize 
1107: E54D     DA5AE5     	JC	TYPE3           
1108: E550     E5         	PUSH	H	;yes, read in the next one.
1109: E551     CDFBE0     	CALL	READFCB       
1110: E554     E1         	POP	H              
1111: E555     C273E5     	JNZ	TYPE4	;end or error?
1112: E558     AF         	XRA	A	;ok, clear byte counter.
1113: E559     77         	MOV	M,A            
1114: E55A                TYPE3:              
1115: E55A     34         	INR	M	;count this byte.
1116: E55B     218000     	LXI	H,Pg0Buffer	;and get the (A)th one from the buffer (Pg0Buffer).
1117: E55E     CD42E2     	CALL	ADDHL         
1118: E561     7E         	MOV	A,M            
1119: E562     FE1A       	CPI	CNTRLZ	;end of file mark?
1120: E564     CA56E7     	JZ	GETBACK         
1121: E567     CD89E0     	CALL	PRINT	;no, print it.
1122: E56A     CDBFE1     	CALL	CHKCON	;check console, quit if anything ready.
1123: E56D     C256E7     	JNZ	GETBACK        
1124: E570     C347E5     	JMP	TYPE1          
1125: E573                ;                   
1126: E573                ;   Get here on an end of file or read error.
1127: E573                ;                   
1128: E573                TYPE4:              
1129: E573     3D         	DCR	A	;read error? 
1130: E574     CA56E7     	JZ	GETBACK         
1131: E577     CDACE3     	CALL	RDERROR	;yes, print message.
1132: E57A                TYPE5:              
1133: E57A     CD39E4     	CALL	RESETDR	;and reset proper drive
1134: E57D     C3F2E1     	JMP	SYNERR	;now print file name with problem.
1135: E580                ;                   
1136: E580                ;**************************************************************
1137: E580                ;*                  
1138: E580                ;*            S A V E   C O M M A N D
1139: E580                ;*                  
1140: E580                ;**************************************************************
1141: E580                ;                   
1142: E580                SAVE:               
1143: E580     CDCBE3     	CALL	DECODE		; get numeric number that follows SAVE.
1144: E583     F5         	PUSH	PSW			; save number of pages to write.
1145: E584     CD47E2     	CALL	CONVFST		; convert file name linepointer past the number.
1146: E587     C2F2E1     	JNZ		SYNERR		; exit with syntax error -wild cards not allowed.
1147: E58A     CD27E4     	CALL	DSELECT		; select specified drive.
1148: E58D     119DE7     	LXI		D,FCB		; now delete this file.
1149: E590     D5         	PUSH	D			; save the fcb
1150: E591     CDECE0     	CALL	DELETE        
1151: E594     D1         	POP		D             
1152: E595     CD06E1     	CALL	CREATE		;and create it again.
1153: E598     CACEE5     	JZ		SAVE3		;can't create?
1154: E59B     AF         	XRA		A			;clear record number byte.
1155: E59C     32BDE7     	STA		FCB+32        
1156: E59F     F1         	POP		PSW			;convert pages to sectors.
1157: E5A0     6F         	MOV		L,A           
1158: E5A1     2600       	MVI		H,0           
1159: E5A3     29         	DAD		H			;(HL)=number of sectors to write.
1160: E5A4     110001     	LXI		D,TBASE		;and we start from here.
1161: E5A7                SAVE1:              
1162: E5A7     7C         	MOV		A,H			;done yet?
1163: E5A8     B5         	ORA		L             
1164: E5A9     CAC4E5     	JZ		SAVE2          
1165: E5AC     2B         	DCX		H			;nope, count this and compute the start
1166: E5AD     E5         	PUSH	H			;of the next 128 byte sector.
1167: E5AE     218000     	LXI		H,LogicalSecSize
1168: E5B1     19         	DAD		D             
1169: E5B2     E5         	PUSH	H			;save it and set the transfer address.
1170: E5B3     CDD5E1     	CALL	DMASET        
1171: E5B6     119DE7     	LXI		D,FCB		;write out this sector now.
1172: E5B9     CD01E1     	CALL	WRTREC        
1173: E5BC     D1         	POP		D			;reset (DE) to the start of the last sector.
1174: E5BD     E1         	POP		H			;restore sector count.
1175: E5BE     C2CEE5     	JNZ		SAVE3		;write error?
1176: E5C1     C3A7E5     	JMP		SAVE1         
1177: E5C4                ;                   
1178: E5C4                ;   Get here after writing all of the file.
1179: E5C4                ;                   
1180: E5C4                SAVE2:              
1181: E5C4     119DE7     	LXI		D,FCB		;now close the file.
1182: E5C7     CDD7E0     	CALL	CLOSE         
1183: E5CA     3C         	INR		A			;did it close ok?
1184: E5CB     C2D4E5     	JNZ		SAVE4         
1185: E5CE                ;                   
1186: E5CE                ;   Print out error message (no space).
1187: E5CE                ;                   
1188: E5CE                SAVE3:              
1189: E5CE     01DAE5     	LXI		B,NOSPACE     
1190: E5D1     CDA4E0     	CALL	PLINE         
1191: E5D4                SAVE4:              
1192: E5D4     CDD2E1     	CALL	STDDMA		;reset the standard dma address.
1193: E5D7     C356E7     	JMP		GETBACK       
1194: E5DA                NOSPACE:            
1195: E5DA     4E4F20535041434500 	DB	'No space',0    
1196: E5E3                ;                   
1197: E5E3                ;**************************************************************
1198: E5E3                ;*                  
1199: E5E3                ;*           R E N A M E   C O M M A N D
1200: E5E3                ;*                  
1201: E5E3                ;**************************************************************
1202: E5E3                ;                   
1203: E5E3                RENAME:             
1204: E5E3     CD47E2     	CALL	CONVFST	;convert first file name.
1205: E5E6     C2F2E1     	JNZ	SYNERR	;wild cards not allowed.
1206: E5E9     3AC0E7     	LDA	CHGDRV	;remember any change in drives specified.
1207: E5EC     F5         	PUSH	PSW           
1208: E5ED     CD27E4     	CALL	DSELECT	;and select this drive.
1209: E5F0     CDE6E0     	CALL	SRCHFCB	;is this file present?
1210: E5F3     C24CE6     	JNZ	RENAME6	;yes, print error message.
1211: E5F6     219DE7     	LXI	H,FCB	;yes, move this name into second slot.
1212: E5F9     11ADE7     	LXI	D,FCB+16       
1213: E5FC     0610       	MVI	B,16           
1214: E5FE     CD15E4     	CALL	HL2DE         
1215: E601     2A85E0     	LHLD	InBuffAddress	;get input pointer.
1216: E604     EB         	XCHG               
1217: E605     CD38E2     	CALL	NONBLANK;get next non blank character.
1218: E608     FE3D       	CPI	EQUALS		; '='	;only allow an '=' or '_' seperator.
1219: E60A     CA12E6     	JZ	RENAME1         
1220: E60D     FE5F       	CPI	USCORE		; '_'  
1221: E60F     C246E6     	JNZ	RENAME5        
1222: E612                RENAME1:            
1223: E612     EB         	XCHG               
1224: E613     23         	INX	H	;ok, skip seperator.
1225: E614     2285E0     	SHLD	InBuffAddress	;save input line pointer.
1226: E617     CD47E2     	CALL	CONVFST	;convert this second file name now.
1227: E61A     C246E6     	JNZ	RENAME5	;again, no wild cards.
1228: E61D     F1         	POP	PSW	;if a drive was specified, then it
1229: E61E     47         	MOV	B,A	;must be the same as before.
1230: E61F     21C0E7     	LXI	H,CHGDRV       
1231: E622     7E         	MOV	A,M            
1232: E623     B7         	ORA	A              
1233: E624     CA2CE6     	JZ	RENAME2         
1234: E627     B8         	CMP	B              
1235: E628     70         	MOV	M,B            
1236: E629     C246E6     	JNZ	RENAME5	;they were different, error.
1237: E62C                RENAME2:            
1238: E62C     70         	MOV	M,B;	reset as per the first file specification.
1239: E62D     AF         	XRA	A              
1240: E62E     329DE7     	STA	FCB	;clear the drive byte of the fcb.
1241: E631                RENAME3:            
1242: E631     CDE6E0     	CALL	SRCHFCB	;and go look for second file.
1243: E634     CA40E6     	JZ	RENAME4	;doesn't exist?
1244: E637     119DE7     	LXI	D,FCB          
1245: E63A     CD0BE1     	CALL	RENAM	;ok, rename the file.
1246: E63D     C356E7     	JMP	GETBACK        
1247: E640                ;                   
1248: E640                ;   Process rename errors here.
1249: E640                ;                   
1250: E640                RENAME4:            
1251: E640     CDBDE3     	CALL	NONE	;file not there.
1252: E643     C356E7     	JMP	GETBACK        
1253: E646                RENAME5:            
1254: E646     CD39E4     	CALL	RESETDR	;bad command format.
1255: E649     C3F2E1     	JMP	SYNERR         
1256: E64C                RENAME6:            
1257: E64C     0155E6     	LXI	B,EXISTS;destination file already exists.
1258: E64F     CDA4E0     	CALL	PLINE         
1259: E652     C356E7     	JMP	GETBACK        
1260: E655                EXISTS:             
1261: E655     46494C452045584953545300 	DB	'File exists',0 
1262: E661                ;                   
1263: E661                ;**************************************************************
1264: E661                ;*                  
1265: E661                ;*             U S E R   C O M M A N D
1266: E661                ;*                  
1267: E661                ;**************************************************************
1268: E661                ;                   
1269: E661                USER:               
1270: E661     CDCBE3     	CALL	DECODE	;get numeric value following command.
1271: E664     FE10       	CPI	16	;legal user number?
1272: E666     D2F2E1     	JNC	SYNERR         
1273: E669     5F         	MOV	E,A	;yes but is there anything else?
1274: E66A     3A9EE7     	LDA	FCB+1          
1275: E66D     FE20       	CPI	BLANK          
1276: E66F     CAF2E1     	JZ	SYNERR	;yes, that is not allowed.
1277: E672     CD12E1     	CALL	GetSetCurrentUser;ok, set user code.
1278: E675     C359E7     	JMP	GETBACK1       
1279: E678                ;                   
1280: E678                ;**************************************************************
1281: E678                ;*                  
1282: E678                ;*        T R A N S I A N T   P R O G R A M   C O M M A N D
1283: E678                ;*                  
1284: E678                ;**************************************************************
1285: E678                ;                   
1286: E678                UNKNOWN:            
1287: E678                ;e68b	CALL	VERIFY	;check for valid system (why?).
1288: E678     3A9EE7     	LDA		FCB+1		;anything to execute?
1289: E67B     FE20       	CPI		BLANK		; is it a Space?
1290: E67D     C294E6     	JNZ		UNKWN1        
1291: E680     3AC0E7     	LDA		CHGDRV		; No, only a drive change?
1292: E683     B7         	ORA		A			; Is itEmpty (00)
1293: E684     CA59E7     	JZ		GETBACK1	; Yes, get otta here?
1294: E687     3D         	DCR		A             
1295: E688     32BFE7     	STA	CDRIVE	;ok, store new drive.
1296: E68B     CD26E1     	CALL	MOVECD	;set (TDRIVE) also.
1297: E68E     CDBAE0     	CALL	DSKSEL	;and select this drive.
1298: E691     C359E7     	JMP	GETBACK1;then return.
1299: E694                ;                   
1300: E694                ;   Here a file name was typed. Prepare to execute it.
1301: E694                ;                   
1302: E694                UNKWN1:             
1303: E694     11A6E7     	LXI	D,FCB+9	;an extension specified?
1304: E697     1A         	LDAX	D             
1305: E698     FE20       	CPI	BLANK          
1306: E69A     C2F2E1     	JNZ	SYNERR	;yes, not allowed.
1307: E69D                UNKWN2:             
1308: E69D     D5         	PUSH	D             
1309: E69E     CD27E4     	CALL	DSELECT	;select specified drive.
1310: E6A1     D1         	POP	D              
1311: E6A2     2153E7     	LXI	H,COMFILE	;set the extension to 'COM'.
1312: E6A5     CD13E4     	CALL	MOVE3         
1313: E6A8     CDCDE0     	CALL	OPENFCB	;and open this file.
1314: E6AB     CA3BE7     	JZ	UNKWN9	;not present?
1315: E6AE                ;                   
1316: E6AE                ;   Load in the program.
1317: E6AE                ;                   
1318: E6AE     210001     	LXI	H,TBASE	;store the program starting here.
1319: E6B1                UNKWN3:             
1320: E6B1     E5         	PUSH	H             
1321: E6B2     EB         	XCHG               
1322: E6B3     CDD5E1     	CALL	DMASET	;set transfer address.
1323: E6B6     119DE7     	LXI	D,FCB	;and read the next record.
1324: E6B9     CDF6E0     	CALL	RDREC         
1325: E6BC     C2D1E6     	JNZ	UNKWN4	;end of file or read error?
1326: E6BF     E1         	POP	H	;nope, bump pointer for next sector.
1327: E6C0     118000     	LXI	D,LogicalSecSize
1328: E6C3     19         	DAD	D              
1329: E6C4     1100E0     	LXI	D,CBASE	;enough room for the whole file?
1330: E6C7     7D         	MOV	A,L            
1331: E6C8     93         	SUB	E              
1332: E6C9     7C         	MOV	A,H            
1333: E6CA     9A         	SBB	D              
1334: E6CB     D241E7     	JNC	UNKWN0	;no, it can't fit.
1335: E6CE     C3B1E6     	JMP	UNKWN3         
1336: E6D1                ;                   
1337: E6D1                ;   Get here after finished reading.
1338: E6D1                ;                   
1339: E6D1                UNKWN4:             
1340: E6D1     E1         	POP	H              
1341: E6D2     3D         	DCR	A	;normal end of file?
1342: E6D3     C241E7     	JNZ	UNKWN0         
1343: E6D6     CD39E4     	CALL	RESETDR	;yes, reset previous drive.
1344: E6D9     CD47E2     	CALL	CONVFST	;convert the first file name that follows
1345: E6DC     21C0E7     	LXI	H,CHGDRV;command name.
1346: E6DF     E5         	PUSH	H             
1347: E6E0     7E         	MOV	A,M	;set drive code in default fcb.
1348: E6E1     329DE7     	STA	FCB            
1349: E6E4     3E10       	MVI	A,16	;put second name 16 bytes later.
1350: E6E6     CD49E2     	CALL	CONVERT	;convert second file name.
1351: E6E9     E1         	POP	H              
1352: E6EA     7E         	MOV	A,M	;and set the drive for this second file.
1353: E6EB     32ADE7     	STA	FCB+16         
1354: E6EE     AF         	XRA	A	;clear record byte in fcb.
1355: E6EF     32BDE7     	STA	FCB+32         
1356: E6F2     115C00     	LXI	D,TFCB	;move it into place at(005Ch).
1357: E6F5     219DE7     	LXI	H,FCB          
1358: E6F8     0621       	MVI	B,33           
1359: E6FA     CD15E4     	CALL	HL2DE         
1360: E6FD     2108E0     	LXI	H,InBuff			;now move the remainder of the input
1361: E700                UNKWN5:             
1362: E700     7E         	MOV	A,M	;line down to (0080h). Look for a non blank.
1363: E701     B7         	ORA	A	;or a null.  
1364: E702     CA0EE7     	JZ	UNKWN6          
1365: E705     FE20       	CPI	BLANK          
1366: E707     CA0EE7     	JZ	UNKWN6          
1367: E70A     23         	INX	H              
1368: E70B     C300E7     	JMP	UNKWN5         
1369: E70E                ;                   
1370: E70E                ;   Do the line move now. It ends in a null byte.
1371: E70E                ;                   
1372: E70E                UNKWN6:             
1373: E70E     0600       	MVI	B,0	;keep a character count.
1374: E710     118100     	LXI	D,Pg0Buffer+1;data gets put here.
1375: E713                UNKWN7:             
1376: E713     7E         	MOV	A,M	;move it now.
1377: E714     12         	STAX	D             
1378: E715     B7         	ORA	A              
1379: E716     CA1FE7     	JZ	UNKWN8          
1380: E719     04         	INR	B              
1381: E71A     23         	INX	H              
1382: E71B     13         	INX	D              
1383: E71C     C313E7     	JMP	UNKWN7         
1384: E71F                UNKWN8:             
1385: E71F     78         	MOV	A,B	;now store the character count.
1386: E720     328000     	STA	Pg0Buffer      
1387: E723     CD95E0     	CALL	CRLF	;clean up the screen.
1388: E726     CDD2E1     	CALL	STDDMA	;set standard transfer address.
1389: E729     CD17E1     	CALL	SETCDRV	;reset current drive.
1390: E72C     CD0001     	CALL	TBASE	;and execute the program.
1391: E72F                ;                   
1392: E72F                ;   Transiant programs return here (or reboot).
1393: E72F                ;                   
1394: E72F     317BE7     	LXI	SP,BATCH	;set stack first off.
1395: E732     CD26E1     	CALL	MOVECD	;move current drive into place (TDRIVE).
1396: E735     CDBAE0     	CALL	DSKSEL	;and reselect it.
1397: E738     C355E3     	JMP	CMMND1	;back to comand mode.
1398: E73B                ;                   
1399: E73B                ;   Get here if some error occured.
1400: E73B                ;                   
1401: E73B                UNKWN9:             
1402: E73B     CD39E4     	CALL	RESETDR	;inproper format.
1403: E73E     C3F2E1     	JMP	SYNERR         
1404: E741                UNKWN0:             
1405: E741     014AE7     	LXI	B,BADLOAD;read error or won't fit.
1406: E744     CDA4E0     	CALL	PLINE         
1407: E747     C356E7     	JMP	GETBACK        
1408: E74A                BADLOAD:            
1409: E74A     424144204C4F414400 	DB	'Bad load',EndOfMessage
1410: E753                COMFILE:            
1411: E753     434F4D     	DB	'COM'	;command file extension.
1412: E756                ;                   
1413: E756                ;   Get here to return to command level. We will reset the
1414: E756                ; previous active drive and then either return to command
1415: E756                ; level directly or print error message and then return.
1416: E756                ;                   
1417: E756                GETBACK:            
1418: E756     CD39E4     	CALL	RESETDR	;reset previous drive.
1419: E759                GETBACK1:           
1420: E759     CD47E2     	CALL	CONVFST	;convert first name in (FCB).
1421: E75C     3A9EE7     	LDA	FCB+1	;if this was just a drive change request,
1422: E75F     D620       	SUI	BLANK	;make sure it was valid.
1423: E761     21C0E7     	LXI	H,CHGDRV       
1424: E764     B6         	ORA	M              
1425: E765     C2F2E1     	JNZ	SYNERR         
1426: E768     C355E3     	JMP	CMMND1	;ok, return to command level.
1427: E76B                ;                   
1428: E76B                ;   ccp stack area. 
1429: E76B                ;                   
1430: E76B     00000000000000000000000000000000 	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1431: E77B                CCPStack	EQU	$	;end of ccp stack area.
1432: E77B                ;                   
1433: E77B                ;   Batch (or SUBMIT) processing information storage.
1434: E77B                ;                   
1435: E77B                BATCH:              
1436: E77B     00         	DB	0	;batch mode flag (0=not active).
1437: E77C                BATCHFCB:           
1438: E77C     002424242020202020535542000000000000000000000000000000000000000000 DB	0,'$$$     SUB',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1439: E79D                ;                   
1440: E79D                ;   File control block setup by the CCP.
1441: E79D                ;                   
1442: E79D                FCB:                
1443: E79D     002020202020202020202020000000000020202020202020202020200000000000 	DB	0,'           ',0,0,0,0,0,'           ',0,0,0,0,0
1444: E7BE                RTNCODE:            
1445: E7BE     00         	DB	0	;status returned from bdos call.
1446: E7BF                CDRIVE:             
1447: E7BF     00         	DB	0	;currently active drive.
1448: E7C0                CHGDRV:             
1449: E7C0     00         	DB	0	;change in drives flag (0=no change).
1450: E7C1                NBYTES:             
1451: E7C1     0000       	DW	0	;byte counter used by TYPE.
1452: E7C3                ;                   
1453: E7C3                ;   Room for expansion?
1454: E7C3                ;                   
1455: E7C3     00000000000000000000000000 	DB	0,0,0,0,0,0,0,0,0,0,0,0,0
1456: E7D0                ;                   
1457: E7D0                ;   Note that the following six bytes must match those at
1458: E7D0                ; (PATTRN1) or cp/m will HALT. Why?
1459: E7D0                ;                   
1460: E7D0                ;PATTRN2:           
1461: E7D0                ;	DB	0,22,0,0,0,0;(* serial number bytes *).
1462: E7D0                ;                   
1463: E7D0                ;**************************************************************
1464: E7D0                ;*                  
1465: E7D0                ;*                    B D O S   E N T R Y
1466: E7D0                ;*                  
1467: E7D0                ;**************************************************************
1468: E7D0                ;                   
1469: E7D0                ;   Entry into bdos.
1470: E7D0                ;			Parameters: (DE) or (E) are the parameters passed. The
1471: E7D0                ;						(C) - function number
1472: E7D0                ;	The user's stack is saved (UserStack) 
1473: E7D0                ;	BDOS uses its own stack  (BDOSstack)
1474: E7D0                ;	The Function number is checked
1475: E7D0                ;	The corect routine is calcualted using the FunctionVector and (C)
1476: E7D0                ;                   
1477: E7D0                	ORG  0E806H					; forces - see start of bios fix later
1478: E806                BDOSEntry:          
1479: E806                ;	JMP	BDOSSetup     
1480: E806                ;BDOSSetup:         
1481: E806     EB         	XCHG						; Swap  (DE) and (HL). **23**
1482: E807     223CE8     	SHLD	ParamsDE			; Save (DE)
1483: E80A     EB         	XCHG						; Restore (DE) and (HL) to original values
1484: E80B     7B         	MOV		A,E	          
1485: E80C     323EE8     	STA		ParamE				; Save register (E) in particular.
1486: E80F     210000     	LXI		H,0           
1487: E812     223FE8     	SHLD	StatusBDOSReturn	;clear return status.
1488: E815     39         	DAD		SP            
1489: E816     2241E8     	SHLD	UserStack			; ave users stack pointer.
1490: E819     3173E8     	LXI		SP,BDOSstack		; nd set our own.
1491: E81C     AF         	XRA		A					; lear A for flags resets
1492: E81D     32D7F5     	STA		AutoSelectFlag		; lear auto select storage Flag
1493: E820     32D5F5     	STA		AutoSelectActive	; lear auto select Active Flag
1494: E823     2173E8     	LXI		H,BDOSExit			; et return address to BDOSExit routine
1495: E826     E5         	PUSH	H					; ut it on the stack
1496: E827     79         	MOV		A,C					; get function number and put into A.
1497: E828     FE29       	CPI		FunctionCount + 1	; valid function number?
1498: E82A     D0         	RNC							; Exit if not valid
1499: E82B     4B         	MOV		C,E					; keep single register function value in C.
1500: E82C     219AE8     	LXI		H,FunctionVector	; now look thru the function table.
1501: E82F     5F         	MOV		E,A           
1502: E830     1600       	MVI		D,0					;(DE)=function number.
1503: E832     19         	DAD		D             
1504: E833     19         	DAD		D					;(HL)=(start of table)+2*(function number).
1505: E834     5E         	MOV		E,M           
1506: E835     23         	INX		H             
1507: E836     56         	MOV		D,M					; now (DE)=address for this function.
1508: E837     2A3CE8     	LHLD	ParamsDE			; retrieve parameters.
1509: E83A     EB         	XCHG						;now (DE) has the original parameters.
1510: E83B     E9         	PCHL						;execute desired function.
1511: E83C                ;----------------------------------
1512: E83C     0000       ParamsDE:			DW	0	;(DE) parameters saved here on entry to BDOS.
1513: E83E     00         ParamE:				DB	0	;storage for register (E) on entry to bdos.
1514: E83F     0000       StatusBDOSReturn:	DW	0	;status returned from bdos function.
1515: E841     0000       UserStack:			DW	0	;save users stack pointer here.
1516: E843                ;                   
1517: E843                ;   Stack area for BDOS calls.
1518: E843                ;                   
1519: E843                					DS	030H        
1520: E873                BDOSstack	EQU	$	;end of stack area.
1521: E873                ;----------------------------------
1522: E873                BDOSExit:           
1523: E873     3AD5F5     	LDA	AutoSelectActive	;was auto select activated?
1524: E876     B7         	ORA	A              
1525: E877     CA90E8     	JZ	BDOSExit1       
1526: E87A     2A3CE8     	LHLD	ParamsDE	;yes, but was a change made?
1527: E87D     3600       	MVI	M,0	;(* reset first byte of fcb *)
1528: E87F     3AD7F5     	LDA	AutoSelectFlag 
1529: E882     B7         	ORA	A              
1530: E883     CA90E8     	JZ	BDOSExit1       
1531: E886     77         	MOV	M,A	;yes, reset first byte properly.
1532: E887     3AD6F5     	LDA	OLDDRV	;and get the old drive and select it.
1533: E88A     323EE8     	STA	ParamE         
1534: E88D     CD61F4     	CALL	fcSelectDisk  
1535: E890                BDOSExit1:          
1536: E890     2A41E8     	LHLD		UserStack			;Get  the users stack pointer.
1537: E893     F9         	SPHL		             
1538: E894     2A3FE8     	LHLD		StatusBDOSReturn	;get return status.
1539: E897     7D         	MOV	A,L							;force version 1.4 compatability.
1540: E898     44         	MOV	B,H            
1541: E899     C9         	RET			;and go back to user.
1542: E89A                                    
1543: E89A                	                   
1544: E89A                	                   
1545: E89A                ;                   
1546: E89A                ;   BDOS function jump table.
1547: E89A                ;                   
1548: E89A                ;NFUNCTS	EQU	41	;number of functions in followin table.
1549: E89A                ;                   
1550: E89A                FunctionVector:     
1551: E89A     03F6       	DW	fcSystemReset			;0		Overall system and BDOS reset
1552: E89C     23EB       	DW	fcConsoleIn				;1		Read a byte from the console keyboard
1553: E89E     EBE9       	DW	fcConsoleOut			;2		Write a byte to the console screen
1554: E8A0     29EB       	DW	fcReaderIn				;3		Read a byte from the logical reader device
1555: E8A2     12F6       	DW	fcPunchOut				;4		Write a byte to the logical PUNCH device
1556: E8A4     0FF6       	DW	fcListOut				;5		Write a byte to the logical list device
1557: E8A6     2FEB       	DW	fcDirectConsoleOut		;6		Direct console I/O (no CCP-style editing)
1558: E8A8     48EB       	DW	fcGetIOByte				;7		Read the current setting of the IOBYTE
1559: E8AA     4EEB       	DW	fcSetIOByte				;8		Set a new value of the IOBYTE
1560: E8AC     53EB       	DW	fcConsoleStringOut		;9		Send a "$"-terminated string to the console
1561: E8AE     3CEA       	DW	fcConsoleStringIn		;10		Read a string from the console into a buffer
1562: E8B0     59EB       	DW	fcConsoleStatusIn		;11		Check if a console key is waiting to be read
1563: E8B2     9AF4       	DW	fcGetVersion			;12		Return the CP/M version number
1564: E8B4                	                   
1565: E8B4     9FF4       	DW	fcResetDiskSystem		;13		Reset disk system
1566: E8B6     61F4       	DW	fcSelectDisk			;14		Select specified logical disk drive
1567: E8B8     B8F4       	DW	fcOpenFile				;15		Open specified file for reading/writing
1568: E8BA     C1F4       	DW	fcCloseFile				;16		Close specified file after reading/writing
1569: E8BC     C7F4       	DW	fcSearchForFirst		;17		Search file directory for first match with filename
1570: E8BE     E4F4       	DW	fcSearchForNext			;18		Search file directory for next match with filename
1571: E8C0     F3F4       	DW	fcDeleteFile			;19		Delete (erase) file
1572: E8C2     FCF4       	DW	fcReadSequential		;20		Read the next "record" sequentially
1573: E8C4     02F5       	DW	fcWriteSequential		;21		Write the next "record" sequentially
1574: E8C6     08F5       	DW	fcCreateFile			;22		Create a new file with the specified name
1575: E8C8     11F5       	DW	fcRenameFile			;23		Rename a file to a new name
1576: E8CA     1AF5       	DW	fcGetActiveDisks		;24		Indicate which logical disks are active
1577: E8CC     20F5       	DW	fcGetCurrentDisk		;25		Return the current default disk drive number
1578: E8CE     26F5       	DW	fcSetDMA				;26		Set the DMA address (read/write address)
1579: E8D0     2DF5       	DW	fcGetFATtable			;27		Return the address of an allocation vector
1580: E8D2     35ED       	DW	fcSetDiskRO				;28		Set disk to Read-Only
1581: E8D4     33F5       	DW	fcGetROdisks			;29		Indicate which disks are currently Read-Only status
1582: E8D6     39F5       	DW	fcSetFileAttributes		;30		Set specified file to System or Read-Only status
1583: E8D8     42F5       	DW	fcGetDPB				;31		Return address of disk parameter block (DPB)
1584: E8DA     49F5       	DW	fcGetUser				;32		Set/Get the current user number
1585: E8DC     5DF5       	DW	fcReadRandom			;33		Set/Get the current user number
1586: E8DE     63F5       	DW	fcWriteRandom			;34		Write a "record" randomly
1587: E8E0     69F5       	DW	fcGetFileSize			;35		Return logical file size (even for random files)
1588: E8E2     B6F3       	DW	fcSetRecordNumber		;36		Set record number for the next random read/write
1589: E8E4     6FF5       	DW	fcResetDrive			;37
1590: E8E6     5FEB       	DW	fcReturn				;38		Simple Return
1591: E8E8     5FEB       	DW	fcReturn				;39		Simple Return
1592: E8EA     90F5       	DW	fcWriteZeroFill			;40		Write a "record" randomly with zero fill
1593: E8EC                	                   
1594: E8EC                FunctionCount	EQU	 ($ -FunctionVector)/2
1595: E8EC                                    
1596: E8EC                ;                   
1597: E8EC                ;   Bdos error table.
1598: E8EC                ;                   
1599: E8EC     F4E8       BADSCTR:	DW	ERROR1	;bad sector on read or write.
1600: E8EE     00E9       BADSLCT:	DW	ERROR2	;bad disk select.
1601: E8F0     06E9       RODISK:		DW	ERROR3	;disk is read only.
1602: E8F2     0CE9       ROFILE:		DW	ERROR4	;file is read only.
1603: E8F4                ;                   
1604: E8F4                ;                   
1605: E8F4                ;   Bdos error message section.
1606: E8F4                ;                   
1607: E8F4                ERROR1:             
1608: E8F4     2125E9     	LXI	H,BADSEC	;bad sector message.
1609: E8F7     CD40E9     	CALL	PRTERR	;print it and get a 1 char responce.
1610: E8FA     FE03       	CPI	CNTRLC	;re-boot request (control-c)?
1611: E8FC     CA0000     	JZ	0	;yes.         
1612: E8FF     C9         	RET		;no, return to retry i/o function.
1613: E900                ;                   
1614: E900                ERROR2:             
1615: E900     2130E9     	LXI	H,BADSEL	;bad drive selected.
1616: E903     C30FE9     	JMP	ERROR5         
1617: E906                ;                   
1618: E906                ERROR3:             
1619: E906     213CE9     	LXI	H,DISKRO	;disk is read only.
1620: E909     C30FE9     	JMP	ERROR5         
1621: E90C                ;                   
1622: E90C                ERROR4:             
1623: E90C     2137E9     	LXI	H,FILERO	;file is read only.
1624: E90F                ;                   
1625: E90F                ERROR5:             
1626: E90F     CD40E9     	CALL	PRTERR        
1627: E912     C30000     	JMP	0	;always reboot on these errors.
1628: E915                ;                   
1629: E915     42444F5320455252204F4E20 BDOSERR:	DB	'Bdos Err On '
1630: E921     203A2024   BDOSDRV:	DB	' : $'  
1631: E925     42414420534543544F5224 BADSEC:		DB	'Bad Sector$'
1632: E930     53454C45435424 BADSEL:		DB	'Select$'
1633: E937     46494C4520 FILERO:		DB	'File ' 
1634: E93C     522F4F24   DISKRO:		DB	'R/O$'  
1635: E940                ;                   
1636: E940                ;   Print bdos error message.
1637: E940                ;                   
1638: E940                PRTERR:             
1639: E940     E5         	PUSH	H	;save second message pointer.
1640: E941     CD24EA     	CALL	OUTCRLF	;send (cr)(lf).
1641: E944     3AA2F5     	LDA	CurrentDrive	;get Current Drive drive.
1642: E947     C641       	ADI	041H	; 'A'	;make ascii.
1643: E949     3221E9     	STA	BDOSDRV	;and put in message.
1644: E94C     0115E9     	LXI	B,BDOSERR;and print it.
1645: E94F     CD2EEA     	CALL	PRTMESG       
1646: E952     C1         	POP	B	;print second message line now.
1647: E953     CD2EEA     	CALL	PRTMESG       
1648: E956                ;                   
1649: E956                ;   Get an input character. We will check our 1 character
1650: E956                ; buffer first. This may be set by the console status routine.
1651: E956                ;                   
1652: E956                GETCHAR:            
1653: E956     2169EB     	LXI	H,CHARBUF;check character buffer.
1654: E959     7E         	MOV	A,M	;anything present already?
1655: E95A     3600       	MVI	M,0	;...either case clear it.
1656: E95C     B7         	ORA	A              
1657: E95D     C0         	RNZ		;yes, use it. 
1658: E95E     C309F6     	JMP	biosConsoleIn	;nope, go get a character responce.
1659: E961                ;                   
1660: E961                ;   Input and echo a character.
1661: E961                ;                   
1662: E961                GETECHO:            
1663: E961     CD56E9     	CALL	GETCHAR	;input a character.
1664: E964     CD6FE9     	CALL	CHKCHAR	;carriage control?
1665: E967     D8         	RC		;no, a regular control char so don't echo.
1666: E968     F5         	PUSH	PSW	;ok, save character now.
1667: E969     4F         	MOV	C,A            
1668: E96A     CDEBE9     	CALL	fcConsoleOut	;and echo it.
1669: E96D     F1         	POP	PSW	;get character and return.
1670: E96E     C9         	RET                
1671: E96F                ;                   
1672: E96F                ;   Check character in (A). Set the zero flag on a carriage
1673: E96F                ; control character and the carry flag on any other control
1674: E96F                ; character.        
1675: E96F                ;                   
1676: E96F                CHKCHAR:            
1677: E96F     FE0D       	CPI	CR	;check for carriage return, line feed, backspace,
1678: E971     C8         	RZ		;or a tab.     
1679: E972     FE0A       	CPI	LF             
1680: E974     C8         	RZ                 
1681: E975     FE09       	CPI	TAB            
1682: E977     C8         	RZ                 
1683: E978     FE08       	CPI	BS             
1684: E97A     C8         	RZ                 
1685: E97B     FE20       	CPI	BLANK	;other control char? Set carry flag.
1686: E97D     C9         	RET                
1687: E97E                ;                   
1688: E97E                ;   Check the console during output. Halt on a control-s, then
1689: E97E                ; reboot on a control-c. If anything else is ready, clear the
1690: E97E                ; zero flag and return (the calling routine may want to do
1691: E97E                ; something).       
1692: E97E                ;                   
1693: E97E                CKCONSOL:           
1694: E97E     3A69EB     	LDA	CHARBUF	;check buffer.
1695: E981     B7         	ORA	A	;if anything, just return without checking.
1696: E982     C2A0E9     	JNZ	CKCON2         
1697: E985     CD06F6     	CALL	biosConsoleStatus	;nothing in buffer. Check console.
1698: E988     E601       	ANI	01H	;look at bit 0.
1699: E98A     C8         	RZ		;return if nothing.
1700: E98B     CD09F6     	CALL	biosConsoleIn	;ok, get it.
1701: E98E     FE13       	CPI	CNTRLS	;if not control-s, return with zero cleared.
1702: E990     C29DE9     	JNZ	CKCON1         
1703: E993     CD09F6     	CALL	biosConsoleIn	;halt processing until another char
1704: E996     FE03       	CPI	CNTRLC	;is typed. Control-c?
1705: E998     CA0000     	JZ	0	;yes, reboot now.
1706: E99B     AF         	XRA	A	;no, just pretend nothing was ever ready.
1707: E99C     C9         	RET                
1708: E99D                CKCON1:             
1709: E99D     3269EB     	STA	CHARBUF	;save character in buffer for later processing.
1710: E9A0                CKCON2:             
1711: E9A0     3E01       	MVI	A,1	;set (A) to non zero to mean something is ready.
1712: E9A2     C9         	RET                
1713: E9A3                ;                   
1714: E9A3                ;   Output (C) to the screen. If the printer flip-flop flag
1715: E9A3                ; is set, we will send character to printer also. The console
1716: E9A3                ; will be checked in the process.
1717: E9A3                ;                   
1718: E9A3                OUTCHAR:            
1719: E9A3     3A65EB     	LDA	OUTFLAG	;check output flag.
1720: E9A6     B7         	ORA	A	;anything and we won't generate output.
1721: E9A7     C2BDE9     	JNZ	OUTCHR1        
1722: E9AA     C5         	PUSH	B             
1723: E9AB     CD7EE9     	CALL	CKCONSOL;check console (we don't care whats there).
1724: E9AE     C1         	POP	B              
1725: E9AF     C5         	PUSH	B             
1726: E9B0     CD0CF6     	CALL	biosConsoleOut	;output (C) to the screen.
1727: E9B3     C1         	POP	B              
1728: E9B4     C5         	PUSH	B             
1729: E9B5     3A68EB     	LDA	PRTFLAG	;check printer flip-flop flag.
1730: E9B8     B7         	ORA	A              
1731: E9B9     C40FF6     	CNZ	fcListOut	;print it also if non-zero.
1732: E9BC     C1         	POP	B              
1733: E9BD                OUTCHR1:            
1734: E9BD     79         	MOV	A,C	;update cursors position.
1735: E9BE     2167EB     	LXI	H,CURPOS       
1736: E9C1     FE7F       	CPI	DEL	;rubouts don't do anything here.
1737: E9C3     C8         	RZ                 
1738: E9C4     34         	INR	M	;bump line pointer.
1739: E9C5     FE20       	CPI	BLANK	;and return if a normal character.
1740: E9C7     D0         	RNC                
1741: E9C8     35         	DCR	M	;restore and check for the start of the line.
1742: E9C9     7E         	MOV	A,M            
1743: E9CA     B7         	ORA	A              
1744: E9CB     C8         	RZ		;ingnore control characters at the start of the line.
1745: E9CC     79         	MOV	A,C            
1746: E9CD     FE08       	CPI	BS	;is it a backspace?
1747: E9CF     C2D4E9     	JNZ	OUTCHR2        
1748: E9D2     35         	DCR	M	;yes, backup pointer.
1749: E9D3     C9         	RET                
1750: E9D4                OUTCHR2:            
1751: E9D4     FE0A       	CPI	LF	;is it a line feed?
1752: E9D6     C0         	RNZ		;ignore anything else.
1753: E9D7     3600       	MVI	M,0	;reset pointer to start of line.
1754: E9D9     C9         	RET                
1755: E9DA                ;                   
1756: E9DA                ;   Output (A) to the screen. If it is a control character
1757: E9DA                ; (other than carriage control), use ^x format.
1758: E9DA                ;                   
1759: E9DA                SHOWIT:             
1760: E9DA     79         	MOV	A,C            
1761: E9DB     CD6FE9     	CALL	CHKCHAR	;check character.
1762: E9DE     D2EBE9     	JNC	fcConsoleOut	;not a control, use normal output.
1763: E9E1     F5         	PUSH	PSW           
1764: E9E2     0E5E       	MVI	C, CARET	; '^'	;for a control character, preceed it with '^'.
1765: E9E4     CDA3E9     	CALL	OUTCHAR       
1766: E9E7     F1         	POP	PSW            
1767: E9E8     F640       	ORI	ATSIGN		; '@'	;and then use the letter equivelant.
1768: E9EA     4F         	MOV	C,A            
1769: E9EB                ;                   
1770: E9EB                ;   Function to output (C) to the console device and expand tabs
1771: E9EB                ; if necessary.     
1772: E9EB                ;                   
1773: E9EB                fcConsoleOut:       
1774: E9EB     79         	MOV	A,C            
1775: E9EC     FE09       	CPI	TAB	;is it a tab?
1776: E9EE     C2A3E9     	JNZ	OUTCHAR	;use regular output.
1777: E9F1                fcConsoleOut1:      
1778: E9F1     0E20       	MVI	C,BLANK	;yes it is, use spaces instead.
1779: E9F3     CDA3E9     	CALL	OUTCHAR       
1780: E9F6     3A67EB     	LDA	CURPOS	;go until the cursor is at a multiple of 8
1781: E9F9                                    
1782: E9F9     E607       	ANI	07H	;position. 
1783: E9FB     C2F1E9     	JNZ	fcConsoleOut1  
1784: E9FE     C9         	RET                
1785: E9FF                ;                   
1786: E9FF                ;   Echo a backspace character. Erase the prevoius character
1787: E9FF                ; on the screen.    
1788: E9FF                ;                   
1789: E9FF                BACKUP:             
1790: E9FF     CD07EA     	CALL	BACKUP1	;backup the screen 1 place.
1791: EA02     0E20       	MVI	C,BLANK	;then blank that character.
1792: EA04     CD0CF6     	CALL	biosConsoleOut
1793: EA07                BACKUP1:            
1794: EA07     0E08       	MVI	C,BS	;then back space once more.
1795: EA09     C30CF6     	JMP	biosConsoleOut 
1796: EA0C                ;                   
1797: EA0C                ;   Signal a deleted line. Print a '#' at the end and start
1798: EA0C                ; over.             
1799: EA0C                ;                   
1800: EA0C                NEWLINE:            
1801: EA0C     0E23       	MVI	C, POUNDSN		; '#'
1802: EA0E     CDA3E9     	CALL	OUTCHAR	;print this.
1803: EA11     CD24EA     	CALL	OUTCRLF	;start new line.
1804: EA14                NEWLN1:             
1805: EA14     3A67EB     	LDA	CURPOS	;move the cursor to the starting position.
1806: EA17     2166EB     	LXI	H,STARTING     
1807: EA1A     BE         	CMP	M              
1808: EA1B     D0         	RNC		;there yet?   
1809: EA1C     0E20       	MVI	C,BLANK        
1810: EA1E     CDA3E9     	CALL	OUTCHAR	;nope, keep going.
1811: EA21     C314EA     	JMP	NEWLN1         
1812: EA24                ;                   
1813: EA24                ;   Output a (cr) (lf) to the console device (screen).
1814: EA24                ;                   
1815: EA24                OUTCRLF:            
1816: EA24     0E0D       	MVI	C,CR           
1817: EA26     CDA3E9     	CALL	OUTCHAR       
1818: EA29     0E0A       	MVI	C,LF           
1819: EA2B     C3A3E9     	JMP	OUTCHAR        
1820: EA2E                ;                   
1821: EA2E                ;   Print message pointed to by (BC). It will end with a '$'.
1822: EA2E                ;                   
1823: EA2E                PRTMESG:            
1824: EA2E     0A         	LDAX	B	;check for terminating character.
1825: EA2F     FE24       	CPI	DOLLAR		; '$'  
1826: EA31     C8         	RZ                 
1827: EA32     03         	INX	B              
1828: EA33     C5         	PUSH	B	;otherwise, bump pointer and print it.
1829: EA34     4F         	MOV	C,A            
1830: EA35     CDEBE9     	CALL	fcConsoleOut  
1831: EA38     C1         	POP	B              
1832: EA39     C32EEA     	JMP	PRTMESG        
1833: EA3C                ;                   
1834: EA3C                ;   Function to execute a buffered read.
1835: EA3C                ;                   
1836: EA3C                fcConsoleStringIn:  
1837: EA3C     3A67EB     	LDA	CURPOS	;use present location as starting one.
1838: EA3F     3266EB     	STA	STARTING       
1839: EA42     2A3CE8     	LHLD	ParamsDE	;get the maximum buffer space.
1840: EA45     4E         	MOV	C,M            
1841: EA46     23         	INX	H	;point to first available space.
1842: EA47     E5         	PUSH	H	;and save.  
1843: EA48     0600       	MVI	B,0	;keep a character count.
1844: EA4A                RDBUF1:             
1845: EA4A     C5         	PUSH	B             
1846: EA4B     E5         	PUSH	H             
1847: EA4C                RDBUF2:             
1848: EA4C     CD56E9     	CALL	GETCHAR	;get the next input character.
1849: EA4F     E67F       	ANI	7FH	;strip bit 7.
1850: EA51     E1         	POP	H	;reset registers.
1851: EA52     C1         	POP	B              
1852: EA53     FE0D       	CPI	CR	;en of the line?
1853: EA55     CA1CEB     	JZ	RDBUF17         
1854: EA58     FE0A       	CPI	LF             
1855: EA5A     CA1CEB     	JZ	RDBUF17         
1856: EA5D     FE08       	CPI	BS	;how about a backspace?
1857: EA5F     C271EA     	JNZ	RDBUF3         
1858: EA62     78         	MOV	A,B	;yes, but ignore at the beginning of the line.
1859: EA63     B7         	ORA	A              
1860: EA64     CA4AEA     	JZ	RDBUF1          
1861: EA67     05         	DCR	B	;ok, update counter.
1862: EA68     3A67EB     	LDA	CURPOS	;if we backspace to the start of the line,
1863: EA6B     3265EB     	STA	OUTFLAG	;treat as a cancel (control-x).
1864: EA6E     C3CBEA     	JMP	RDBUF10        
1865: EA71                RDBUF3:             
1866: EA71     FE7F       	CPI	DEL	;user typed a rubout?
1867: EA73     C281EA     	JNZ	RDBUF4         
1868: EA76     78         	MOV	A,B	;ignore at the start of the line.
1869: EA77     B7         	ORA	A              
1870: EA78     CA4AEA     	JZ	RDBUF1          
1871: EA7B     7E         	MOV	A,M	;ok, echo the prevoius character.
1872: EA7C     05         	DCR	B	;and reset pointers (counters).
1873: EA7D     2B         	DCX	H              
1874: EA7E     C304EB     	JMP	RDBUF15        
1875: EA81                RDBUF4:             
1876: EA81     FE05       	CPI	CNTRLE	;physical end of line?
1877: EA83     C292EA     	JNZ	RDBUF5         
1878: EA86     C5         	PUSH	B	;yes, do it.
1879: EA87     E5         	PUSH	H             
1880: EA88     CD24EA     	CALL	OUTCRLF       
1881: EA8B     AF         	XRA	A	;and update starting position.
1882: EA8C     3266EB     	STA	STARTING       
1883: EA8F     C34CEA     	JMP	RDBUF2         
1884: EA92                RDBUF5:             
1885: EA92     FE10       	CPI	CNTRLP	;control-p?
1886: EA94     C2A3EA     	JNZ	RDBUF6         
1887: EA97     E5         	PUSH	H	;yes, flip the print flag filp-flop byte.
1888: EA98     2168EB     	LXI	H,PRTFLAG      
1889: EA9B     3E01       	MVI	A,1	;PRTFLAG=1-PRTFLAG
1890: EA9D     96         	SUB	M              
1891: EA9E     77         	MOV	M,A            
1892: EA9F     E1         	POP	H              
1893: EAA0     C34AEA     	JMP	RDBUF1         
1894: EAA3                RDBUF6:             
1895: EAA3     FE18       	CPI	CNTRLX	;control-x (cancel)?
1896: EAA5     C2BAEA     	JNZ	RDBUF8         
1897: EAA8     E1         	POP	H              
1898: EAA9                RDBUF7:             
1899: EAA9     3A66EB     	LDA	STARTING;yes, backup the cursor to here.
1900: EAAC     2167EB     	LXI	H,CURPOS       
1901: EAAF     BE         	CMP	M              
1902: EAB0     D23CEA     	JNC	fcConsoleStringIn	;done yet?
1903: EAB3     35         	DCR	M	;no, decrement pointer and output back up one space.
1904: EAB4     CDFFE9     	CALL	BACKUP        
1905: EAB7     C3A9EA     	JMP	RDBUF7         
1906: EABA                RDBUF8:             
1907: EABA     FE15       	CPI	CNTRLU	;cntrol-u (cancel line)?
1908: EABC     C2C6EA     	JNZ	RDBUF9         
1909: EABF     CD0CEA     	CALL	NEWLINE	;start a new line.
1910: EAC2     E1         	POP	H              
1911: EAC3     C33CEA     	JMP	fcConsoleStringIn
1912: EAC6                RDBUF9:             
1913: EAC6     FE12       	CPI	CNTRLR	;control-r?
1914: EAC8     C201EB     	JNZ	RDBUF14        
1915: EACB                RDBUF10:            
1916: EACB     C5         	PUSH	B	;yes, start a new line and retype the old one.
1917: EACC     CD0CEA     	CALL	NEWLINE       
1918: EACF     C1         	POP	B              
1919: EAD0     E1         	POP	H              
1920: EAD1     E5         	PUSH	H             
1921: EAD2     C5         	PUSH	B             
1922: EAD3                RDBUF11:            
1923: EAD3     78         	MOV	A,B	;done whole line yet?
1924: EAD4     B7         	ORA	A              
1925: EAD5     CAE5EA     	JZ	RDBUF12         
1926: EAD8     23         	INX	H	;nope, get next character.
1927: EAD9     4E         	MOV	C,M            
1928: EADA     05         	DCR	B	;count it.   
1929: EADB     C5         	PUSH	B             
1930: EADC     E5         	PUSH	H             
1931: EADD     CDDAE9     	CALL	SHOWIT	;and display it.
1932: EAE0     E1         	POP	H              
1933: EAE1     C1         	POP	B              
1934: EAE2     C3D3EA     	JMP	RDBUF11        
1935: EAE5                RDBUF12:            
1936: EAE5     E5         	PUSH	H	;done with line. If we were displaying
1937: EAE6     3A65EB     	LDA	OUTFLAG	;then update cursor position.
1938: EAE9     B7         	ORA	A              
1939: EAEA     CA4CEA     	JZ	RDBUF2          
1940: EAED     2167EB     	LXI	H,CURPOS;because this line is shorter, we must
1941: EAF0     96         	SUB	M	;back up the cursor (not the screen however)
1942: EAF1     3265EB     	STA	OUTFLAG	;some number of positions.
1943: EAF4                RDBUF13:            
1944: EAF4     CDFFE9     	CALL	BACKUP	;note that as long as (OUTFLAG) is non
1945: EAF7     2165EB     	LXI	H,OUTFLAG;zero, the screen will not be changed.
1946: EAFA     35         	DCR	M              
1947: EAFB     C2F4EA     	JNZ	RDBUF13        
1948: EAFE     C34CEA     	JMP	RDBUF2	;now just get the next character.
1949: EB01                ;                   
1950: EB01                ;   Just a normal character, put this in our buffer and echo.
1951: EB01                ;                   
1952: EB01                RDBUF14:            
1953: EB01     23         	INX	H              
1954: EB02     77         	MOV	M,A	;store character.
1955: EB03     04         	INR	B	;and count it.
1956: EB04                RDBUF15:            
1957: EB04     C5         	PUSH	B             
1958: EB05     E5         	PUSH	H             
1959: EB06     4F         	MOV	C,A	;echo it now.
1960: EB07     CDDAE9     	CALL	SHOWIT        
1961: EB0A     E1         	POP	H              
1962: EB0B     C1         	POP	B              
1963: EB0C     7E         	MOV	A,M	;was it an abort request?
1964: EB0D     FE03       	CPI	CNTRLC	;control-c abort?
1965: EB0F     78         	MOV	A,B            
1966: EB10     C218EB     	JNZ	RDBUF16        
1967: EB13     FE01       	CPI	1	;only if at start of line.
1968: EB15     CA0000     	JZ	0               
1969: EB18                RDBUF16:            
1970: EB18     B9         	CMP	C	;nope, have we filled the buffer?
1971: EB19     DA4AEA     	JC	RDBUF1          
1972: EB1C                RDBUF17:            
1973: EB1C     E1         	POP	H	;yes end the line and return.
1974: EB1D     70         	MOV	M,B            
1975: EB1E     0E0D       	MVI	C,CR           
1976: EB20     C3A3E9     	JMP	OUTCHAR	;output (cr) and return.
1977: EB23                ;                   
1978: EB23                ;   Function to get a character from the console device.
1979: EB23                ;                   
1980: EB23                fcConsoleIn:        
1981: EB23     CD61E9     	CALL	GETECHO	;get and echo.
1982: EB26     C35CEB     	JMP	SetStatusBDOS	;save status and return.
1983: EB29                ;                   
1984: EB29                ;   Function to get a character from the tape reader device.
1985: EB29                ;                   
1986: EB29                fcReaderIn:         
1987: EB29     CD15F6     	CALL	biosReaderIn	;get a character from reader, set status and return.
1988: EB2C     C35CEB     	JMP	SetStatusBDOS  
1989: EB2F                ;                   
1990: EB2F                ;  Function to perform direct console i/o. If (C) contains (FF)
1991: EB2F                ; then this is an input request. If (C) contains (FE) then
1992: EB2F                ; this is a status request. Otherwise we are to output (C).
1993: EB2F                ;                   
1994: EB2F                fcDirectConsoleOut: 
1995: EB2F     79         	MOV	A,C	;test for (FF).
1996: EB30     3C         	INR	A              
1997: EB31     CA3BEB     	JZ	DIRC1           
1998: EB34     3C         	INR	A	;test for (FE).
1999: EB35     CA06F6     	JZ	biosConsoleStatus
2000: EB38     C30CF6     	JMP	biosConsoleOut	;just output (C).
2001: EB3B                DIRC1:              
2002: EB3B     CD06F6     	CALL	biosConsoleStatus	;this is an input request.
2003: EB3E     B7         	ORA	A              
2004: EB3F     CA90E8     	JZ	BDOSExit1	;not ready? Just return (directly).
2005: EB42     CD09F6     	CALL	biosConsoleIn	;yes, get character.
2006: EB45     C35CEB     	JMP	SetStatusBDOS	;set status and return.
2007: EB48                ;                   
2008: EB48                ;   Function to return the i/o byte.
2009: EB48                ;                   
2010: EB48                fcGetIOByte:        
2011: EB48     3A0300     	LDA	IOBYTE         
2012: EB4B     C35CEB     	JMP	SetStatusBDOS  
2013: EB4E                ;                   
2014: EB4E                ;   Function to set the i/o byte.
2015: EB4E                ;                   
2016: EB4E                fcSetIOByte:        
2017: EB4E     210300     	LXI	H,IOBYTE       
2018: EB51     71         	MOV	M,C            
2019: EB52     C9         	RET                
2020: EB53                ;                   
2021: EB53                ;   Function to print the character string pointed to by (DE)
2022: EB53                ; on the console device. The string ends with a '$'.
2023: EB53                ;                   
2024: EB53                fcConsoleStringOut: 
2025: EB53     EB         	XCHG               
2026: EB54     4D         	MOV	C,L            
2027: EB55     44         	MOV	B,H	;now (BC) points to it.
2028: EB56     C32EEA     	JMP	PRTMESG        
2029: EB59                ;                   
2030: EB59                ;   Function to interigate the console device.
2031: EB59                ;                   
2032: EB59                fcConsoleStatusIn:  
2033: EB59     CD7EE9     	CALL	CKCONSOL      
2034: EB5C                ;                   
2035: EB5C                ;   Get here to set the status and return to the cleanup
2036: EB5C                ; section. Then back to the user.
2037: EB5C                ;                   
2038: EB5C                SetStatusBDOS:      
2039: EB5C     323FE8     	STA		StatusBDOSReturn
2040: EB5F                fcReturn:           
2041: EB5F     C9         	RET                
2042: EB60                ;                   
2043: EB60                ;   Set the status to 1 (read or write error code).
2044: EB60                ;                   
2045: EB60                IOERR1:             
2046: EB60     3E01       	MVI	A,1            
2047: EB62     C35CEB     	JMP	SetStatusBDOS  
2048: EB65                ;                   
2049: EB65     00         OUTFLAG:	DB	0	;output flag (non zero means no output).
2050: EB66     02         STARTING:	DB	2	;starting position for cursor.
2051: EB67     00         CURPOS:		DB	0	;cursor position (0=start of line).
2052: EB68     00         PRTFLAG:	DB	0	;printer flag (control-p toggle). List if non zero.
2053: EB69     00         CHARBUF:	DB	0	;single input character buffer.
2054: EB6A                ;                   
2055: EB6A                ;   Stack area for BDOS calls.
2056: EB6A                ;                   
2057: EB6A                                    
2058: EB6A                ;                   
2059: EB6A                ;	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
2060: EB6A                ;	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
2061: EB6A                ;BDOSstack	EQU	$	;end of stack area.
2062: EB6A                ;                   
2063: EB6A                ;                   
2064: EB6A                ;   Select error occured, jump to error routine.
2065: EB6A                ;                   
2066: EB6A                SLCTERR:            
2067: EB6A     21EEE8     	LXI		H,BADSLCT     
2068: EB6D                ;                   
2069: EB6D                ;   Jump to (HL) indirectly.
2070: EB6D                ;                   
2071: EB6D                JumpToHL:           
2072: EB6D     5E         	MOV		E,M           
2073: EB6E     23         	INX		H             
2074: EB6F     56         	MOV		D,M			;now (DE) contain the desired address.
2075: EB70     EB         	XCHG               
2076: EB71     E9         	PCHL               
2077: EB72                ;                   
2078: EB72                ;   Block move. (DE) to (HL), (C) bytes total.
2079: EB72                ;                   
2080: EB72                DEtoHL:             
2081: EB72     0C         	INR		C			; manage counter
2082: EB73                DEtoHL1:            
2083: EB73     0D         	DCR		C			; decrement counter
2084: EB74     C8         	RZ					; Return if done
2085: EB75                	                   
2086: EB75     1A         	LDAX	D			; move a byte.
2087: EB76     77         	MOV		M,A           
2088: EB77     13         	INX		D             
2089: EB78     23         	INX		H             
2090: EB79     C373EB     	JMP		DEtoHL1		;	and repeat.
2091: EB7C                ;                   
2092: EB7C                ;   Select the desired drive.
2093: EB7C                ; it will set up all the disk parameters blocks 
2094: EB7C                ;                   
2095: EB7C                SelectDisk:         
2096: EB7C     3AA2F5     	LDA		CurrentDrive		; get active disk.
2097: EB7F     4F         	MOV		C,A					; set up for Bios call, put disk in (C)
2098: EB80     CD1BF6     	CALL	biosSelectDisk		; call into BIOS to select it.
2099: EB83     7C         	MOV		A,H					; HL = 0000 if invalid
2100: EB84     B5         	ORA		L					; otherwise it points to the correct Disk Parameter Block
2101: EB85     C8         	RZ							; so, return if HL = 0000
2102: EB86                ;                   
2103: EB86                ;   Here, the BIOS returned the address of the parameter block
2104: EB86                ; in (HL). We will extract the necessary pointers and save them.
2105: EB86                ;                   
2106: EB86     5E         	MOV		E,M					; first word of DPB points to the drive's skew table
2107: EB87     23         	INX		H             
2108: EB88     56         	MOV		D,M					; Get it and put it into (DE)
2109: EB89     23         	INX		H             
2110: EB8A                						;save pointers to BDOS scratch areas
2111: EB8A     22ABF5     	SHLD	FilePosInDirSegment		; save Relative position for file		.
2112: EB8D     23         	INX		H             
2113: EB8E     23         	INX		H             
2114: EB8F     22ADF5     	SHLD	LastTrackNumber		; save last track referenced			
2115: EB92     23         	INX		H             
2116: EB93     23         	INX		H             
2117: EB94     22AFF5     	SHLD	LastSectorNumber	; save last sector referenced	
2118: EB97     23         	INX		H             
2119: EB98     23         	INX		H					; get directory buffer
2120: EB99     EB         	XCHG						; been holding the translation table address in DE, now in HL
2121: EB9A                								; Moved Directory buffer pointer into DE (from HL
2122: EB9A     22C8F5     	SHLD	XLATE				; save skew table address				
2123: EB9D     21B1F5     	LXI		H,DirBuffAddr			; get address of the directory buffer vector
2124: EBA0     0E08       	MVI		C,8					; they consist of the directory buffer
2125: EBA2     CD72EB     	CALL	DEtoHL				; pointer, parameter block pointer,check and allocation vectors.
2126: EBA5     2AB3F5     	LHLD	DiskParamBlock				;  * DISK PARAMTER BLOCK POINTER
2127: EBA8     EB         	XCHG						; put into DE
2128: EBA9     21B9F5     	LXI		H,SECTORS			; point at  Sectors per Block
2129: EBAC     0E0F       	MVI		C,15				; it is 15 bytes long. 
2130: EBAE     CD72EB     	CALL	DEtoHL				; move disk parameter block from BIOS to BDOS for current disk
2131: EBB1     2ABEF5     	LHLD	DiskSize			; check disk size.
2132: EBB4     7C         	MOV		A,H					; more than 256 blocks on this?
2133: EBB5     21D4F5     	LXI		H,SmallDisk			; should be called SmallDisk [ if SmallDisk =0 then > 256 block long])
2134: EBB8     36FF       	MVI		M,0FFH				; set to small.
2135: EBBA     B7         	ORA		A             
2136: EBBB     CAC0EB     	JZ		SelectDisk1    
2137: EBBE     3600       	MVI		M,0					; wrong, set to large.
2138: EBC0                SelectDisk1:        
2139: EBC0     3EFF       	MVI		A,0FFH				; clear the zero flag.
2140: EBC2     B7         	ORA		A             
2141: EBC3     C9         	RET                
2142: EBC4                ;                   
2143: EBC4                ;   Routine to home the disk track head and clear pointers.
2144: EBC4                ;                   
2145: EBC4                HomeDrive:          
2146: EBC4     CD18F6     	CALL	biosHomeDisk			; home the head.
2147: EBC7     AF         	XRA		A				; set accumulator to 00	
2148: EBC8     2AADF5     	LHLD	LastTrackNumber	; set track pointer to 00.
2149: EBCB     77         	MOV		M,A           
2150: EBCC     23         	INX		H             
2151: EBCD     77         	MOV		M,A           
2152: EBCE     2AAFF5     	LHLD	LastSectorNumber; set sector pointer to 00.
2153: EBD1     77         	MOV		M,A           
2154: EBD2     23         	INX		H             
2155: EBD3     77         	MOV		M,A           
2156: EBD4     C9         	RET                
2157: EBD5                ;                   
2158: EBD5                ;   Do the actual disk read and check the error return status.
2159: EBD5                ;                   
2160: EBD5                DOREAD:             
2161: EBD5     CD27F6     	CALL	biosReadDisk  
2162: EBD8     C3DEEB     	JMP	IORET          
2163: EBDB                ;                   
2164: EBDB                ;   Do the actual disk write and handle any bios error.
2165: EBDB                ;                   
2166: EBDB                DOWRITE:            
2167: EBDB     CD2AF6     	CALL	biosWriteDisk 
2168: EBDE                IORET:              
2169: EBDE     B7         	ORA	A              
2170: EBDF     C8         	RZ		;return unless an error occured.
2171: EBE0     21ECE8     	LXI	H,BADSCTR;bad read/write on this sector.
2172: EBE3     C36DEB     	JMP	JumpToHL       
2173: EBE6                ;                   
2174: EBE6                ;   Routine to select the track and sector that the desired
2175: EBE6                ; block number falls in.
2176: EBE6                ;                   
2177: EBE6                TRKSEC:             
2178: EBE6     2AE1F5     	LHLD	FilePosInDirectory	; get position of last accessed file
2179: EBE9     0E02       	MVI		C,2				; in directory and compute sector #.
2180: EBEB     CD0DED     	CALL	HLrightC		; sector #=file-position/4.
2181: EBEE     22DCF5     	SHLD	BLKNMBR			; save this as the block number of interest.
2182: EBF1     22E3F5     	SHLD	CKSUMTBL		; what's it doing here too?
2183: EBF4                ;                   
2184: EBF4                ;   if the sector number has already been set (BLKNMBR), enter
2185: EBF4                ; at this point.    
2186: EBF4                ;                   
2187: EBF4                TRKSEC1:            
2188: EBF4                		;move Desired sector number into (BC).
2189: EBF4     21DCF5     	LXI		H,BLKNMBR     
2190: EBF7     4E         	MOV		C,M				       
2191: EBF8     23         	INX		H             
2192: EBF9     46         	MOV		B,M           
2193: EBFA                		;move Last sector number into (DE).
2194: EBFA     2AAFF5     	LHLD	LastSectorNumber
2195: EBFD     5E         	MOV		E,M	          
2196: EBFE     23         	INX		H             
2197: EBFF     56         	MOV		D,M           
2198: EC00                		;move current track number into (HL).
2199: EC00     2AADF5     	LHLD	LastTrackNumber
2200: EC03     7E         	MOV		A,M           
2201: EC04     23         	INX		H             
2202: EC05     66         	MOV		H,M           
2203: EC06     6F         	MOV		L,A           
2204: EC07                	                   
2205: EC07                TRKSEC2:            
2206: EC07     79         	MOV		A,C			;is desired sector before current one?
2207: EC08     93         	SUB		E             
2208: EC09     78         	MOV		A,B           
2209: EC0A     9A         	SBB		D             
2210: EC0B     D21DEC     	JNC		TRKSEC3       
2211: EC0E     E5         	PUSH	H			;yes, decrement sectors by one track.
2212: EC0F     2AB9F5     	LHLD	SECTORS		;get sectors per track.
2213: EC12     7B         	MOV		A,E           
2214: EC13     95         	SUB		L             
2215: EC14     5F         	MOV		E,A           
2216: EC15     7A         	MOV		A,D           
2217: EC16     9C         	SBB		H             
2218: EC17     57         	MOV		D,A			;now we have backed up one full track.
2219: EC18     E1         	POP		H             
2220: EC19     2B         	DCX		H			;adjust track counter.
2221: EC1A     C307EC     	JMP		TRKSEC2       
2222: EC1D                TRKSEC3:            
2223: EC1D     E5         	PUSH	H			;desired sector is after current one.
2224: EC1E     2AB9F5     	LHLD	SECTORS		;get sectors per track.
2225: EC21     19         	DAD	D				;bump sector pointer to next track.
2226: EC22     DA32EC     	JC		TRKSEC4        
2227: EC25     79         	MOV		A,C			;is desired sector now before current one?
2228: EC26     95         	SUB		L             
2229: EC27     78         	MOV		A,B           
2230: EC28     9C         	SBB		H             
2231: EC29     DA32EC     	JC		TRKSEC4        
2232: EC2C     EB         	XCHG				;not yes, increment track counter
2233: EC2D     E1         	POP		H			;and continue until it is.
2234: EC2E     23         	INX		H             
2235: EC2F     C31DEC     	JMP		TRKSEC3       
2236: EC32                ;                   
2237: EC32                ;   here we have determined the track number that contains the
2238: EC32                ; desired sector.   
2239: EC32                ;                   
2240: EC32                TRKSEC4:            
2241: EC32     E1         	POP		H			;get track number (HL).
2242: EC33     C5         	PUSH	B             
2243: EC34     D5         	PUSH	D             
2244: EC35     E5         	PUSH	H             
2245: EC36     EB         	XCHG               
2246: EC37     2AC6F5     	LHLD	OFFSET		;adjust for first track offset.
2247: EC3A     19         	DAD		D             
2248: EC3B     44         	MOV		B,H           
2249: EC3C     4D         	MOV		C,L           
2250: EC3D     CD1EF6     	CALL	biosSetTrack		;select this track.
2251: EC40     D1         	POP		D			;reset current track pointer.
2252: EC41     2AADF5     	LHLD	LastTrackNumber
2253: EC44     73         	MOV		M,E           
2254: EC45     23         	INX		H             
2255: EC46     72         	MOV		M,D           
2256: EC47     D1         	POP		D             
2257: EC48     2AAFF5     	LHLD	LastSectorNumber	;reset the first sector on this track.
2258: EC4B     73         	MOV		M,E           
2259: EC4C     23         	INX		H             
2260: EC4D     72         	MOV		M,D           
2261: EC4E     C1         	POP		B             
2262: EC4F     79         	MOV		A,C			;now subtract the desired one.
2263: EC50     93         	SUB		E			;to make it relative (1-# sectors/track).
2264: EC51     4F         	MOV		C,A           
2265: EC52     78         	MOV		A,B           
2266: EC53     9A         	SBB		D             
2267: EC54     47         	MOV		B,A           
2268: EC55     2AC8F5     	LHLD	XLATE		;translate this sector according to this table.
2269: EC58     EB         	XCHG               
2270: EC59     CD30F6     	CALL	biosSectorTranslate		;let the bios translate it.
2271: EC5C     4D         	MOV		C,L           
2272: EC5D     44         	MOV		B,H           
2273: EC5E     C321F6     	JMP		biosSetSector		;and select it.
2274: EC61                ;                   
2275: EC61                ;   Compute block number from record number (SAVNREC) and
2276: EC61                ; extent number (SAVEXT).
2277: EC61                ;                   
2278: EC61                GETBLOCK:           
2279: EC61     21BBF5     	LXI	H,BLKSHFT;get logical to physical conversion.
2280: EC64     4E         	MOV	C,M	;note that this is base 2 log of ratio.
2281: EC65     3ADAF5     	LDA	SAVNREC	;get record number.
2282: EC68                GETBLK1:            
2283: EC68     B7         	ORA	A	;compute (A)=(A)/2^BLKSHFT.
2284: EC69     1F         	RAR                
2285: EC6A     0D         	DCR	C              
2286: EC6B     C268EC     	JNZ	GETBLK1        
2287: EC6E     47         	MOV	B,A	;save result in (B).
2288: EC6F     3E08       	MVI	A,8            
2289: EC71     96         	SUB	M              
2290: EC72     4F         	MOV	C,A	;compute (C)=8-BLKSHFT.
2291: EC73     3AD9F5     	LDA	SAVEXT         
2292: EC76                GETBLK2:            
2293: EC76     0D         	DCR	C	;compute (A)=SAVEXT*2^(8-BLKSHFT).
2294: EC77     CA7FEC     	JZ	GETBLK3         
2295: EC7A     B7         	ORA	A              
2296: EC7B     17         	RAL                
2297: EC7C     C376EC     	JMP	GETBLK2        
2298: EC7F                GETBLK3:            
2299: EC7F     80         	ADD	B              
2300: EC80     C9         	RET                
2301: EC81                ;                   
2302: EC81                ;   Routine to extract the (BC) block byte from the fcb pointed
2303: EC81                ; to by (ParamsDE). If this is a big-disk, then these are 16 bit
2304: EC81                ; block numbers, else they are 8 bit numbers.
2305: EC81                ; Number is returned in (HL).
2306: EC81                ;                   
2307: EC81                EXTBLK:             
2308: EC81     2A3CE8     	LHLD	ParamsDE	;get fcb address.
2309: EC84     111000     	LXI	D,16	;block numbers start 16 bytes into fcb.
2310: EC87     19         	DAD	D              
2311: EC88     09         	DAD	B              
2312: EC89     3AD4F5     	LDA	SmallDisk	;are we using a big-disk?
2313: EC8C     B7         	ORA	A              
2314: EC8D     CA94EC     	JZ	EXTBLK1         
2315: EC90     6E         	MOV	L,M	;no, extract an 8 bit number from the fcb.
2316: EC91     2600       	MVI	H,0            
2317: EC93     C9         	RET                
2318: EC94                EXTBLK1:            
2319: EC94     09         	DAD	B	;yes, extract a 16 bit number.
2320: EC95     5E         	MOV	E,M            
2321: EC96     23         	INX	H              
2322: EC97     56         	MOV	D,M            
2323: EC98     EB         	XCHG		;return in (HL).
2324: EC99     C9         	RET                
2325: EC9A                ;                   
2326: EC9A                ;   Compute block number.
2327: EC9A                ;                   
2328: EC9A                COMBLK:             
2329: EC9A     CD61EC     	CALL	GETBLOCK      
2330: EC9D     4F         	MOV	C,A            
2331: EC9E     0600       	MVI	B,0            
2332: ECA0     CD81EC     	CALL	EXTBLK        
2333: ECA3     22DCF5     	SHLD	BLKNMBR       
2334: ECA6     C9         	RET                
2335: ECA7                ;                   
2336: ECA7                ;   Check for a zero block number (unused).
2337: ECA7                ;                   
2338: ECA7                CHKBLK:             
2339: ECA7     2ADCF5     	LHLD	BLKNMBR       
2340: ECAA     7D         	MOV	A,L	;is it zero?
2341: ECAB     B4         	ORA	H              
2342: ECAC     C9         	RET                
2343: ECAD                ;                   
2344: ECAD                ;   Adjust physical block (BLKNMBR) and convert to logical
2345: ECAD                ; sector (LOGSECT). This is the starting sector of this block.
2346: ECAD                ; The actual sector of interest is then added to this and the
2347: ECAD                ; resulting sector number is stored back in (BLKNMBR). This
2348: ECAD                ; will still have to be adjusted for the track number.
2349: ECAD                ;                   
2350: ECAD                LOGICAL:            
2351: ECAD     3ABBF5     	LDA	BLKSHFT	;get log2(physical/logical sectors).
2352: ECB0     2ADCF5     	LHLD	BLKNMBR	;get physical sector desired.
2353: ECB3                LOGICL1:            
2354: ECB3     29         	DAD	H	;compute logical sector number.
2355: ECB4     3D         	DCR	A	;note logical sectors are 128 bytes long.
2356: ECB5     C2B3EC     	JNZ	LOGICL1        
2357: ECB8     22DEF5     	SHLD	LOGSECT	;save logical sector.
2358: ECBB     3ABCF5     	LDA	BLKMASK	;get block mask.
2359: ECBE     4F         	MOV	C,A            
2360: ECBF     3ADAF5     	LDA	SAVNREC	;get next sector to access.
2361: ECC2     A1         	ANA	C	;extract the relative position within physical block.
2362: ECC3     B5         	ORA	L	;and add it too logical sector.
2363: ECC4     6F         	MOV	L,A            
2364: ECC5     22DCF5     	SHLD	BLKNMBR	;and store.
2365: ECC8     C9         	RET                
2366: ECC9                ;                   
2367: ECC9                ;   Set (HL) to point to extent byte in fcb.
2368: ECC9                ;                   
2369: ECC9                SETEXT:             
2370: ECC9     2A3CE8     	LHLD	ParamsDE      
2371: ECCC     110C00     	LXI	D,12	;it is the twelth byte.
2372: ECCF     19         	DAD	D              
2373: ECD0     C9         	RET                
2374: ECD1                ;                   
2375: ECD1                ;   Set (HL) to point to record count byte in fcb and (DE) to
2376: ECD1                ; next record number byte.
2377: ECD1                ;                   
2378: ECD1                SETHLDE:            
2379: ECD1     2A3CE8     	LHLD	ParamsDE      
2380: ECD4     110F00     	LXI	D,15	;record count byte (#15).
2381: ECD7     19         	DAD	D              
2382: ECD8     EB         	XCHG               
2383: ECD9     211100     	LXI	H,17	;next record number (#32).
2384: ECDC     19         	DAD	D              
2385: ECDD     C9         	RET                
2386: ECDE                ;                   
2387: ECDE                ;   Save current file data from fcb.
2388: ECDE                ;                   
2389: ECDE                STRDATA:            
2390: ECDE     CDD1EC     	CALL	SETHLDE       
2391: ECE1     7E         	MOV	A,M	;get and store record count byte.
2392: ECE2     32DAF5     	STA	SAVNREC        
2393: ECE5     EB         	XCHG               
2394: ECE6     7E         	MOV	A,M	;get and store next record number byte.
2395: ECE7     32D8F5     	STA	SAVNXT         
2396: ECEA     CDC9EC     	CALL	SETEXT	;point to extent byte.
2397: ECED     3ABDF5     	LDA	EXTMASK	;get extent mask.
2398: ECF0     A6         	ANA	M              
2399: ECF1     32D9F5     	STA	SAVEXT	;and save extent here.
2400: ECF4     C9         	RET                
2401: ECF5                ;                   
2402: ECF5                ;   Set the next record to access. If (MODE) is set to 2, then
2403: ECF5                ; the last record byte (SAVNREC) has the correct number to access.
2404: ECF5                ; For sequential access, (MODE) will be equal to 1.
2405: ECF5                ;                   
2406: ECF5                SETNREC:            
2407: ECF5     CDD1EC     	CALL	SETHLDE       
2408: ECF8     3ACDF5     	LDA	MODE	;get sequential flag (=1).
2409: ECFB     FE02       	CPI	2	;a 2 indicates that no adder is needed.
2410: ECFD     C201ED     	JNZ	STNREC1        
2411: ED00     AF         	XRA	A	;clear adder (random access?).
2412: ED01                STNREC1:            
2413: ED01     4F         	MOV	C,A            
2414: ED02     3ADAF5     	LDA	SAVNREC	;get last record number.
2415: ED05     81         	ADD	C	;increment record count.
2416: ED06     77         	MOV	M,A	;and set fcb's next record byte.
2417: ED07     EB         	XCHG               
2418: ED08     3AD8F5     	LDA	SAVNXT	;get next record byte from storage.
2419: ED0B     77         	MOV	M,A	;and put this into fcb as number of records used.
2420: ED0C     C9         	RET                
2421: ED0D                ;                   
2422: ED0D                ;   Shift HL right (C) bits.
2423: ED0D                ;                   
2424: ED0D                HLrightC:           
2425: ED0D     0C         	INR		C			; minor adjustment
2426: ED0E                HLrightC1:          
2427: ED0E     0D         	DCR		C			; count down
2428: ED0F     C8         	RZ					; exit if done
2429: ED10     7C         	MOV		A,H			; get the hi byte
2430: ED11     B7         	ORA		A			; reset carry bit
2431: ED12     1F         	RAR					; rotate right thru carry
2432: ED13     67         	MOV		H,A			; return new hi byte
2433: ED14     7D         	MOV		A,L			; get lo byte
2434: ED15     1F         	RAR					; rotate right thru carry
2435: ED16     6F         	MOV		L,A			; return new lo byte
2436: ED17     C30EED     	JMP		HLrightC1		; keep doing it
2437: ED1A                ;                   
2438: ED1A                ;	Compute the check-sum for the directory buffer.
2439: ED1A                ;	Return integer sum in (A).
2440: ED1A                ;   add all values in the buffer ignoring carrys
2441: ED1A                ;                   
2442: ED1A                CheckSum:           
2443: ED1A     0E80       	MVI		C,DirBuffSize		; length of buffer.
2444: ED1C     2AB1F5     	LHLD	DirBuffAddr			; get its address.
2445: ED1F     AF         	XRA		A					; clear summation byte.
2446: ED20                CheckSum1:          
2447: ED20     86         	ADD	M						; compute running sum ignoring carries.
2448: ED21     23         	INX	H              
2449: ED22     0D         	DCR	C              
2450: ED23     C220ED     	JNZ	CheckSum1      
2451: ED26     C9         	RET                
2452: ED27                                    
2453: ED27                ;                   
2454: ED27                ;   Extract the write protect status bit for the current drive.
2455: ED27                ; The result is returned in (A), bit 0.
2456: ED27                ;                   
2457: ED27                GETWPRT:            
2458: ED27     2AA5F5     	LHLD	ROBitMap		;get Read Only Bit Map
2459: ED2A     3AA2F5     	LDA		CurrentDrive	;which drive is current?
2460: ED2D     4F         	MOV		C,A           
2461: ED2E     CD0DED     	CALL	HLrightC			;shift status such that bit 0 is the
2462: ED31     7D         	MOV		A,L				;one of interest for this drive.
2463: ED32     E601       	ANI		01H				;and isolate it.
2464: ED34     C9         	RET						; Zero if not write protected
2465: ED35                ;                   
2466: ED35                ;   Function to write protect the current disk.
2467: ED35                ;                   
2468: ED35                fcSetDiskRO:        
2469: ED35     21A5F5     	LXI	H,ROBitMap	;point to Read Only Bit Map
2470: ED38     4E         	MOV	C,M	;set (BC) equal to the status.
2471: ED39     23         	INX	H              
2472: ED3A     46         	MOV	B,M            
2473: ED3B     CD4BF4     	CALL	SetBit	;and set this bit according to current drive.
2474: ED3E     22A5F5     	SHLD	ROBitMap	;then save.
2475: ED41     2AC0F5     	LHLD	DrectorySize	;now save directory size limit.
2476: ED44     23         	INX	H	;remember the last one.
2477: ED45     EB         	XCHG               
2478: ED46     2AABF5     	LHLD	FilePosInDirSegment;and store it here.
2479: ED49     73         	MOV	M,E	;put low byte.
2480: ED4A     23         	INX	H              
2481: ED4B     72         	MOV	M,D	;then high byte.
2482: ED4C     C9         	RET                
2483: ED4D                ;                   
2484: ED4D                ;   Check for a read only file.
2485: ED4D                ;                   
2486: ED4D                CHKROFL:            
2487: ED4D     CD67ED     	CALL	FCB2HL	;set (HL) to file entry in directory buffer.
2488: ED50                CKROF1:             
2489: ED50     110900     	LXI	D,9	;look at bit 7 of the ninth byte.
2490: ED53     19         	DAD	D              
2491: ED54     7E         	MOV	A,M            
2492: ED55     17         	RAL                
2493: ED56     D0         	RNC		;return if ok.
2494: ED57     21F2E8     	LXI	H,ROFILE;else, print error message and terminate.
2495: ED5A     C36DEB     	JMP	JumpToHL       
2496: ED5D                ;                   
2497: ED5D                ;   Check the write protect status of the active disk.
2498: ED5D                ;                   
2499: ED5D                CHKWPRT:            
2500: ED5D     CD27ED     	CALL	GETWPRT			; is it write protected ?
2501: ED60     C8         	RZ						; NO, return.
2502: ED61     21F0E8     	LXI		H,RODISK      
2503: ED64     C36DEB     	JMP	JumpToHL		; else print message and terminate.
2504: ED67                ;                   
2505: ED67                ;   Routine to set (HL) pointing to the proper entry in the
2506: ED67                ; directory buffer. 
2507: ED67                ;                   
2508: ED67                FCB2HL:             
2509: ED67     2AB1F5     	LHLD	DirBuffAddr		;get address of buffer.
2510: ED6A     3AE0F5     	LDA		FCBPosition		;relative position of file.
2511: ED6D                ;                   
2512: ED6D                ;   Routine to add (A) to (HL).
2513: ED6D                ;                   
2514: ED6D                ADDA2HL:            
2515: ED6D     85         	ADD		L             
2516: ED6E     6F         	MOV		L,A           
2517: ED6F     D0         	RNC	               
2518: ED70     24         	INR		H			;take care of any carry.
2519: ED71     C9         	RET                
2520: ED72                ;                   
2521: ED72                ;   Routine to get the 's2' byte(Extent Count) from the fcb supplied in
2522: ED72                ; the initial parameter specification.
2523: ED72                ;                   
2524: ED72                GETS2:              
2525: ED72     2A3CE8     	LHLD	ParamsDE	;get address of fcb.
2526: ED75     110E00     	LXI		D,14		;relative position of 's2'.
2527: ED78     19         	DAD		D             
2528: ED79     7E         	MOV		A,M			;extract this byte.
2529: ED7A     C9         	RET                
2530: ED7B                ;                   
2531: ED7B                ;   Clear the 's2' byte in the fcb.
2532: ED7B                ;                   
2533: ED7B                CLEARS2:            
2534: ED7B     CD72ED     	CALL	GETS2		;this sets (HL) pointing to it.
2535: ED7E     3600       	MVI		M,0			;now clear it.
2536: ED80     C9         	RET                
2537: ED81                ;                   
2538: ED81                ;   Set bit 7 in the 's2' byte of the fcb.
2539: ED81                ;                   
2540: ED81                SETS2B7:            
2541: ED81     CD72ED     	CALL	GETS2		;get the byte.
2542: ED84     F680       	ORI		80H			;and set bit 7.
2543: ED86     77         	MOV		M,A			;then store.
2544: ED87     C9         	RET                
2545: ED88                ;                   
2546: ED88                ;   Compare (FilePosInDirectory) with (FilePosInDirSegment) and set flags based on
2547: ED88                ; the difference. This checks to see if there are more file
2548: ED88                ; names in the directory. We are at (FilePosInDirectory) and there are
2549: ED88                ; (FilePosInDirSegment) of them to check.
2550: ED88                ;                   
2551: ED88                MOREFLS:            
2552: ED88     2AE1F5     	LHLD	FilePosInDirectory			;we are here.
2553: ED8B     EB         	XCHG               
2554: ED8C     2AABF5     	LHLD	FilePosInDirSegment	;and don't go past here.
2555: ED8F     7B         	MOV		A,E				;compute difference but don't keep.
2556: ED90     96         	SUB		M             
2557: ED91     23         	INX		H             
2558: ED92     7A         	MOV		A,D           
2559: ED93     9E         	SBB		M				;set carry if no more names.
2560: ED94     C9         	RET                
2561: ED95                ;                   
2562: ED95                ;   Call this routine to prevent (FilePosInDirSegment) from being greater
2563: ED95                ; than (FilePosInDirectory).
2564: ED95                ;                   
2565: ED95                CHKNMBR:            
2566: ED95     CD88ED     	CALL	MOREFLS		;FilePosInDirSegment too big?
2567: ED98     D8         	RC                 
2568: ED99     13         	INX		D		;yes, reset it to (FilePosInDirectory).
2569: ED9A     72         	MOV		M,D           
2570: ED9B     2B         	DCX		H             
2571: ED9C     73         	MOV		M,E           
2572: ED9D     C9         	RET                
2573: ED9E                ;                   
2574: ED9E                ;   Compute (HL)=(DE)-(HL)
2575: ED9E                ;                   
2576: ED9E                DEminusHL2HL:       
2577: ED9E     7B         	MOV		A,E		;compute difference.
2578: ED9F     95         	SUB		L             
2579: EDA0     6F         	MOV		L,A		;store low byte.
2580: EDA1     7A         	MOV		A,D           
2581: EDA2     9C         	SBB		H             
2582: EDA3     67         	MOV		H,A		;and then high byte.
2583: EDA4     C9         	RET                
2584: EDA5                ;                   
2585: EDA5                ;   Set the directory checksum byte.
2586: EDA5                ;                   
2587: EDA5                SETDIR:             
2588: EDA5     0EFF       	MVI	C,0FFH         
2589: EDA7                ;                   
2590: EDA7                ;   Routine to set or compare the directory checksum byte. If
2591: EDA7                ; (C)=0ffh, then this will set the checksum byte. Else the byte
2592: EDA7                ; will be checked. If the check fails (the disk has been changed),
2593: EDA7                ; then this disk will be write protected.
2594: EDA7                ;                   
2595: EDA7                CHECKDIR:           
2596: EDA7     2AE3F5     	LHLD	CKSUMTBL      
2597: EDAA     EB         	XCHG               
2598: EDAB     2AC4F5     	LHLD	DirectoryFAT1 
2599: EDAE     CD9EED     	CALL	DEminusHL2HL  
2600: EDB1     D0         	RNC		;ok if (CKSUMTBL) > (DirectoryFAT1), so return.
2601: EDB2     C5         	PUSH	B             
2602: EDB3     CD1AED     	CALL	CheckSum;else compute checksum.
2603: EDB6     2AB5F5     	LHLD	CHKVECT	;get address of checksum table.
2604: EDB9     EB         	XCHG               
2605: EDBA     2AE3F5     	LHLD	CKSUMTBL      
2606: EDBD     19         	DAD	D	;set (HL) to point to byte for this drive.
2607: EDBE     C1         	POP	B              
2608: EDBF     0C         	INR	C	;set or check ?
2609: EDC0     CACDED     	JZ	CHKDIR1         
2610: EDC3     BE         	CMP	M	;check them. 
2611: EDC4     C8         	RZ		;return if they are the same.
2612: EDC5     CD88ED     	CALL	MOREFLS	;not the same, do we care?
2613: EDC8     D0         	RNC                
2614: EDC9     CD35ED     	CALL	fcSetDiskRO	;yes, mark this as write protected.
2615: EDCC     C9         	RET                
2616: EDCD                CHKDIR1:            
2617: EDCD     77         	MOV	M,A	;just set the byte.
2618: EDCE     C9         	RET                
2619: EDCF                ;                   
2620: EDCF                ;   Do a write to the directory of the current disk.
2621: EDCF                ;                   
2622: EDCF                DIRWRITE:           
2623: EDCF     CDA5ED     	CALL	SETDIR			;set checksum byte.
2624: EDD2     CDE9ED     	CALL	SetDirDMA		;set directory dma address.
2625: EDD5     0E01       	MVI		C,1				;tell the bios to actually write.
2626: EDD7     CDDBEB     	CALL	DOWRITE			;then do the write.
2627: EDDA     C3E3ED     	JMP		Set2UsersDMA  
2628: EDDD                ;                   
2629: EDDD                ;   Read from the directory.
2630: EDDD                ;                   
2631: EDDD                DIRREAD:            
2632: EDDD     CDE9ED     	CALL	SetDirDMA	;set the directory dma address.
2633: EDE0     CDD5EB     	CALL	DOREAD	;and read it.
2634: EDE3                ;                   
2635: EDE3                ;   Routine to set the dma address to the users choice.
2636: EDE3                ;                   
2637: EDE3                Set2UsersDMA:       
2638: EDE3     21A9F5     	LXI		H,UsersDMA		;reset the default dma address and return.
2639: EDE6     C3ECED     	JMP		SetDMA0       
2640: EDE9                ;                   
2641: EDE9                ;   Routine to set the dma address for directory work.
2642: EDE9                ;                   
2643: EDE9                SetDirDMA:          
2644: EDE9     21B1F5     	LXI		H,DirBuffAddr 
2645: EDEC                ;                   
2646: EDEC                ;   Set the dma address. On entry, (HL) points to
2647: EDEC                ; word containing the desired dma address.
2648: EDEC                ;                   
2649: EDEC                SetDMA0:            
2650: EDEC     4E         	MOV		C,M           
2651: EDED     23         	INX		H             
2652: EDEE     46         	MOV		B,M			;setup (BC) and go to the bios to set it.
2653: EDEF     C324F6     	JMP		biosSetDMA    
2654: EDF2                ;                   
2655: EDF2                ;   Move the directory buffer into user's dma space.
2656: EDF2                ;                   
2657: EDF2                MOVEDIR:            
2658: EDF2     2AB1F5     	LHLD	DirBuffAddr	;buffer is located here, and
2659: EDF5     EB         	XCHG               
2660: EDF6     2AA9F5     	LHLD	UsersDMA; put it here.
2661: EDF9     0E80       	MVI	C,DirBuffSize	;this is its length.
2662: EDFB     C372EB     	JMP	DEtoHL	;move it now and return.
2663: EDFE                ;                   
2664: EDFE                ;   Check (FilePosInDirectory) and set the zero flag if it equals 0ffffh.
2665: EDFE                ; if it is -1 then no active file found
2666: EDFE                ;                   
2667: EDFE                CheckFilePosition:  
2668: EDFE     21E1F5     	LXI	H,FilePosInDirectory
2669: EE01     7E         	MOV	A,M            
2670: EE02     23         	INX	H              
2671: EE03     BE         	CMP	M	;are both bytes the same?
2672: EE04     C0         	RNZ                
2673: EE05     3C         	INR	A	;yes, but are they each 0ffh?
2674: EE06     C9         	RET                
2675: EE07                ;                   
2676: EE07                ;   Set location (FilePosInDirectory) to 0ffffh.
2677: EE07                ;                   
2678: EE07                InitializeFilePosition:
2679: EE07     21FFFF     	LXI		H,-1          
2680: EE0A     22E1F5     	SHLD	FilePosInDirectory
2681: EE0D     C9         	RET                
2682: EE0E                ;                   
2683: EE0E                ;   Move on to the next file position within the current
2684: EE0E                ; directory buffer. If no more exist, set pointer to 0ffffh
2685: EE0E                ; and the calling routine will check for this. Enter with (C)
2686: EE0E                ; equal to 0ffh to cause the checksum byte to be set, else we
2687: EE0E                ; will check this disk and set write protect if checksums are
2688: EE0E                ; not the same (applies only if another directory sector must
2689: EE0E                ; be read).         
2690: EE0E                ;                   
2691: EE0E                GetNextEntry:       
2692: EE0E     2AC0F5     	LHLD	DrectorySize				; get directory entry size limit.
2693: EE11     EB         	XCHG               
2694: EE12     2AE1F5     	LHLD	FilePosInDirectory			; get index into directory.
2695: EE15     23         	INX		H					        
2696: EE16     22E1F5     	SHLD	FilePosInDirectory			; save  the next location
2697: EE19     CD9EED     	CALL	DEminusHL2HL				; (HL)=(DrectorySize)-(FilePosInDirectory)
2698: EE1C     DA07EE     	JC		InitializeFilePosition		; If no more entries, set this flag and return.
2699: EE1F                ;	JNC		GetNextEntry1		; are there any more entries?
2700: EE1F                ;	JMP		InitializeFilePosition		; No. - Set this flag and return.	
2701: EE1F                ;GetNextEntry1:     
2702: EE1F                                    
2703: EE1F     3AE1F5     	LDA		FilePosInDirectory		; Get current index for file in the  directory.
2704: EE22     E603       	ANI		03H						; only look within this sector (only 4 entries fit).
2705: EE24                									; - so taking the mod of position in directory
2706: EE24                									;  - gives us the relative position in the sector
2707: EE24     87         	ADD		A						; a * 2  - each directory entry is 32 bytes long.
2708: EE25     87         	ADD		A						; a * 4 - so relative position * 32 gives us the 
2709: EE26     87         	ADD		A						; a * 8  - start of the directory entry for this
2710: EE27     87         	ADD		A						; a * 16 - file
2711: EE28     87         	ADD		A						; a * 32
2712: EE29                	                   
2713: EE29                ;	MVI		B,5					; convert to relative position (32 bytes each).
2714: EE29                ;GetNextEntry2:     
2715: EE29                ;	ADD		A			;note that this is not efficient code.
2716: EE29                ;	DCR		B			;5 'ADD A's would be better.
2717: EE29                ;	JNZ		GetNextEntry2
2718: EE29                	                   
2719: EE29     32E0F5     	STA		FCBPosition			; save it as position of fcb.
2720: EE2C     B7         	ORA		A             
2721: EE2D     C0         	RNZ						; return if we are within buffer. ?????????
2722: EE2E     C5         	PUSH	B             
2723: EE2F     CDE6EB     	CALL	TRKSEC		;we need the next directory sector.
2724: EE32     CDDDED     	CALL	DIRREAD       
2725: EE35     C1         	POP		B             
2726: EE36     C3A7ED     	JMP		CHECKDIR      
2727: EE39                ;                   
2728: EE39                ;   Routine to to get a bit from the disk space allocation
2729: EE39                ; map. It is returned in (A), bit position 0. On entry to here,
2730: EE39                ; set (BC) to the block number on the disk to check.
2731: EE39                ; On return, (D) will contain the original bit position for
2732: EE39                ; this block number and (HL) will point to the address for it.
2733: EE39                ; Bit is determined by Block Number Mod 8
2734: EE39                ; Byte is determined by Block Number / 8
2735: EE39                                    
2736: EE39                CKBITMAP:           
2737: EE39     79         	MOV		A,C			; Determine Bit  interest.
2738: EE3A     E607       	ANI		07H			; mod 8 
2739: EE3C     3C         	INR		A			; add 1? and save
2740: EE3D     5F         	MOV		E,A			; Save particular bit number.
2741: EE3E     57         	MOV		D,A			; save it again
2742: EE3F                ;                     
2743: EE3F                ;   compute (BC)=(BC)/8.
2744: EE3F                ;   to determin in which Allocation block the number resides
2745: EE3F                ;                   
2746: EE3F     79         	MOV		A,C			; get the block
2747: EE40     0F         	RRC					; now shift right 3 bits.
2748: EE41     0F         	RRC      	  		; to divide by 8
2749: EE42     0F         	RRC                
2750: EE43     E61F       	ANI		1FH			; and clear bits 7,6,5.
2751: EE45     4F         	MOV		C,A			; put result in c           
2752: EE46     78         	MOV		A,B			           
2753: EE47     87         	ADD		A			; now shift
2754: EE48     87         	ADD		A           ; hi byte's bits 0,1 & 2   
2755: EE49     87         	ADD		A           ; int bit positions 6,7, & 8  
2756: EE4A     87         	ADD		A           ; so we can put continue the   
2757: EE4B     87         	ADD		A           ; divide by 8 of the whole word  
2758: EE4C     B1         	ORA		C			; combile with (C)(bits 0,1,2,3 & 4).
2759: EE4D     4F         	MOV		C,A			; ok, (C), the low byte has been completed.
2760: EE4E     78         	MOV		A,B			; Now to finish with
2761: EE4F     0F         	RRC 	       		; the high order byte                
2762: EE50     0F         	RRC                
2763: EE51     0F         	RRC 	       		; divide by 8
2764: EE52     E61F       	ANI		1FH			; zero out bits 5,6 & 7           
2765: EE54     47         	MOV		B,A			;and now (B) is completed.
2766: EE55                ;                     
2767: EE55                ;   use this as an offset into the disk space allocation
2768: EE55                ; table.            
2769: EE55                ;                   
2770: EE55     2AB7F5     	LHLD	FATpointer    
2771: EE58     09         	DAD	B              
2772: EE59     7E         	MOV	A,M				; we now have correct byte.
2773: EE5A                CKBMAP1:            
2774: EE5A     07         	RLC		;get correct bit into position 0.
2775: EE5B     1D         	DCR	E              
2776: EE5C     C25AEE     	JNZ	CKBMAP1        
2777: EE5F     C9         	RET                
2778: EE60                ;                   
2779: EE60                ;   Set or clear the bit map such that block number (BC) will be marked
2780: EE60                ; as used. On entry, if (E)=0 then this bit will be cleared, if it equals
2781: EE60                ; 1 then it will be set (don't use anyother values).
2782: EE60                ;                   
2783: EE60                STBITMAP:           
2784: EE60                ;	PUSH	D				; Save Set/Clear indicator
2785: EE60     CD39EE     	CALL	CKBITMAP		; Get the byte of interest.
2786: EE63     E6FE       	ANI		0FEH			; clear the affected bit.
2787: EE65     4F         	MOV		C,A				; Save it in C
2788: EE66     3AA3F5     	LDA		BitSetFlag		; get the flag
2789: EE69     B1         	ORA		C				; and now set(01)/reset(01) acording to flag
2790: EE6A                ;	POP	B             
2791: EE6A                ;	ORA	C	;and now set it acording to (C).
2792: EE6A                ;                   
2793: EE6A                ;  entry to restore the original bit position and then store
2794: EE6A                ; in table. (A) contains the value, (D) contains the bit
2795: EE6A                ; position (1-8), and (HL) points to the address within the
2796: EE6A                ; space allocation table for this byte.
2797: EE6A                ;                   
2798: EE6A                STBMAP1:            
2799: EE6A     0F         	RRC		;restore original bit position.
2800: EE6B     15         	DCR	D              
2801: EE6C     C26AEE     	JNZ	STBMAP1        
2802: EE6F     77         	MOV	M,A	;and stor byte in table.
2803: EE70     C9         	RET                
2804: EE71                ;                   
2805: EE71                ;   Set/clear space used bits in allocation map for this file.
2806: EE71                ; On entry, (C)=1 to set the map and (C)=0 to clear it.
2807: EE71                ;                   
2808: EE71                SetClearFATbits:    
2809: EE71     CD67ED     	CALL	FCB2HL			; Get address of fcb
2810: EE74     111000     	LXI		D,16			; Offset to Block Pointers in Directory entry
2811: EE77     19         	DAD		D				; Compute start to block number bytes. (A1..A10)
2812: EE78                ;	PUSH	B				; Save Set/Clear indicator 
2813: EE78     0E11       	MVI		C,17			; Check all 16 bytes (max) of table.
2814: EE7A                SETFL1:             
2815: EE7A                ;	POP		D				; Retreive Set/Clear indicator
2816: EE7A     0D         	DCR		C				; Counter
2817: EE7B     C8         	RZ						; Done?, then return
2818: EE7C                	                   
2819: EE7C                ;	PUSH	D				; Save Set/Clear indicator
2820: EE7C     3AD4F5     	LDA		SmallDisk			; check disk size .
2821: EE7F     B7         	ORA		A             
2822: EE80     CA8BEE     	JZ		SETFL2			; If it is a big disk, use 16 bits
2823: EE83                	                   
2824: EE83     C5         	PUSH	B				; Only 8 bit numbers. Save counter.
2825: EE84     E5         	PUSH	H				; Save pointer to current Allocation byte
2826: EE85     4E         	MOV		C,M				; Get low byte from table, always
2827: EE86     0600       	MVI		B,0				; Set high byte to zero.
2828: EE88     C391EE     	JMP		SETFL3			; skip 16 bit number processing
2829: EE8B                	                   
2830: EE8B                SETFL2:             
2831: EE8B     0D         	DCR		C				; Adjust counter for 16 bit block numbers,.
2832: EE8C     C5         	PUSH	B				; Save Counter
2833: EE8D     4E         	MOV		C,M				; Now get both the low and high bytes.
2834: EE8E     23         	INX		H             
2835: EE8F     46         	MOV		B,M           
2836: EE90     E5         	PUSH	H				; Save pointer to current Allocation byte
2837: EE91                SETFL3:             
2838: EE91     79         	MOV		A,C				; Block used? if both (b) and (c) are 00
2839: EE92     B0         	ORA		B				; the block is NOT used
2840: EE93     CAA0EE     	JZ		SETFL4			; NOT used move on			
2841: EE96     2ABEF5     	LHLD	DiskSize		; Is this block number within the
2842: EE99     7D         	MOV		A,L	          
2843: EE9A     91         	SUB		C             
2844: EE9B     7C         	MOV		A,H           
2845: EE9C     98         	SBB		B             
2846: EE9D     D460EE     	CNC		STBITMAP		; Yes, set the proper bit.
2847: EEA0                SETFL4:             
2848: EEA0     E1         	POP	H					; Point to next block number in fcb.
2849: EEA1     23         	INX	H              
2850: EEA2     C1         	POP	B					; Retreive the counter
2851: EEA3     C37AEE     	JMP	SETFL1         
2852: EEA6                                    
2853: EEA6                ;                   
2854: EEA6                ;   Set the status (StatusBDOSReturn) and return.
2855: EEA6                ;                   
2856: EEA6                STSTATUS:           
2857: EEA6     3ACCF5     	LDA	FNDSTAT        
2858: EEA9     C35CEB     	JMP	SetStatusBDOS  
2859: EEAC                ;                   
2860: EEAC                ;   Check extents in (A) and (C). Set the zero flag if they
2861: EEAC                ; are the same. The number of 16k chunks of disk space that
2862: EEAC                ; the directory extent covers is expressad is (EXTMASK+1).
2863: EEAC                ; No registers are modified.
2864: EEAC                ;                   
2865: EEAC                SAMEXT:             
2866: EEAC     C5         	PUSH	B             
2867: EEAD     F5         	PUSH	PSW           
2868: EEAE     3ABDF5     	LDA	EXTMASK	;get extent mask and use it to
2869: EEB1     2F         	CMA		;to compare both extent numbers.
2870: EEB2     47         	MOV	B,A	;save resulting mask here.
2871: EEB3     79         	MOV	A,C	;mask first extent and save in (C).
2872: EEB4     A0         	ANA	B              
2873: EEB5     4F         	MOV	C,A            
2874: EEB6     F1         	POP	PSW	;now mask second extent and compare
2875: EEB7     A0         	ANA	B	;with the first one.
2876: EEB8     91         	SUB	C              
2877: EEB9     E61F       	ANI	1FH	;(* only check buts 0-4 *)
2878: EEBB     C1         	POP	B	;the zero flag is set if they are the same.
2879: EEBC     C9         	RET		;restore (BC) and return.
2880: EEBD                ;                   
2881: EEBD                ;   Search for the first occurence of a file name. On entry,
2882: EEBD                ; register (C) should contain the number of bytes of the fcb
2883: EEBD                ; that must match.  
2884: EEBD                ;                   
2885: EEBD                FindFirst:          
2886: EEBD     3EFF       	MVI		A,0FFH        
2887: EEBF     32CCF5     	STA		FNDSTAT			; set flag to not match found
2888: EEC2     21CFF5     	LXI		H,COUNTER		; point at character counter.
2889: EEC5     71         	MOV		M,C				; put in number of bytes to match
2890: EEC6     2A3CE8     	LHLD	ParamsDE		; get filename to match.
2891: EEC9     22D0F5     	SHLD	SaveFCB			; and save.
2892: EECC     CD07EE     	CALL	InitializeFilePosition	; clear initial file position (set to 0ffffh).
2893: EECF     CDC4EB     	CALL	HomeDrive		;home the drive.
2894: EED2                ;                   
2895: EED2                ;   Entry to locate the next occurence of a filename within the
2896: EED2                ; directory. The disk is not expected to have been changed. If
2897: EED2                ; it was, then it will be write protected.
2898: EED2                ;                   
2899: EED2                FINDNXT:            
2900: EED2     0E00       	MVI		C,0				; write protect the disk if changed.
2901: EED4     CD0EEE     	CALL	GetNextEntry	; get next filename entry in directory.
2902: EED7     CDFEED     	CALL	CheckFilePosition	; is file position = 0ffffh?
2903: EEDA     CA39EF     	JZ		FNDNXT6			; yes, exit now then.
2904: EEDD     2AD0F5     	LHLD	SaveFCB			; get (DE) pointing to filename to match.
2905: EEE0     EB         	XCHG               
2906: EEE1     1A         	LDAX	D             
2907: EEE2     FEE5       	CPI		EmptyFileFlag	; is it an empty directory entry?
2908: EEE4     CAEFEE     	JZ		FNDNXT1			; yes - Skip it
2909: EEE7                						; No process it
2910: EEE7     D5         	PUSH	D             
2911: EEE8     CD88ED     	CALL	MOREFLS	;more files in directory?
2912: EEEB     D1         	POP	D              
2913: EEEC     D239EF     	JNC	FNDNXT6	;no more. Exit now.
2914: EEEF                FNDNXT1:            
2915: EEEF     CD67ED     	CALL	FCB2HL	;get address of this fcb in directory.
2916: EEF2     3ACFF5     	LDA	COUNTER	;get number of bytes (characters) to check.
2917: EEF5     4F         	MOV	C,A            
2918: EEF6     0600       	MVI	B,0	;initialize byte position counter.
2919: EEF8                FNDNXT2:            
2920: EEF8     79         	MOV	A,C	;are we done with the compare?
2921: EEF9     B7         	ORA	A              
2922: EEFA     CA28EF     	JZ	FNDNXT5         
2923: EEFD     1A         	LDAX	D	;no, check next byte.
2924: EEFE     FE3F       	CPI	QMARK		; '?'	;don't care about this character?
2925: EF00     CA21EF     	JZ	FNDNXT4         
2926: EF03     78         	MOV	A,B	;get bytes position in fcb.
2927: EF04     FE0D       	CPI	13	;don't care about the thirteenth byte either.
2928: EF06     CA21EF     	JZ	FNDNXT4         
2929: EF09     FE0C       	CPI	12	;extent byte?
2930: EF0B     1A         	LDAX	D             
2931: EF0C     CA18EF     	JZ	FNDNXT3         
2932: EF0F     96         	SUB	M	;otherwise compare characters.
2933: EF10     E67F       	ANI	7FH            
2934: EF12     C2D2EE     	JNZ	FINDNXT	;not the same, check next entry.
2935: EF15     C321EF     	JMP	FNDNXT4	;so far so good, keep checking.
2936: EF18                FNDNXT3:            
2937: EF18     C5         	PUSH	B	;check the extent byte here.
2938: EF19     4E         	MOV	C,M            
2939: EF1A     CDACEE     	CALL	SAMEXT        
2940: EF1D     C1         	POP	B              
2941: EF1E     C2D2EE     	JNZ	FINDNXT	;not the same, look some more.
2942: EF21                ;                   
2943: EF21                ;   So far the names compare. Bump pointers to the next byte
2944: EF21                ; and continue until all (C) characters have been checked.
2945: EF21                ;                   
2946: EF21                FNDNXT4:            
2947: EF21     13         	INX	D	;bump pointers.
2948: EF22     23         	INX	H              
2949: EF23     04         	INR	B              
2950: EF24     0D         	DCR	C	;adjust character counter.
2951: EF25     C3F8EE     	JMP	FNDNXT2        
2952: EF28                FNDNXT5:            
2953: EF28     3AE1F5     	LDA	FilePosInDirectory	;return the position of this entry.
2954: EF2B     E603       	ANI	03H            
2955: EF2D     323FE8     	STA	StatusBDOSReturn
2956: EF30     21CCF5     	LXI	H,FNDSTAT      
2957: EF33     7E         	MOV	A,M            
2958: EF34     17         	RAL                
2959: EF35     D0         	RNC                
2960: EF36     AF         	XRA	A              
2961: EF37     77         	MOV	M,A            
2962: EF38     C9         	RET                
2963: EF39                ;                   
2964: EF39                ;   Filename was not found. Set appropriate status.
2965: EF39                ;                   
2966: EF39                FNDNXT6:            
2967: EF39     CD07EE     	CALL	InitializeFilePosition;set (FilePosInDirectory) to 0ffffh.
2968: EF3C     3EFF       	MVI	A,0FFH	;say not located.
2969: EF3E     C35CEB     	JMP	SetStatusBDOS  
2970: EF41                ;                   
2971: EF41                ;   Erase files from the directory. Only the first byte of the
2972: EF41                ; fcb will be affected. It is set to (E5).
2973: EF41                ;                   
2974: EF41                ERAFILE:            
2975: EF41     CD5DED     	CALL	CHKWPRT		;is disk write protected?
2976: EF44     0E0C       	MVI		C,12		;only compare file names.
2977: EF46     CDBDEE     	CALL	FindFirst		;get first file name.
2978: EF49                ERAFIL1:            
2979: EF49     CDFEED     	CALL	CheckFilePosition	;any found?
2980: EF4C     C8         	RZ					;nope, we must be done.
2981: EF4D     CD4DED     	CALL	CHKROFL	;is file read only?
2982: EF50     CD67ED     	CALL	FCB2HL	;nope, get address of fcb and
2983: EF53     36E5       	MVI	M,EmptyFileFlag	;set first byte to 'empty'.
2984: EF55                ;	MVI	C,0	;clear the space from the bit map.
2985: EF55     3E00       	MVI		A,00H		; want to clear the bit
2986: EF57     32A3F5     	STA		BitSetFlag	; Flag = 00, clear bit
2987: EF5A     CD71EE     	CALL	SetClearFATbits
2988: EF5D     CDCFED     	CALL	DIRWRITE;now write the directory sector back out.
2989: EF60     CDD2EE     	CALL	FINDNXT	;find the next file name.
2990: EF63     C349EF     	JMP	ERAFIL1	;and repeat process.
2991: EF66                ;                   
2992: EF66                ;   Look through the space allocation map (bit map) for the
2993: EF66                ; next available block. Start searching at block number (BC-1).
2994: EF66                ; The search procedure is to look for an empty block that is
2995: EF66                ; before the starting block. If not empty, look at a later
2996: EF66                ; block number. In this way, we return the closest empty block
2997: EF66                ; on either side of the 'target' block number. This will speed
2998: EF66                ; access on random devices. For serial devices, this should be
2999: EF66                ; changed to look in the forward direction first and then start
3000: EF66                ; at the front and search some more.
3001: EF66                ;                   
3002: EF66                ;   On return, (DE)= block number that is empty and (HL) =0
3003: EF66                ; if no empry block was found.
3004: EF66                ;                   
3005: EF66                FNDSPACE:           
3006: EF66     50         	MOV	D,B	;set (DE) as the block that is checked.
3007: EF67     59         	MOV	E,C            
3008: EF68                ;                   
3009: EF68                ;   Look before target block. Registers (BC) are used as the lower
3010: EF68                ; pointer and (DE) as the upper pointer.
3011: EF68                ;                   
3012: EF68                FNDSPA1:            
3013: EF68     79         	MOV	A,C	;is block 0 specified?
3014: EF69     B0         	ORA	B              
3015: EF6A     CA79EF     	JZ	FNDSPA2         
3016: EF6D     0B         	DCX	B	;nope, check previous block.
3017: EF6E     D5         	PUSH	D             
3018: EF6F     C5         	PUSH	B             
3019: EF70     CD39EE     	CALL	CKBITMAP      
3020: EF73     1F         	RAR		;is this block empty?
3021: EF74     D294EF     	JNC	FNDSPA3	;yes. use this.
3022: EF77                ;                   
3023: EF77                ;   Note that the above logic gets the first block that it finds
3024: EF77                ; that is empty. Thus a file could be written 'backward' making
3025: EF77                ; it very slow to access. This could be changed to look for the
3026: EF77                ; first empty block and then continue until the start of this
3027: EF77                ; empty space is located and then used that starting block.
3028: EF77                ; This should help speed up access to some files especially on
3029: EF77                ; a well used disk with lots of fairly small 'holes'.
3030: EF77                ;                   
3031: EF77     C1         	POP	B	;nope, check some more.
3032: EF78     D1         	POP	D              
3033: EF79                ;                   
3034: EF79                ;   Now look after target block.
3035: EF79                ;                   
3036: EF79                FNDSPA2:            
3037: EF79     2ABEF5     	LHLD	DiskSize	;is block (DE) within disk limits?
3038: EF7C     7B         	MOV	A,E            
3039: EF7D     95         	SUB	L              
3040: EF7E     7A         	MOV	A,D            
3041: EF7F     9C         	SBB	H              
3042: EF80     D29CEF     	JNC	FNDSPA4        
3043: EF83     13         	INX	D	;yes, move on to next one.
3044: EF84     C5         	PUSH	B             
3045: EF85     D5         	PUSH	D             
3046: EF86     42         	MOV	B,D            
3047: EF87     4B         	MOV	C,E            
3048: EF88     CD39EE     	CALL	CKBITMAP;check it.
3049: EF8B     1F         	RAR		;empty?       
3050: EF8C     D294EF     	JNC	FNDSPA3        
3051: EF8F     D1         	POP	D	;nope, continue searching.
3052: EF90     C1         	POP	B              
3053: EF91     C368EF     	JMP	FNDSPA1        
3054: EF94                ;                   
3055: EF94                ;   Empty block found. Set it as used and return with (HL)
3056: EF94                ; pointing to it (true?).
3057: EF94                ;                   
3058: EF94                FNDSPA3:            
3059: EF94     17         	RAL		;reset byte.  
3060: EF95     3C         	INR	A	;and set bit 0.
3061: EF96     CD6AEE     	CALL	STBMAP1	;update bit map.
3062: EF99     E1         	POP	H	;set return registers.
3063: EF9A     D1         	POP	D              
3064: EF9B     C9         	RET                
3065: EF9C                ;                   
3066: EF9C                ;   Free block was not found. If (BC) is not zero, then we have
3067: EF9C                ; not checked all of the disk space.
3068: EF9C                ;                   
3069: EF9C                FNDSPA4:            
3070: EF9C     79         	MOV	A,C            
3071: EF9D     B0         	ORA	B              
3072: EF9E     C268EF     	JNZ	FNDSPA1        
3073: EFA1     210000     	LXI	H,0	;set 'not found' status.
3074: EFA4     C9         	RET                
3075: EFA5                ;                   
3076: EFA5                ;   Move a complete fcb entry into the directory and write it.
3077: EFA5                ;                   
3078: EFA5                FCBSET:             
3079: EFA5     0E00       	MVI	C,0            
3080: EFA7     1E20       	MVI	E,32	;length of each entry.
3081: EFA9                ;                   
3082: EFA9                ;   Move (E) bytes from the fcb pointed to by (ParamsDE) into
3083: EFA9                ; fcb in directory starting at relative byte (C). This updated
3084: EFA9                ; directory buffer is then written to the disk.
3085: EFA9                ;                   
3086: EFA9                UPDATE:             
3087: EFA9     D5         	PUSH	D             
3088: EFAA     0600       	MVI	B,0	;set (BC) to relative byte position.
3089: EFAC     2A3CE8     	LHLD	ParamsDE	;get address of fcb.
3090: EFAF     09         	DAD	B	;compute starting byte.
3091: EFB0     EB         	XCHG               
3092: EFB1     CD67ED     	CALL	FCB2HL	;get address of fcb to update in directory.
3093: EFB4     C1         	POP	B	;set (C) to number of bytes to change.
3094: EFB5     CD72EB     	CALL	DEtoHL        
3095: EFB8                UPDATE1:            
3096: EFB8     CDE6EB     	CALL	TRKSEC	;determine the track and sector affected.
3097: EFBB     C3CFED     	JMP	DIRWRITE	;then write this sector out.
3098: EFBE                ;                   
3099: EFBE                ;   Routine to change the name of all files on the disk with a
3100: EFBE                ; specified name. The fcb contains the current name as the
3101: EFBE                ; first 12 characters and the new name 16 bytes into the fcb.
3102: EFBE                ;                   
3103: EFBE                CHGNAMES:           
3104: EFBE     CD5DED     	CALL	CHKWPRT	;check for a write protected disk.
3105: EFC1     0E0C       	MVI	C,12	;match first 12 bytes of fcb only.
3106: EFC3     CDBDEE     	CALL	FindFirst	;get first name.
3107: EFC6     2A3CE8     	LHLD	ParamsDE	;get address of fcb.
3108: EFC9     7E         	MOV	A,M	;get user number.
3109: EFCA     111000     	LXI	D,16	;move over to desired name.
3110: EFCD     19         	DAD	D              
3111: EFCE     77         	MOV	M,A	;keep same user number.
3112: EFCF                CHGNAM1:            
3113: EFCF     CDFEED     	CALL	CheckFilePosition;any matching file found?
3114: EFD2     C8         	RZ		;no, we must be done.
3115: EFD3     CD4DED     	CALL	CHKROFL	;check for read only file.
3116: EFD6     0E10       	MVI	C,16	;start 16 bytes into fcb.
3117: EFD8     1E0C       	MVI	E,12	;and update the first 12 bytes of directory.
3118: EFDA     CDA9EF     	CALL	UPDATE        
3119: EFDD     CDD2EE     	CALL	FINDNXT	;get te next file name.
3120: EFE0     C3CFEF     	JMP	CHGNAM1	;and continue.
3121: EFE3                ;                   
3122: EFE3                ;   Update a files attributes. The procedure is to search for
3123: EFE3                ; every file with the same name as shown in fcb (ignoring bit 7)
3124: EFE3                ; and then to update it (which includes bit 7). No other changes
3125: EFE3                ; are made.         
3126: EFE3                ;                   
3127: EFE3                SAVEATTR:           
3128: EFE3     0E0C       	MVI	C,12	;match first 12 bytes.
3129: EFE5     CDBDEE     	CALL	FindFirst	;look for first filename.
3130: EFE8                SAVATR1:            
3131: EFE8     CDFEED     	CALL	CheckFilePosition;was one found?
3132: EFEB     C8         	RZ		;nope, we must be done.
3133: EFEC     0E00       	MVI	C,0	;yes, update the first 12 bytes now.
3134: EFEE     1E0C       	MVI	E,12           
3135: EFF0     CDA9EF     	CALL	UPDATE	;update filename and write directory.
3136: EFF3     CDD2EE     	CALL	FINDNXT	;and get the next file.
3137: EFF6     C3E8EF     	JMP	SAVATR1	;then continue until done.
3138: EFF9                ;                   
3139: EFF9                ;  Open a file (name specified in fcb).
3140: EFF9                ;                   
3141: EFF9                OPENIT:             
3142: EFF9     0E0F       	MVI	C,15	;compare the first 15 bytes.
3143: EFFB     CDBDEE     	CALL	FindFirst	;get the first one in directory.
3144: EFFE     CDFEED     	CALL	CheckFilePosition;any at all?
3145: F001     C8         	RZ                 
3146: F002                OPENIT1:            
3147: F002     CDC9EC     	CALL	SETEXT	;point to extent byte within users fcb.
3148: F005     7E         	MOV	A,M	;and get it.
3149: F006     F5         	PUSH	PSW	;save it and address.
3150: F007     E5         	PUSH	H             
3151: F008     CD67ED     	CALL	FCB2HL	;point to fcb in directory.
3152: F00B     EB         	XCHG               
3153: F00C     2A3CE8     	LHLD	ParamsDE	;this is the users copy.
3154: F00F     0E20       	MVI	C,32	;move it into users space.
3155: F011     D5         	PUSH	D             
3156: F012     CD72EB     	CALL	DEtoHL        
3157: F015     CD81ED     	CALL	SETS2B7	;set bit 7 in 's2' byte (unmodified).
3158: F018     D1         	POP	D	;now get the extent byte from this fcb.
3159: F019     210C00     	LXI	H,12           
3160: F01C     19         	DAD	D              
3161: F01D     4E         	MOV	C,M	;into (C). 
3162: F01E     210F00     	LXI	H,15	;now get the record count byte into (B).
3163: F021     19         	DAD	D              
3164: F022     46         	MOV	B,M            
3165: F023     E1         	POP	H	;keep the same extent as the user had originally.
3166: F024     F1         	POP	PSW            
3167: F025     77         	MOV	M,A            
3168: F026     79         	MOV	A,C	;is it the same as in the directory fcb?
3169: F027     BE         	CMP	M              
3170: F028     78         	MOV	A,B	;if yes, then use the same record count.
3171: F029     CA33F0     	JZ	OPENIT2         
3172: F02C     3E00       	MVI	A,0	;if the user specified an extent greater than
3173: F02E     DA33F0     	JC	OPENIT2	;the one in the directory, then set record count to 0.
3174: F031     3E80       	MVI	A,DirBuffSize	;otherwise set to maximum.
3175: F033                OPENIT2:            
3176: F033     2A3CE8     	LHLD	ParamsDE	;set record count in users fcb to (A).
3177: F036     110F00     	LXI	D,15           
3178: F039     19         	DAD	D	;compute relative position.
3179: F03A     77         	MOV	M,A	;and set the record count.
3180: F03B     C9         	RET                
3181: F03C                ;                   
3182: F03C                ;   Move two bytes from (DE) to (HL) if (and only if) (HL)
3183: F03C                ; point to a zero value (16 bit).
3184: F03C                ;   Return with zero flag set it (DE) was moved. Registers (DE)
3185: F03C                ; and (HL) are not changed. However (A) is.
3186: F03C                ;                   
3187: F03C                MOVEWORD:           
3188: F03C     7E         	MOV	A,M	;check for a zero word.
3189: F03D     23         	INX	H              
3190: F03E     B6         	ORA	M	;both bytes zero?
3191: F03F     2B         	DCX	H              
3192: F040     C0         	RNZ		;nope, just return.
3193: F041     1A         	LDAX	D	;yes, move two bytes from (DE) into
3194: F042     77         	MOV	M,A	;this zero space.
3195: F043     13         	INX	D              
3196: F044     23         	INX	H              
3197: F045     1A         	LDAX	D             
3198: F046     77         	MOV	M,A            
3199: F047     1B         	DCX	D	;don't disturb these registers.
3200: F048     2B         	DCX	H              
3201: F049     C9         	RET                
3202: F04A                ;                   
3203: F04A                ;   Get here to close a file specified by (fcb).
3204: F04A                ;                   
3205: F04A                CLOSEIT:            
3206: F04A     AF         	XRA	A	;clear status and file position bytes.
3207: F04B     323FE8     	STA	StatusBDOSReturn
3208: F04E     32E1F5     	STA	FilePosInDirectory
3209: F051     32E2F5     	STA	FilePosInDirectory+1
3210: F054     CD27ED     	CALL	GETWPRT	;get write protect bit for this drive.
3211: F057     C0         	RNZ		;just return if it is set.
3212: F058     CD72ED     	CALL	GETS2	;else get the 's2' byte.
3213: F05B     E680       	ANI	80H	;and look at bit 7 (file unmodified?).
3214: F05D     C0         	RNZ		;just return if set.
3215: F05E     0E0F       	MVI	C,15	;else look up this file in directory.
3216: F060     CDBDEE     	CALL	FindFirst     
3217: F063     CDFEED     	CALL	CheckFilePosition;was it found?
3218: F066     C8         	RZ		;just return if not.
3219: F067     011000     	LXI	B,16	;set (HL) pointing to records used section.
3220: F06A     CD67ED     	CALL	FCB2HL        
3221: F06D     09         	DAD	B              
3222: F06E     EB         	XCHG               
3223: F06F     2A3CE8     	LHLD	ParamsDE	;do the same for users specified fcb.
3224: F072     09         	DAD	B              
3225: F073     0E10       	MVI	C,16	;this many bytes are present in this extent.
3226: F075                CLOSEIT1:           
3227: F075     3AD4F5     	LDA	SmallDisk	;8 or 16 bit record numbers?
3228: F078     B7         	ORA	A              
3229: F079     CA90F0     	JZ	CLOSEIT4        
3230: F07C     7E         	MOV	A,M	;just 8 bit. Get one from users fcb.
3231: F07D     B7         	ORA	A              
3232: F07E     1A         	LDAX	D	;now get one from directory fcb.
3233: F07F     C283F0     	JNZ	CLOSEIT2       
3234: F082     77         	MOV	M,A	;users byte was zero. Update from directory.
3235: F083                CLOSEIT2:           
3236: F083     B7         	ORA	A              
3237: F084     C289F0     	JNZ	CLOSEIT3       
3238: F087     7E         	MOV	A,M	;directories byte was zero, update from users fcb.
3239: F088     12         	STAX	D             
3240: F089                CLOSEIT3:           
3241: F089     BE         	CMP	M	;if neither one of these bytes were zero,
3242: F08A     C2C7F0     	JNZ	CLOSEIT7	;then close error if they are not the same.
3243: F08D     C3A5F0     	JMP	CLOSEIT5	;ok so far, get to next byte in fcbs.
3244: F090                CLOSEIT4:           
3245: F090     CD3CF0     	CALL	MOVEWORD;update users fcb if it is zero.
3246: F093     EB         	XCHG               
3247: F094     CD3CF0     	CALL	MOVEWORD;update directories fcb if it is zero.
3248: F097     EB         	XCHG               
3249: F098     1A         	LDAX	D	;if these two values are no different,
3250: F099     BE         	CMP	M	;then a close error occured.
3251: F09A     C2C7F0     	JNZ	CLOSEIT7       
3252: F09D     13         	INX	D	;check second byte.
3253: F09E     23         	INX	H              
3254: F09F     1A         	LDAX	D             
3255: F0A0     BE         	CMP	M              
3256: F0A1     C2C7F0     	JNZ	CLOSEIT7       
3257: F0A4     0D         	DCR	C	;remember 16 bit values.
3258: F0A5                CLOSEIT5:           
3259: F0A5     13         	INX	D	;bump to next item in table.
3260: F0A6     23         	INX	H              
3261: F0A7     0D         	DCR	C	;there are 16 entries only.
3262: F0A8     C275F0     	JNZ	CLOSEIT1;continue if more to do.
3263: F0AB     01ECFF     	LXI	B,0FFECH;backup 20 places (extent byte).
3264: F0AE     09         	DAD	B              
3265: F0AF     EB         	XCHG               
3266: F0B0     09         	DAD	B              
3267: F0B1     1A         	LDAX	D             
3268: F0B2     BE         	CMP	M	;directory's extent already greater than the
3269: F0B3     DABFF0     	JC	CLOSEIT6	;users extent?
3270: F0B6     77         	MOV	M,A	;no, update directory extent.
3271: F0B7     010300     	LXI	B,3	;and update the record count byte in
3272: F0BA     09         	DAD	B	;directories fcb.
3273: F0BB     EB         	XCHG               
3274: F0BC     09         	DAD	B              
3275: F0BD     7E         	MOV	A,M	;get from user.
3276: F0BE     12         	STAX	D	;and put in directory.
3277: F0BF                CLOSEIT6:           
3278: F0BF     3EFF       	MVI	A,0FFH	;set 'was open and is now closed' byte.
3279: F0C1     32CAF5     	STA	CLOSEFLG       
3280: F0C4     C3B8EF     	JMP	UPDATE1	;update the directory now.
3281: F0C7                CLOSEIT7:           
3282: F0C7     213FE8     	LXI	H,StatusBDOSReturn;set return status and then return.
3283: F0CA     35         	DCR	M              
3284: F0CB     C9         	RET                
3285: F0CC                ;                   
3286: F0CC                ;   Routine to get the next empty space in the directory. It
3287: F0CC                ; will then be cleared for use.
3288: F0CC                ;                   
3289: F0CC                GETEMPTY:           
3290: F0CC     CD5DED     	CALL	CHKWPRT		;make sure disk is not write protected.
3291: F0CF     2A3CE8     	LHLD	ParamsDE	;save current parameters (fcb).
3292: F0D2     E5         	PUSH	H             
3293: F0D3     21A4F5     	LXI		H,EmptyDir	;use special one for empty space.
3294: F0D6     223CE8     	SHLD	ParamsDE      
3295: F0D9     0E01       	MVI	C,1	;search for first empty spot in directory.
3296: F0DB     CDBDEE     	CALL	FindFirst	;(* only check first byte *)
3297: F0DE     CDFEED     	CALL	CheckFilePosition;none?
3298: F0E1     E1         	POP	H              
3299: F0E2     223CE8     	SHLD	ParamsDE	;restore original fcb address.
3300: F0E5     C8         	RZ		;return if no more space.
3301: F0E6     EB         	XCHG               
3302: F0E7     210F00     	LXI	H,15	;point to number of records for this file.
3303: F0EA     19         	DAD	D              
3304: F0EB     0E11       	MVI	C,17	;and clear all of this space.
3305: F0ED     AF         	XRA	A              
3306: F0EE                GETMT1:             
3307: F0EE     77         	MOV	M,A            
3308: F0EF     23         	INX	H              
3309: F0F0     0D         	DCR	C              
3310: F0F1     C2EEF0     	JNZ	GETMT1         
3311: F0F4     210D00     	LXI	H,13	;clear the 's1' byte also.
3312: F0F7     19         	DAD	D              
3313: F0F8     77         	MOV	M,A            
3314: F0F9     CD95ED     	CALL	CHKNMBR	;keep (FilePosInDirSegment) within bounds.
3315: F0FC     CDA5EF     	CALL	FCBSET	;write out this fcb entry to directory.
3316: F0FF     C381ED     	JMP	SETS2B7	;set 's2' byte bit 7 (unmodified at present).
3317: F102                ;                   
3318: F102                ;   Routine to close the current extent and open the next one
3319: F102                ; for reading.      
3320: F102                ;                   
3321: F102                GETNEXT:            
3322: F102     AF         	XRA	A              
3323: F103     32CAF5     	STA	CLOSEFLG;clear close flag.
3324: F106     CD4AF0     	CALL	CLOSEIT	;close this extent.
3325: F109     CDFEED     	CALL	CheckFilePosition
3326: F10C     C8         	RZ		;not there???  
3327: F10D     2A3CE8     	LHLD	ParamsDE	;get extent byte.
3328: F110     010C00     	LXI	B,12           
3329: F113     09         	DAD	B              
3330: F114     7E         	MOV	A,M	;and increment it.
3331: F115     3C         	INR	A              
3332: F116     E61F       	ANI	1FH	;keep within range 0-31.
3333: F118     77         	MOV	M,A            
3334: F119     CA2BF1     	JZ	GTNEXT1	;overflow?
3335: F11C     47         	MOV	B,A	;mask extent byte.
3336: F11D     3ABDF5     	LDA	EXTMASK        
3337: F120     A0         	ANA	B              
3338: F121     21CAF5     	LXI	H,CLOSEFLG;check close flag (0ffh is ok).
3339: F124     A6         	ANA	M              
3340: F125     CA36F1     	JZ	GTNEXT2	;if zero, we must read in next extent.
3341: F128     C354F1     	JMP	GTNEXT3	;else, it is already in memory.
3342: F12B                GTNEXT1:            
3343: F12B     010200     	LXI	B,2	;Point to the 's2' byte.
3344: F12E     09         	DAD	B              
3345: F12F     34         	INR	M	;and bump it.
3346: F130     7E         	MOV	A,M	;too many extents?
3347: F131     E60F       	ANI	0FH            
3348: F133     CA5EF1     	JZ	GTNEXT5	;yes, set error code.
3349: F136                ;                   
3350: F136                ;   Get here to open the next extent.
3351: F136                ;                   
3352: F136                GTNEXT2:            
3353: F136     0E0F       	MVI	C,15	;set to check first 15 bytes of fcb.
3354: F138     CDBDEE     	CALL	FindFirst	;find the first one.
3355: F13B     CDFEED     	CALL	CheckFilePosition;none available?
3356: F13E     C254F1     	JNZ	GTNEXT3        
3357: F141     3ACBF5     	LDA	RDWRTFLG;no extent present. Can we open an empty one?
3358: F144     3C         	INR	A	;0ffh means reading (so not possible).
3359: F145     CA5EF1     	JZ	GTNEXT5	;or an error.
3360: F148     CDCCF0     	CALL	GETEMPTY;we are writing, get an empty entry.
3361: F14B     CDFEED     	CALL	CheckFilePosition;none?
3362: F14E     CA5EF1     	JZ	GTNEXT5	;error if true.
3363: F151     C357F1     	JMP	GTNEXT4	;else we are almost done.
3364: F154                GTNEXT3:            
3365: F154     CD02F0     	CALL	OPENIT1	;open this extent.
3366: F157                GTNEXT4:            
3367: F157     CDDEEC     	CALL	STRDATA	;move in updated data (rec #, extent #, etc.)
3368: F15A     AF         	XRA	A	;clear status and return.
3369: F15B     C35CEB     	JMP	SetStatusBDOS  
3370: F15E                ;                   
3371: F15E                ;   Error in extending the file. Too many extents were needed
3372: F15E                ; or not enough space on the disk.
3373: F15E                ;                   
3374: F15E                GTNEXT5:            
3375: F15E     CD60EB     	CALL	IOERR1	;set error code, clear bit 7 of 's2'
3376: F161     C381ED     	JMP	SETS2B7	;so this is not written on a close.
3377: F164                ;                   
3378: F164                ;   Read a sequential file.
3379: F164                ;                   
3380: F164                RDSEQ:              
3381: F164     3E01       	MVI	A,1	;set sequential access mode.
3382: F166     32CDF5     	STA	MODE           
3383: F169                RDSEQ1:             
3384: F169     3EFF       	MVI	A,0FFH	;don't allow reading unwritten space.
3385: F16B     32CBF5     	STA	RDWRTFLG       
3386: F16E     CDDEEC     	CALL	STRDATA	;put rec# and ext# into fcb.
3387: F171     3ADAF5     	LDA	SAVNREC	;get next record to read.
3388: F174     21D8F5     	LXI	H,SAVNXT;get number of records in extent.
3389: F177     BE         	CMP	M	;within this extent?
3390: F178     DA8EF1     	JC	RDSEQ2          
3391: F17B     FE80       	CPI	LogicalSecSize	;no. Is this extent fully used?
3392: F17D     C2A3F1     	JNZ	RDSEQ3	;no. End-of-file.
3393: F180     CD02F1     	CALL	GETNEXT	;yes, open the next one.
3394: F183     AF         	XRA	A	;reset next record to read.
3395: F184     32DAF5     	STA	SAVNREC        
3396: F187     3A3FE8     	LDA	StatusBDOSReturn	;check on open, successful?
3397: F18A     B7         	ORA	A              
3398: F18B     C2A3F1     	JNZ	RDSEQ3	;no, error.
3399: F18E                RDSEQ2:             
3400: F18E     CD9AEC     	CALL	COMBLK	;ok. compute block number to read.
3401: F191     CDA7EC     	CALL	CHKBLK	;check it. Within bounds?
3402: F194     CAA3F1     	JZ	RDSEQ3	;no, error.
3403: F197     CDADEC     	CALL	LOGICAL	;convert (BLKNMBR) to logical sector (128 byte).
3404: F19A     CDF4EB     	CALL	TRKSEC1	;set the track and sector for this block #.
3405: F19D     CDD5EB     	CALL	DOREAD	;and read it.
3406: F1A0     C3F5EC     	JMP	SETNREC	;and set the next record to be accessed.
3407: F1A3                ;                   
3408: F1A3                ;   Read error occured. Set status and return.
3409: F1A3                ;                   
3410: F1A3                RDSEQ3:             
3411: F1A3     C360EB     	JMP	IOERR1         
3412: F1A6                ;                   
3413: F1A6                ;   Write the next sequential record.
3414: F1A6                ;                   
3415: F1A6                WTSEQ:              
3416: F1A6     3E01       	MVI	A,1	;set sequential access mode.
3417: F1A8     32CDF5     	STA	MODE           
3418: F1AB                WTSEQ1:             
3419: F1AB     3E00       	MVI	A,0	;allow an addition empty extent to be opened.
3420: F1AD     32CBF5     	STA	RDWRTFLG       
3421: F1B0     CD5DED     	CALL	CHKWPRT	;check write protect status.
3422: F1B3     2A3CE8     	LHLD	ParamsDE      
3423: F1B6     CD50ED     	CALL	CKROF1	;check for read only file, (HL) already set to fcb.
3424: F1B9     CDDEEC     	CALL	STRDATA	;put updated data into fcb.
3425: F1BC     3ADAF5     	LDA	SAVNREC	;get record number to write.
3426: F1BF     FE80       	CPI	LogicalSecSize	;within range?
3427: F1C1     D260EB     	JNC	IOERR1	;no, error(?).
3428: F1C4     CD9AEC     	CALL	COMBLK	;compute block number.
3429: F1C7     CDA7EC     	CALL	CHKBLK	;check number.
3430: F1CA     0E00       	MVI	C,0	;is there one to write to?
3431: F1CC     C216F2     	JNZ	WTSEQ6	;yes, go do it.
3432: F1CF     CD61EC     	CALL	GETBLOCK;get next block number within fcb to use.
3433: F1D2     32CEF5     	STA	RELBLOCK;and save.
3434: F1D5     010000     	LXI	B,0	;start looking for space from the start
3435: F1D8     B7         	ORA	A	;if none allocated as yet.
3436: F1D9     CAE3F1     	JZ	WTSEQ2          
3437: F1DC     4F         	MOV	C,A	;extract previous block number from fcb
3438: F1DD     0B         	DCX	B	;so we can be closest to it.
3439: F1DE     CD81EC     	CALL	EXTBLK        
3440: F1E1     44         	MOV	B,H            
3441: F1E2     4D         	MOV	C,L            
3442: F1E3                WTSEQ2:             
3443: F1E3     CD66EF     	CALL	FNDSPACE;find the next empty block nearest number (BC).
3444: F1E6     7D         	MOV	A,L	;check for a zero number.
3445: F1E7     B4         	ORA	H              
3446: F1E8     C2F0F1     	JNZ	WTSEQ3         
3447: F1EB     3E02       	MVI	A,2	;no more space?
3448: F1ED     C35CEB     	JMP	SetStatusBDOS  
3449: F1F0                WTSEQ3:             
3450: F1F0     22DCF5     	SHLD	BLKNMBR	;save block number to access.
3451: F1F3     EB         	XCHG		;put block number into (DE).
3452: F1F4     2A3CE8     	LHLD	ParamsDE	;now we must update the fcb for this
3453: F1F7     011000     	LXI	B,16	;newly allocated block.
3454: F1FA     09         	DAD	B              
3455: F1FB     3AD4F5     	LDA	SmallDisk	;8 or 16 bit block numbers?
3456: F1FE     B7         	ORA	A              
3457: F1FF     3ACEF5     	LDA	RELBLOCK	;(* update this entry *)
3458: F202     CA0CF2     	JZ	WTSEQ4	;zero means 16 bit ones.
3459: F205     CD6DED     	CALL	ADDA2HL	;(HL)=(HL)+(A)
3460: F208     73         	MOV	M,E	;store new block number.
3461: F209     C314F2     	JMP	WTSEQ5         
3462: F20C                WTSEQ4:             
3463: F20C     4F         	MOV	C,A	;compute spot in this 16 bit table.
3464: F20D     0600       	MVI	B,0            
3465: F20F     09         	DAD	B              
3466: F210     09         	DAD	B              
3467: F211     73         	MOV	M,E	;stuff block number (DE) there.
3468: F212     23         	INX	H              
3469: F213     72         	MOV	M,D            
3470: F214                WTSEQ5:             
3471: F214     0E02       	MVI	C,2	;set (C) to indicate writing to un-used disk space.
3472: F216                WTSEQ6:             
3473: F216     3A3FE8     	LDA	StatusBDOSReturn	;are we ok so far?
3474: F219     B7         	ORA	A              
3475: F21A     C0         	RNZ                
3476: F21B     C5         	PUSH	B	;yes, save write flag for bios (register C).
3477: F21C     CDADEC     	CALL	LOGICAL	;convert (BLKNMBR) over to loical sectors.
3478: F21F     3ACDF5     	LDA	MODE	;get access mode flag (1=sequential,
3479: F222     3D         	DCR	A	;0=random, 2=special?).
3480: F223     3D         	DCR	A              
3481: F224     C263F2     	JNZ	WTSEQ9         
3482: F227                ;                   
3483: F227                ;   Special random i/o from function #40. Maybe for M/PM, but the
3484: F227                ; current block, if it has not been written to, will be zeroed
3485: F227                ; out and then written (reason?).
3486: F227                ;                   
3487: F227     C1         	POP	B              
3488: F228     C5         	PUSH	B             
3489: F229     79         	MOV	A,C	;get write status flag (2=writing unused space).
3490: F22A     3D         	DCR	A              
3491: F22B     3D         	DCR	A              
3492: F22C     C263F2     	JNZ	WTSEQ9         
3493: F22F     E5         	PUSH	H             
3494: F230     2AB1F5     	LHLD	DirBuffAddr	;zero out the directory buffer.
3495: F233     57         	MOV	D,A	;note that (A) is zero here.
3496: F234                WTSEQ7:             
3497: F234     77         	MOV	M,A            
3498: F235     23         	INX	H              
3499: F236     14         	INR	D	;do 128 bytes.
3500: F237     F234F2     	JP	WTSEQ7          
3501: F23A     CDE9ED     	CALL	SetDirDMA	;tell the bios the dma address for directory access.
3502: F23D     2ADEF5     	LHLD	LOGSECT	;get sector that starts current block.
3503: F240     0E02       	MVI	C,2	;set 'writing to unused space' flag.
3504: F242                WTSEQ8:             
3505: F242     22DCF5     	SHLD	BLKNMBR	;save sector to write.
3506: F245     C5         	PUSH	B             
3507: F246     CDF4EB     	CALL	TRKSEC1	;determine its track and sector numbers.
3508: F249     C1         	POP	B              
3509: F24A     CDDBEB     	CALL	DOWRITE	;now write out 128 bytes of zeros.
3510: F24D     2ADCF5     	LHLD	BLKNMBR	;get sector number.
3511: F250     0E00       	MVI	C,0	;set normal write flag.
3512: F252     3ABCF5     	LDA	BLKMASK	;determine if we have written the entire
3513: F255     47         	MOV	B,A	;physical block.
3514: F256     A5         	ANA	L              
3515: F257     B8         	CMP	B              
3516: F258     23         	INX	H	;prepare for the next one.
3517: F259     C242F2     	JNZ	WTSEQ8	;continue until (BLKMASK+1) sectors written.
3518: F25C     E1         	POP	H	;reset next sector number.
3519: F25D     22DCF5     	SHLD	BLKNMBR       
3520: F260     CDE3ED     	CALL	Set2UsersDMA	;and reset dma address.
3521: F263                ;                   
3522: F263                ;   Normal disk write. Set the desired track and sector then
3523: F263                ; do the actual write.
3524: F263                ;                   
3525: F263                WTSEQ9:             
3526: F263     CDF4EB     	CALL	TRKSEC1	;determine track and sector for this write.
3527: F266     C1         	POP	B	;get write status flag.
3528: F267     C5         	PUSH	B             
3529: F268     CDDBEB     	CALL	DOWRITE	;and write this out.
3530: F26B     C1         	POP	B              
3531: F26C     3ADAF5     	LDA	SAVNREC	;get number of records in file.
3532: F26F     21D8F5     	LXI	H,SAVNXT;get last record written.
3533: F272     BE         	CMP	M              
3534: F273     DA7AF2     	JC	WTSEQ10         
3535: F276     77         	MOV	M,A	;we have to update record count.
3536: F277     34         	INR	M              
3537: F278     0E02       	MVI	C,2            
3538: F27A                ;                   
3539: F27A                ;*   This area has been patched to correct disk update problem
3540: F27A                ;* when using blocking and de-blocking in the BIOS.
3541: F27A                ;                   
3542: F27A                WTSEQ10:            
3543: F27A     00         	NOP		;was 'dcr c'  
3544: F27B     00         	NOP		;was 'dcr c'  
3545: F27C     210000     	LXI	H,0	;was 'jnz wtseq99'
3546: F27F                ;                   
3547: F27F                ; *   End of patch. 
3548: F27F                ;                   
3549: F27F     F5         	PUSH	PSW           
3550: F280     CD72ED     	CALL	GETS2	;set 'extent written to' flag.
3551: F283     E67F       	ANI	7FH	;(* clear bit 7 *)
3552: F285     77         	MOV	M,A            
3553: F286     F1         	POP	PSW	;get record count for this extent.
3554: F287                WTSEQ99:            
3555: F287     FE7F       	CPI	127	;is it full?
3556: F289     C2A8F2     	JNZ	WTSEQ12        
3557: F28C     3ACDF5     	LDA	MODE	;yes, are we in sequential mode?
3558: F28F     FE01       	CPI	1              
3559: F291     C2A8F2     	JNZ	WTSEQ12        
3560: F294     CDF5EC     	CALL	SETNREC	;yes, set next record number.
3561: F297     CD02F1     	CALL	GETNEXT	;and get next empty space in directory.
3562: F29A     213FE8     	LXI	H,StatusBDOSReturn;ok?
3563: F29D     7E         	MOV	A,M            
3564: F29E     B7         	ORA	A              
3565: F29F     C2A6F2     	JNZ	WTSEQ11        
3566: F2A2     3D         	DCR	A	;yes, set record count to -1.
3567: F2A3     32DAF5     	STA	SAVNREC        
3568: F2A6                WTSEQ11:            
3569: F2A6     3600       	MVI	M,0	;clear status.
3570: F2A8                WTSEQ12:            
3571: F2A8     C3F5EC     	JMP	SETNREC	;set next record to access.
3572: F2AB                ;                   
3573: F2AB                ;   For random i/o, set the fcb for the desired record number
3574: F2AB                ; based on the 'r0,r1,r2' bytes. These bytes in the fcb are
3575: F2AB                ; used as follows:  
3576: F2AB                ;                   
3577: F2AB                ;       fcb+35            fcb+34            fcb+33
3578: F2AB                ;  |     'r-2'      |      'r-1'      |      'r-0'     |
3579: F2AB                ;  |7             0 | 7             0 | 7             0|
3580: F2AB                ;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
3581: F2AB                ;  |    overflow   | | extra |  extent   |   record #  |
3582: F2AB                ;  | ______________| |_extent|__number___|_____________|
3583: F2AB                ;                     also 's2'
3584: F2AB                ;                   
3585: F2AB                ;   On entry, register (C) contains 0ffh if this is a read
3586: F2AB                ; and thus we can not access unwritten disk space. Otherwise,
3587: F2AB                ; another extent will be opened (for writing) if required.
3588: F2AB                ;                   
3589: F2AB                POSITION:           
3590: F2AB     AF         	XRA	A	;set random i/o flag.
3591: F2AC     32CDF5     	STA	MODE           
3592: F2AF                ;                   
3593: F2AF                ;   Special entry (function #40). M/PM ?
3594: F2AF                ;                   
3595: F2AF                POSITN1:            
3596: F2AF     C5         	PUSH	B	;save read/write flag.
3597: F2B0     2A3CE8     	LHLD	ParamsDE	;get address of fcb.
3598: F2B3     EB         	XCHG               
3599: F2B4     212100     	LXI	H,33	;now get byte 'r0'.
3600: F2B7     19         	DAD	D              
3601: F2B8     7E         	MOV	A,M            
3602: F2B9     E67F       	ANI	7FH	;keep bits 0-6 for the record number to access.
3603: F2BB     F5         	PUSH	PSW           
3604: F2BC     7E         	MOV	A,M	;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
3605: F2BD     17         	RAL                
3606: F2BE     23         	INX	H              
3607: F2BF     7E         	MOV	A,M            
3608: F2C0     17         	RAL                
3609: F2C1     E61F       	ANI	1FH	;and save this in bits 0-4 of (C).
3610: F2C3     4F         	MOV	C,A	;this is the extent byte.
3611: F2C4     7E         	MOV	A,M	;now get the extra extent byte.
3612: F2C5     1F         	RAR                
3613: F2C6     1F         	RAR                
3614: F2C7     1F         	RAR                
3615: F2C8     1F         	RAR                
3616: F2C9     E60F       	ANI	0FH            
3617: F2CB     47         	MOV	B,A	;and save it in (B).
3618: F2CC     F1         	POP	PSW	;get record number back to (A).
3619: F2CD     23         	INX	H	;check overflow byte 'r2'.
3620: F2CE     6E         	MOV	L,M            
3621: F2CF     2C         	INR	L              
3622: F2D0     2D         	DCR	L              
3623: F2D1     2E06       	MVI	L,6	;prepare for error.
3624: F2D3     C233F3     	JNZ	POSITN5	;out of disk space error.
3625: F2D6     212000     	LXI	H,32	;store record number into fcb.
3626: F2D9     19         	DAD	D              
3627: F2DA     77         	MOV	M,A            
3628: F2DB     210C00     	LXI	H,12	;and now check the extent byte.
3629: F2DE     19         	DAD	D              
3630: F2DF     79         	MOV	A,C            
3631: F2E0     96         	SUB	M	;same extent as before?
3632: F2E1     C2EFF2     	JNZ	POSITN2        
3633: F2E4     210E00     	LXI	H,14	;yes, check extra extent byte 's2' also.
3634: F2E7     19         	DAD	D              
3635: F2E8     78         	MOV	A,B            
3636: F2E9     96         	SUB	M              
3637: F2EA     E67F       	ANI	7FH            
3638: F2EC     CA27F3     	JZ	POSITN3;same, we are almost done then.
3639: F2EF                ;                   
3640: F2EF                ;  Get here when another extent is required.
3641: F2EF                ;                   
3642: F2EF                POSITN2:            
3643: F2EF     C5         	PUSH	B             
3644: F2F0     D5         	PUSH	D             
3645: F2F1     CD4AF0     	CALL	CLOSEIT	;close current extent.
3646: F2F4     D1         	POP	D              
3647: F2F5     C1         	POP	B              
3648: F2F6     2E03       	MVI	L,3	;prepare for error.
3649: F2F8     3A3FE8     	LDA	StatusBDOSReturn
3650: F2FB     3C         	INR	A              
3651: F2FC     CA2CF3     	JZ	POSITN4	;close error.
3652: F2FF     210C00     	LXI	H,12	;put desired extent into fcb now.
3653: F302     19         	DAD	D              
3654: F303     71         	MOV	M,C            
3655: F304     210E00     	LXI	H,14	;and store extra extent byte 's2'.
3656: F307     19         	DAD	D              
3657: F308     70         	MOV	M,B            
3658: F309     CDF9EF     	CALL	OPENIT	;try and get this extent.
3659: F30C     3A3FE8     	LDA	StatusBDOSReturn	;was it there?
3660: F30F     3C         	INR	A              
3661: F310     C227F3     	JNZ	POSITN3        
3662: F313     C1         	POP	B	;no. can we create a new one (writing?).
3663: F314     C5         	PUSH	B             
3664: F315     2E04       	MVI	L,4	;prepare for error.
3665: F317     0C         	INR	C              
3666: F318     CA2CF3     	JZ	POSITN4	;nope, reading unwritten space error.
3667: F31B     CDCCF0     	CALL	GETEMPTY;yes we can, try to find space.
3668: F31E     2E05       	MVI	L,5	;prepare for error.
3669: F320     3A3FE8     	LDA	StatusBDOSReturn
3670: F323     3C         	INR	A              
3671: F324     CA2CF3     	JZ	POSITN4	;out of space?
3672: F327                ;                   
3673: F327                ;   Normal return location. Clear error code and return.
3674: F327                ;                   
3675: F327                POSITN3:            
3676: F327     C1         	POP	B	;restore stack.
3677: F328     AF         	XRA	A	;and clear error code byte.
3678: F329     C35CEB     	JMP	SetStatusBDOS  
3679: F32C                ;                   
3680: F32C                ;   Error. Set the 's2' byte to indicate this (why?).
3681: F32C                ;                   
3682: F32C                POSITN4:            
3683: F32C     E5         	PUSH	H             
3684: F32D     CD72ED     	CALL	GETS2         
3685: F330     36C0       	MVI	M,0C0H         
3686: F332     E1         	POP	H              
3687: F333                ;                   
3688: F333                ;   Return with error code (presently in L).
3689: F333                ;                   
3690: F333                POSITN5:            
3691: F333     C1         	POP	B              
3692: F334     7D         	MOV	A,L	;get error code.
3693: F335     323FE8     	STA	StatusBDOSReturn
3694: F338     C381ED     	JMP	SETS2B7        
3695: F33B                ;                   
3696: F33B                ;   Read a random record.
3697: F33B                ;                   
3698: F33B                READRAN:            
3699: F33B     0EFF       	MVI	C,0FFH	;set 'read' status.
3700: F33D     CDABF2     	CALL	POSITION;position the file to proper record.
3701: F340     CC69F1     	CZ	RDSEQ1	;and read it as usual (if no errors).
3702: F343     C9         	RET                
3703: F344                ;                   
3704: F344                ;   Write to a random record.
3705: F344                ;                   
3706: F344                WRITERAN:           
3707: F344     0E00       	MVI	C,0	;set 'writing' flag.
3708: F346     CDABF2     	CALL	POSITION;position the file to proper record.
3709: F349     CCABF1     	CZ	WTSEQ1	;and write as usual (if no errors).
3710: F34C     C9         	RET                
3711: F34D                ;                   
3712: F34D                ;   Compute the random record number. Enter with (HL) pointing
3713: F34D                ; to a fcb an (DE) contains a relative location of a record
3714: F34D                ; number. On exit, (C) contains the 'r0' byte, (B) the 'r1'
3715: F34D                ; byte, and (A) the 'r2' byte.
3716: F34D                ;                   
3717: F34D                ;   On return, the zero flag is set if the record is within
3718: F34D                ; bounds. Otherwise, an overflow occured.
3719: F34D                ;                   
3720: F34D                COMPRAND:           
3721: F34D     EB         	XCHG		;save fcb pointer in (DE).
3722: F34E     19         	DAD	D	;compute relative position of record #.
3723: F34F     4E         	MOV	C,M	;get record number into (BC).
3724: F350     0600       	MVI	B,0            
3725: F352     210C00     	LXI	H,12	;now get extent.
3726: F355     19         	DAD	D              
3727: F356     7E         	MOV	A,M	;compute (BC)=(record #)+(extent)*128.
3728: F357     0F         	RRC		;move lower bit into bit 7.
3729: F358     E680       	ANI	80H	;and ignore all other bits.
3730: F35A     81         	ADD	C	;add to our record number.
3731: F35B     4F         	MOV	C,A            
3732: F35C     3E00       	MVI	A,0	;take care of any carry.
3733: F35E     88         	ADC	B              
3734: F35F     47         	MOV	B,A            
3735: F360     7E         	MOV	A,M	;now get the upper bits of extent into
3736: F361     0F         	RRC		;bit positions 0-3.
3737: F362     E60F       	ANI	0FH	;and ignore all others.
3738: F364     80         	ADD	B	;add this in to 'r1' byte.
3739: F365     47         	MOV	B,A            
3740: F366     210E00     	LXI	H,14	;get the 's2' byte (extra extent).
3741: F369     19         	DAD	D              
3742: F36A     7E         	MOV	A,M            
3743: F36B     87         	ADD	A	;and shift it left 4 bits (bits 4-7).
3744: F36C     87         	ADD	A              
3745: F36D     87         	ADD	A              
3746: F36E     87         	ADD	A              
3747: F36F     F5         	PUSH	PSW	;save carry flag (bit 0 of flag byte).
3748: F370     80         	ADD	B	;now add extra extent into 'r1'.
3749: F371     47         	MOV	B,A            
3750: F372     F5         	PUSH	PSW	;and save carry (overflow byte 'r2').
3751: F373     E1         	POP	H	;bit 0 of (L) is the overflow indicator.
3752: F374     7D         	MOV	A,L            
3753: F375     E1         	POP	H	;and same for first carry flag.
3754: F376     B5         	ORA	L	;either one of these set?
3755: F377     E601       	ANI	01H	;only check the carry flags.
3756: F379     C9         	RET                
3757: F37A                ;                   
3758: F37A                ;   Routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
3759: F37A                ; reflect the last record used for a random (or other) file.
3760: F37A                ; This reads the directory and looks at all extents computing
3761: F37A                ; the largerst record number for each and keeping the maximum
3762: F37A                ; value only. Then 'r0', 'r1', and 'r2' will reflect this
3763: F37A                ; maximum record number. This is used to compute the space used
3764: F37A                ; by a random file. 
3765: F37A                ;                   
3766: F37A                RANSIZE:            
3767: F37A     0E0C       	MVI	C,12	;look thru directory for first entry with
3768: F37C     CDBDEE     	CALL	FindFirst	;this name.
3769: F37F     2A3CE8     	LHLD	ParamsDE	;zero out the 'r0, r1, r2' bytes.
3770: F382     112100     	LXI	D,33           
3771: F385     19         	DAD	D              
3772: F386     E5         	PUSH	H             
3773: F387     72         	MOV	M,D	;note that (D)=0.
3774: F388     23         	INX	H              
3775: F389     72         	MOV	M,D            
3776: F38A     23         	INX	H              
3777: F38B     72         	MOV	M,D            
3778: F38C                RANSIZ1:            
3779: F38C     CDFEED     	CALL	CheckFilePosition;is there an extent to process?
3780: F38F     CAB4F3     	JZ	RANSIZ3	;no, we are done.
3781: F392     CD67ED     	CALL	FCB2HL	;set (HL) pointing to proper fcb in dir.
3782: F395     110F00     	LXI	D,15	;point to last record in extent.
3783: F398     CD4DF3     	CALL	COMPRAND;and compute random parameters.
3784: F39B     E1         	POP	H              
3785: F39C     E5         	PUSH	H	;now check these values against those
3786: F39D     5F         	MOV	E,A	;already in fcb.
3787: F39E     79         	MOV	A,C	;the carry flag will be set if those
3788: F39F     96         	SUB	M	;in the fcb represent a larger size than
3789: F3A0     23         	INX	H	;this extent does.
3790: F3A1     78         	MOV	A,B            
3791: F3A2     9E         	SBB	M              
3792: F3A3     23         	INX	H              
3793: F3A4     7B         	MOV	A,E            
3794: F3A5     9E         	SBB	M              
3795: F3A6     DAAEF3     	JC	RANSIZ2         
3796: F3A9     73         	MOV	M,E	;we found a larger (in size) extent.
3797: F3AA     2B         	DCX	H	;stuff these values into fcb.
3798: F3AB     70         	MOV	M,B            
3799: F3AC     2B         	DCX	H              
3800: F3AD     71         	MOV	M,C            
3801: F3AE                RANSIZ2:            
3802: F3AE     CDD2EE     	CALL	FINDNXT	;now get the next extent.
3803: F3B1     C38CF3     	JMP	RANSIZ1	;continue til all done.
3804: F3B4                RANSIZ3:            
3805: F3B4     E1         	POP	H	;we are done, restore the stack and
3806: F3B5     C9         	RET		;return.      
3807: F3B6                ;                   
3808: F3B6                ;   Function to return the random record position of a given
3809: F3B6                ; file which has been read in sequential mode up to now.
3810: F3B6                ;                   
3811: F3B6                fcSetRecordNumber:  
3812: F3B6     2A3CE8     	LHLD	ParamsDE	;point to fcb.
3813: F3B9     112000     	LXI	D,32	;and to last used record.
3814: F3BC     CD4DF3     	CALL	COMPRAND;compute random position.
3815: F3BF     212100     	LXI	H,33	;now stuff these values into fcb.
3816: F3C2     19         	DAD	D              
3817: F3C3     71         	MOV	M,C	;move 'r0'.
3818: F3C4     23         	INX	H              
3819: F3C5     70         	MOV	M,B	;and 'r1'. 
3820: F3C6     23         	INX	H              
3821: F3C7     77         	MOV	M,A	;and lastly 'r2'.
3822: F3C8     C9         	RET                
3823: F3C9                ;                   
3824: F3C9                ; This routine selects the drive specified in (CurrentDrive) and
3825: F3C9                ; updates the login vector and bitmap table if this drive was
3826: F3C9                ; not already active.
3827: F3C9                ;                   
3828: F3C9                LoginDrive:         
3829: F3C9     3AA2F5     	LDA		CurrentDrive		; get the Current Drive.
3830: F3CC     4F         	MOV		C,A					; Save current drive for later
3831: F3CD     2AA7F5     	LHLD	LoggedBitMap		; point at the "logged In" Bitmap.
3832: F3D0     CD0DED     	CALL	HLrightC			; Return with CurrentDrive's bit in L's lsb (byte 0)
3833: F3D3     E5         	PUSH	H					; Save it, so we will know if it is already active
3834: F3D4     EB         	XCHG               
3835: F3D5     CD7CEB     	CALL	SelectDisk			; select this drive to set up Disk Parameter Block.
3836: F3D8     CA6AEB     	JZ		SLCTERR				; If not valid then error exit outta here
3837: F3DB     E1         	POP	H						; retreive original state of the drive
3838: F3DC     7D         	MOV	A,L						; and put it into (A) 
3839: F3DD     1F         	RAR							; move bit 0 into the carry flag if it is set		
3840: F3DE     D8         	RC							; then return, because this drive has already been activated
3841: F3DF                				;Else  update the logged Bitmap to reflect this drive.
3842: F3DF     2AA7F5     	LHLD	LoggedBitMap		
3843: F3E2     4D         	MOV		C,L           
3844: F3E3     44         	MOV		B,H					; put the map into (BC)
3845: F3E4     CD4BF4     	CALL	SetBit				; Set it in the LoggedBitMap
3846: F3E7     22A7F5     	SHLD	LoggedBitMap		; and save the Bit map.
3847: F3EA                ;	JMP	BITMAP	;now update the bitmap.
3848: F3EA                ;-----------------------------------------------------------
3849: F3EA                ;                   
3850: F3EA                ;   Construct the FAT for the active
3851: F3EA                ; drive. If a file name starts with '$' and it is under the
3852: F3EA                ; current user number, then (StatusBDOSReturn) is set to minus 1. Otherwise
3853: F3EA                ; it is not set at all.
3854: F3EA                ;                   
3855: F3EA                BITMAP:             
3856: F3EA                								; compute size of allocation table. 1 bit for block,
3857: F3EA                								; 1 byte for 8 blocks, so size of FAT is:
3858: F3EA                								; DiskSize/8.
3859: F3EA     2ABEF5     	LHLD		DiskSize		; get maximum  Allocation Block number
3860: F3ED     0E03       	MVI			C,3				; 2 raised to 3rd power = 8
3861: F3EF     CD0DED     	CALL		HLrightC		;(HL)=(HL)/8.
3862: F3F2     23         	INX			H				;at lease 1 byte.
3863: F3F3     44         	MOV			B,H          
3864: F3F4     4D         	MOV			C,L				;set (BC) to the allocation table length.
3865: F3F5                ;                   
3866: F3F5                ;   Initialize the bitmap for this drive. Right now, the first
3867: F3F5                ; two bytes are specified by the disk parameter block. However
3868: F3F5                ; a patch could be entered here if it were necessary to setup
3869: F3F5                ; this table in a special mannor. For example, the bios could
3870: F3F5                ; determine locations of 'bad blocks' and set them as already
3871: F3F5                ; 'used' in the map.
3872: F3F5                ;                   
3873: F3F5     2AB7F5     	LHLD		FATpointer			;now zero out the File Allocation Table
3874: F3F8                BITMAP1:            
3875: F3F8     3600       	MVI			M,0					; put zero in vector
3876: F3FA     23         	INX			H					; point at next location
3877: F3FB     0B         	DCX			B					; count down
3878: F3FC     78         	MOV			A,B          
3879: F3FD     B1         	ORA			C					; equals zero if both (B) and (B) are Zero
3880: F3FE     C2F8F3     	JNZ			BITMAP1				; loop for more
3881: F401                					; allocation vector is now cleared
3882: F401     2AC2F5     	LHLD		DirectoryFAT0		; Point at initial space used by directory.
3883: F404     EB         	XCHG							; pre allocate the space, first 2 bits (0C000H)
3884: F405     2AB7F5     	LHLD		FATpointer			; and put this into map.
3885: F408     73         	MOV			M,E          
3886: F409     23         	INX			H            
3887: F40A     72         	MOV			M,D          
3888: F40B                ;                   
3889: F40B                ;   End of initialization portion.
3890: F40B                ;                   
3891: F40B     CDC4EB     	CALL		HomeDrive			; now home the drive, H=0,T=0,S=0
3892: F40E     2AABF5     	LHLD		FilePosInDirSegment
3893: F411     3603       	MVI			M,3					; force next directory request to read
3894: F413     23         	INX			H					; in a sector.
3895: F414     3600       	MVI			M,0          
3896: F416                	                   
3897: F416     CD07EE     	CALL		InitializeFilePosition	;clear initial file position also.
3898: F419                BITMAP2:            
3899: F419     0EFF       	MVI		C,0FFH				; Read next file name in directory
3900: F41B     CD0EEE     	CALL	GetNextEntry		; And set checksum byte.
3901: F41E                	                   
3902: F41E     CDFEED     	CALL	CheckFilePosition	; Is there another file?
3903: F421     C8         	RZ						; NO - return
3904: F422                	                   
3905: F422     CD67ED     	CALL	FCB2HL				; YES, get its address.
3906: F425     3EE5       	MVI		A,EmptyFileFlag
3907: F427     BE         	CMP		M					; Is it an empty file entry?
3908: F428     CA19F4     	JZ		BITMAP2				; YES - Go back for next entry
3909: F42B                	                   
3910: F42B     3AA1F5     	LDA		CurrentUser			; NO, Do we have the correct user number?
3911: F42E     BE         	CMP		M             
3912: F42F     C23DF4     	JNZ		BITMAP3				; NO -			
3913: F432     23         	INX		H					; YES -skip to first character in file name
3914: F433     7E         	MOV		A,M					; Does name start with a '$'?
3915: F434     D624       	SUI		DOLLAR				; Clear acc(if =) and test for equality at the same time
3916: F436     C23DF4     	JNZ		BITMAP3       
3917: F439     3D         	DCR		A					; Yes, set atatus to minus one.
3918: F43A     323FE8     	STA		StatusBDOSReturn	; set return status
3919: F43D                BITMAP3:            
3920: F43D                ;	MVI		C,1					;now set this file's space as used in bit map.
3921: F43D     3E01       	MVI		A,01H				; want to set the bit
3922: F43F     32A3F5     	STA		BitSetFlag			; Flag = 01, set the bit
3923: F442     CD71EE     	CALL	SetClearFATbits
3924: F445     CD95ED     	CALL	CHKNMBR				;keep (FilePosInDirSegment) in bounds.
3925: F448     C319F4     	JMP	BITMAP2        
3926: F44B                ;-----------------------------------------------------------
3927: F44B                ;                   
3928: F44B                ;  Routine to set a bit in a 16 bit value contained in (BC).
3929: F44B                ; The bit set depends on the current drive selection.
3930: F44B                ;                   
3931: F44B                SetBit:             
3932: F44B     3AA2F5     	LDA		CurrentDrive		; get active drive, a = 00, b = 02, c= 02, d = 03
3933: F44E     210100     	LXI		H,1					; Need a bit to move
3934: F451     3C         	INR		A					; Ensure at lest 1 test
3935: F452                SetBit1:            
3936: F452     3D         	DCR		A             
3937: F453     CA5AF4     	JZ		SetBit2				; a = 01, b = 02, c= 04, d = 08
3938: F456     29         	DAD		H             
3939: F457     C352F4     	JMP		SetBit1       
3940: F45A                SetBit2:	           
3941: F45A     79         	MOV		A,C					; or result with BC
3942: F45B     B5         	ORA		L             
3943: F45C     6F         	MOV		L,A					;low byte done, do high byte.
3944: F45D     78         	MOV		A,B           
3945: F45E     B4         	ORA		H             
3946: F45F     67         	MOV		H,A           
3947: F460     C9         	RET							; HL has the result
3948: F461                                    
3949: F461                ;                   
3950: F461                ;   Function to set the active disk number.
3951: F461                ;                   
3952: F461                fcSelectDisk:       
3953: F461     3A3EE8     	LDA	ParamE				;get parameter passed and see if this
3954: F464     21A2F5     	LXI	H,CurrentDrive		;represents a change in drives.
3955: F467     BE         	CMP	M              
3956: F468     C8         	RZ						; return the drive is already selected
3957: F469     77         	MOV	M,A					; It is a change in drives, so log it in.
3958: F46A     C3C9F3     	JMP	LoginDrive     
3959: F46D                ;                   
3960: F46D                ;   This is the 'auto disk select' routine. The firsst byte
3961: F46D                ; of the fcb is examined for a drive specification. If non
3962: F46D                ; zero then the drive will be selected and loged in.
3963: F46D                ;                   
3964: F46D                AUTOSEL:            
3965: F46D     3EFF       	MVI		A,0FFH			;say 'auto-select activated'.
3966: F46F     32D5F5     	STA		AutoSelectActive
3967: F472     2A3CE8     	LHLD	ParamsDE		;get drive specified.
3968: F475     7E         	MOV		A,M           
3969: F476     E61F       	ANI		1FH				;look at lower 5 bits.
3970: F478     3D         	DCR		A				;adjust for (1=A, 2=B) etc.
3971: F479     323EE8     	STA		ParamE			;and save for the select routine.
3972: F47C     FE1E       	CPI		1EH				;check for 'no change' condition.
3973: F47E     D291F4     	JNC		AUTOSL1			;yes, don't change.
3974: F481     3AA2F5     	LDA		CurrentDrive	;we must change, save currently active
3975: F484     32D6F5     	STA		OLDDRV			;drive.
3976: F487     7E         	MOV		A,M				;and save first byte of fcb also.
3977: F488     32D7F5     	STA		AutoSelectFlag	;this must be non-zero.
3978: F48B     E6E0       	ANI		0E0H			;whats this for (bits 6,7 are used for
3979: F48D     77         	MOV		M,A				;something)?
3980: F48E     CD61F4     	CALL	fcSelectDisk			;select and log in this drive.
3981: F491                AUTOSL1:            
3982: F491     3AA1F5     	LDA		CurrentUser		;move user number into fcb.
3983: F494     2A3CE8     	LHLD	ParamsDE		;(* upper half of first byte *)
3984: F497     B6         	ORA		M             
3985: F498     77         	MOV		M,A           
3986: F499     C9         	RET		;and return (all done).
3987: F49A                ;                   
3988: F49A                ;   Function to return the current cp/m version number.
3989: F49A                ;                   
3990: F49A                fcGetVersion:       
3991: F49A     3E22       	MVI	A,022h	;version 2.2
3992: F49C     C35CEB     	JMP	SetStatusBDOS  
3993: F49F                ;                   
3994: F49F                ;   Function (0D) to reset the disk system.
3995: F49F                ;                   
3996: F49F                fcResetDiskSystem:  
3997: F49F     210000     	LXI		H,0				; clear write protect status and log
3998: F4A2     22A5F5     	SHLD	ROBitMap		; clear all Read Only Bits
3999: F4A5     22A7F5     	SHLD	LoggedBitMap	; clear all logged in drives
4000: F4A8     AF         	XRA		A             
4001: F4A9     32A2F5     	STA		CurrentDrive	;select drive 'A'.
4002: F4AC     218000     	LXI		H,Pg0Buffer		;setup default dma address.
4003: F4AF     22A9F5     	SHLD	UsersDMA      
4004: F4B2     CDE3ED     	CALL	Set2UsersDMA	; Call BIOS to set DMA
4005: F4B5     C3C9F3     	JMP		LoginDrive		;now log in drive 'A'.
4006: F4B8                ;                   
4007: F4B8                ;   Function to open a specified file.
4008: F4B8                ;                   
4009: F4B8                fcOpenFile:         
4010: F4B8     CD7BED     	CALL	CLEARS2	;clear 's2' byte.
4011: F4BB     CD6DF4     	CALL	AUTOSEL	;select proper disk.
4012: F4BE     C3F9EF     	JMP	OPENIT	;and open the file.
4013: F4C1                ;                   
4014: F4C1                ;   Function to close a specified file.
4015: F4C1                ;                   
4016: F4C1                fcCloseFile:        
4017: F4C1     CD6DF4     	CALL	AUTOSEL	;select proper disk.
4018: F4C4     C34AF0     	JMP	CLOSEIT	;and close the file.
4019: F4C7                ;                   
4020: F4C7                ;   Function to return the first occurence of a specified file
4021: F4C7                ; name. If the first byte of the fcb is '?' then the name will
4022: F4C7                ; not be checked (get the first entry no matter what).
4023: F4C7                ;                   
4024: F4C7                fcSearchForFirst:   
4025: F4C7     0E00       	MVI	C,0	;prepare for special search.
4026: F4C9     EB         	XCHG               
4027: F4CA     7E         	MOV	A,M	;is first byte a '?'?
4028: F4CB     FE3F       	CPI	QMARK		;'?'    
4029: F4CD     CADEF4     	JZ	fcSearchForFirst1	;yes, just get very first entry (zero length match).
4030: F4D0     CDC9EC     	CALL	SETEXT	;get the extension byte from fcb.
4031: F4D3     7E         	MOV	A,M	;is it '?'? if yes, then we want
4032: F4D4     FE3F       	CPI	QMARK		; '?'	;an entry with a specific 's2' byte.
4033: F4D6     C47BED     	CNZ	CLEARS2	;otherwise, look for a zero 's2' byte.
4034: F4D9     CD6DF4     	CALL	AUTOSEL	;select proper drive.
4035: F4DC     0E0F       	MVI	C,15	;compare bytes 0-14 in fcb (12&13 excluded).
4036: F4DE                fcSearchForFirst1:  
4037: F4DE     CDBDEE     	CALL	FindFirst	;find an entry and then move it into
4038: F4E1     C3F2ED     	JMP	MOVEDIR	;the users dma space.
4039: F4E4                ;                   
4040: F4E4                ;   Function to return the next occurence of a file name.
4041: F4E4                ;                   
4042: F4E4                fcSearchForNext:    
4043: F4E4     2AD0F5     	LHLD	SaveFCB	;restore pointers. note that no
4044: F4E7     223CE8     	SHLD	ParamsDE	;other dbos calls are allowed.
4045: F4EA     CD6DF4     	CALL	AUTOSEL	;no error will be returned, but the
4046: F4ED     CDD2EE     	CALL	FINDNXT	;results will be wrong.
4047: F4F0     C3F2ED     	JMP	MOVEDIR        
4048: F4F3                ;                   
4049: F4F3                ;   Function to delete a file by name.
4050: F4F3                ;                   
4051: F4F3                fcDeleteFile:       
4052: F4F3     CD6DF4     	CALL	AUTOSEL		;select proper drive.
4053: F4F6     CD41EF     	CALL	ERAFILE		;erase the file.
4054: F4F9     C3A6EE     	JMP		STSTATUS	;set status and return.
4055: F4FC                ;                   
4056: F4FC                ;   Function to execute a sequential read of the specified
4057: F4FC                ; record number.    
4058: F4FC                ;                   
4059: F4FC                fcReadSequential:   
4060: F4FC     CD6DF4     	CALL	AUTOSEL	;select proper drive then read.
4061: F4FF     C364F1     	JMP	RDSEQ          
4062: F502                ;                   
4063: F502                ;   Function to write the net sequential record.
4064: F502                ;                   
4065: F502                fcWriteSequential:  
4066: F502     CD6DF4     	CALL	AUTOSEL	;select proper drive then write.
4067: F505     C3A6F1     	JMP	WTSEQ          
4068: F508                ;                   
4069: F508                ;   Create a file function.
4070: F508                ;                   
4071: F508                fcCreateFile:       
4072: F508     CD7BED     	CALL	CLEARS2	;clear the 's2' byte ( extents counter hi byte).
4073: F50B     CD6DF4     	CALL	AUTOSEL	;select proper drive and get the next
4074: F50E     C3CCF0     	JMP		GETEMPTY;empty directory space.
4075: F511                ;                   
4076: F511                ;   Function to rename a file.
4077: F511                ;                   
4078: F511                fcRenameFile:       
4079: F511     CD6DF4     	CALL	AUTOSEL	;select proper drive and then switch
4080: F514     CDBEEF     	CALL	CHGNAMES;file names.
4081: F517     C3A6EE     	JMP	STSTATUS       
4082: F51A                ;                   
4083: F51A                ;   Function to return the logged in Bit map.
4084: F51A                ;                   
4085: F51A                fcGetActiveDisks:   
4086: F51A     2AA7F5     	LHLD	LoggedBitMap  
4087: F51D     C345F5     	JMP	GETPRM1        
4088: F520                ;                   
4089: F520                ;   Function to return the current disk assignment.
4090: F520                ;                   
4091: F520                fcGetCurrentDisk:   
4092: F520     3AA2F5     	LDA	CurrentDrive   
4093: F523     C35CEB     	JMP	SetStatusBDOS  
4094: F526                ;                   
4095: F526                ;   Function to set the dma address.
4096: F526                ;                   
4097: F526                fcSetDMA:           
4098: F526     EB         	XCHG               
4099: F527     22A9F5     	SHLD	UsersDMA	;save in our space and then get to
4100: F52A     C3E3ED     	JMP	Set2UsersDMA	;the bios with this also.
4101: F52D                ;                   
4102: F52D                ;   Function to return the allocation vector.
4103: F52D                ;                   
4104: F52D                fcGetFATtable:      
4105: F52D     2AB7F5     	LHLD	FATpointer    
4106: F530     C345F5     	JMP	GETPRM1        
4107: F533                ;                   
4108: F533                ;   Function to return the read-only status vector.
4109: F533                ;                   
4110: F533                fcGetROdisks:       
4111: F533     2AA5F5     	LHLD	ROBitMap      
4112: F536     C345F5     	JMP	GETPRM1        
4113: F539                ;                   
4114: F539                ;   Function to set the file attributes (read-only, system).
4115: F539                ;                   
4116: F539                fcSetFileAttributes:
4117: F539     CD6DF4     	CALL	AUTOSEL	;select proper drive then save attributes.
4118: F53C     CDE3EF     	CALL	SAVEATTR      
4119: F53F     C3A6EE     	JMP	STSTATUS       
4120: F542                ;                   
4121: F542                ;   Function to return the address of the disk parameter block
4122: F542                ; for the current drive.
4123: F542                ;                   
4124: F542                fcGetDPB:           
4125: F542     2AB3F5     	LHLD	DiskParamBlock
4126: F545                GETPRM1:            
4127: F545     223FE8     	SHLD	StatusBDOSReturn
4128: F548     C9         	RET                
4129: F549                ;                   
4130: F549                ;   Function to get or set the user number. If (E) was (FF)
4131: F549                ; then this is a request to return the current user number.
4132: F549                ; Else set the user number from (E).
4133: F549                ;                   
4134: F549                fcGetUser:          
4135: F549     3A3EE8     	LDA			ParamE			; get controlling parameter.
4136: F54C     FEFF       	CPI			0FFH			; want to get user number?
4137: F54E     C257F5     	JNZ			SetUser			; No, then set it
4138: F551     3AA1F5     	LDA			CurrentUser		; yes, just return it in A
4139: F554     C35CEB     	JMP			SetStatusBDOS	; exit while setting return status
4140: F557                	                   
4141: F557                SetUser:            
4142: F557     E61F       	ANI			1FH				; no,just keep the low bits (000X XXXX)
4143: F559     32A1F5     	STA			CurrentUser		; and save in Current user
4144: F55C     C9         	RET                
4145: F55D                ;                   
4146: F55D                ;   Function to read a random record from a file.
4147: F55D                ;                   
4148: F55D                fcReadRandom:       
4149: F55D     CD6DF4     	CALL	AUTOSEL	;select proper drive and read.
4150: F560     C33BF3     	JMP	READRAN        
4151: F563                ;                   
4152: F563                ;   Function to compute the file size for random files.
4153: F563                ;                   
4154: F563                fcWriteRandom:      
4155: F563     CD6DF4     	CALL	AUTOSEL	;select proper drive and write.
4156: F566     C344F3     	JMP	WRITERAN       
4157: F569                ;                   
4158: F569                ;   Function to compute the size of a random file.
4159: F569                ;                   
4160: F569                fcGetFileSize:      
4161: F569     CD6DF4     	CALL	AUTOSEL	;select proper drive and check file length
4162: F56C     C37AF3     	JMP	RANSIZE        
4163: F56F                ;                   
4164: F56F                ;   Function #37. This allows a program to log off any drives.
4165: F56F                ; On entry, set (DE) to contain a word with bits set for those
4166: F56F                ; drives that are to be logged off. The log-in vector and the
4167: F56F                ; write protect vector will be updated. This must be a M/PM
4168: F56F                ; special function. 
4169: F56F                ;                   
4170: F56F                fcResetDrive:       
4171: F56F     2A3CE8     	LHLD	ParamsDE	;get drives to log off.
4172: F572     7D         	MOV	A,L	;for each bit that is set, we want
4173: F573     2F         	CMA		;to clear that bit in (LoggedBitMap)
4174: F574     5F         	MOV	E,A	;and (ROBitMap).
4175: F575     7C         	MOV	A,H            
4176: F576     2F         	CMA                
4177: F577     2AA7F5     	LHLD	LoggedBitMap	;reset the login Bit map.
4178: F57A     A4         	ANA	H              
4179: F57B     57         	MOV	D,A            
4180: F57C     7D         	MOV	A,L            
4181: F57D     A3         	ANA	E              
4182: F57E     5F         	MOV	E,A            
4183: F57F     2AA5F5     	LHLD	ROBitMap      
4184: F582     EB         	XCHG               
4185: F583     22A7F5     	SHLD	LoggedBitMap	;and save.
4186: F586     7D         	MOV	A,L	;now do the write protect vector.
4187: F587     A3         	ANA	E              
4188: F588     6F         	MOV	L,A            
4189: F589     7C         	MOV	A,H            
4190: F58A     A2         	ANA	D              
4191: F58B     67         	MOV	H,A            
4192: F58C     22A5F5     	SHLD	ROBitMap	;and save. all done.
4193: F58F     C9         	RET                
4194: F590                ;                   
4195: F590                ;   Get here to return to the user.
4196: F590                ;                   
4197: F590                                    
4198: F590                ;                   
4199: F590                ;   Function #40. This is a special entry to do random i/o.
4200: F590                ; For the case where we are writing to unused disk space, this
4201: F590                ; space will be zeroed out first. This must be a M/PM special
4202: F590                ; purpose function, because why would any normal program even
4203: F590                ; care about the previous contents of a sector about to be
4204: F590                ; written over.     
4205: F590                ;                   
4206: F590                fcWriteZeroFill:    
4207: F590     CD6DF4     	CALL	AUTOSEL	;select proper drive.
4208: F593     3E02       	MVI	A,2	;use special write mode.
4209: F595     32CDF5     	STA	MODE           
4210: F598     0E00       	MVI	C,0	;set write indicator.
4211: F59A     CDAFF2     	CALL	POSITN1	;position the file.
4212: F59D     CCABF1     	CZ	WTSEQ1	;and write (if no errors).
4213: F5A0     C9         	RET                
4214: F5A1                                    
4215: F5A1                ;**************************************************************
4216: F5A1                ;*                  
4217: F5A1                ;*     BDOS data storage pool.
4218: F5A1                ;*                  
4219: F5A1                ;**************************************************************
4220: F5A1                                    
4221: F5A1     00         CurrentUser:			DB	0		; current user number.
4222: F5A2     00         CurrentDrive:			DB	0		; currently active drive.
4223: F5A3     00         BitSetFlag:				DB	0		; flag to set(01) or reset(00) bit in disk allocation table
4224: F5A4                                    
4225: F5A4                ;                   
4226: F5A4     E5         EmptyDir:				DB	EmptyFileFlag	; empty directory segment indicator.
4227: F5A5     0000       ROBitMap:				DW	0		; write protect status for all 16 drives.
4228: F5A7     0000       LoggedBitMap:			DW	0		; drive active word (1 bit per drive).
4229: F5A9     8000       UsersDMA:				DW	080H	;user's dma address (defaults to 80h).
4230: F5AB                ;                   
4231: F5AB                ;   Scratch areas from parameter block.
4232: F5AB                ;                   
4233: F5AB     0000       FilePosInDirSegment:			DW	0	; relative position within dir segment for file (0-3).
4234: F5AD     0000       LastTrackNumber:		DW	0	; last selected track number.
4235: F5AF     0000       LastSectorNumber:		DW	0	; last selected sector number.
4236: F5B1                ;                   
4237: F5B1                ;   Disk storage areas from parameter block.
4238: F5B1                ;                   
4239: F5B1                DirBuffSize				EQU	128	; buffer size
4240: F5B1     0000       DirBuffAddr:			DW	0	;address of directory buffer to use.
4241: F5B3     0000       DiskParamBlock:			DW	0	;contains address of disk parameter block.
4242: F5B5     0000       CHKVECT:				DW	0	;address of check vector.
4243: F5B7     0000       FATpointer:			DW	0	;address of allocation vector (bit map).
4244: F5B9                ;                   
4245: F5B9                ;   Disk Parameter block returned from the bios.
4246: F5B9                ;                   
4247: F5B9                LogicalSecSize			EQU	128	; Logical sector size
4248: F5B9     0000       SECTORS:				DW	0	;sectors per track from bios.
4249: F5BB     00         BLKSHFT:				DB	0	;block shift.
4250: F5BC     00         BLKMASK:				DB	0	;block mask.
4251: F5BD     00         EXTMASK:				DB	0	;extent mask.
4252: F5BE     0000       DiskSize:				DW	0	;disk size from bios (number of blocks-1).
4253: F5C0     0000       DrectorySize:			DW	0	;directory size, number of entries.
4254: F5C2     0000       DirectoryFAT0:					DW	0	;storage for first bytes of bit map (dir space used).
4255: F5C4     0000       DirectoryFAT1:					DW	0
4256: F5C6     0000       OFFSET:					DW	0	;first usable track number.
4257: F5C8     0000       XLATE:					DW	0	;sector translation table address.
4258: F5CA                ;                   
4259: F5CA                ;                   
4260: F5CA     00         CLOSEFLG:				DB	0	;close flag (=0ffh is extent written ok).
4261: F5CB     00         RDWRTFLG:				DB	0	;read/write flag (0ffh=read, 0=write).
4262: F5CC     00         FNDSTAT:				DB	0	;filename found status (0=found first entry, -1 not found).
4263: F5CD     00         MODE:					DB	0	;I/o mode select (0=random, 1=sequential, 2=special random).
4264: F5CE     00         RELBLOCK:				DB	0	;relative position within fcb of block number written.
4265: F5CF     00         COUNTER:				DB	0	;byte counter for directory name searches.
4266: F5D0     00000000   SaveFCB:				DW	0,0	;save space for address of fcb (for directory searches).
4267: F5D4     00         SmallDisk:				DB	0	;if =0 then disk is > 256 blocks long.
4268: F5D5     00         AutoSelectActive:		DB	0	;if non-zero, then auto select activated.
4269: F5D6     00         OLDDRV:					DB	0	;on auto select, storage for previous drive.
4270: F5D7     00         AutoSelectFlag:			DB	0	;if non-zero, then auto select changed drives.
4271: F5D8     00         SAVNXT:					DB	0	;storage for next record number to access.
4272: F5D9     00         SAVEXT:					DB	0	;storage for extent number of file.
4273: F5DA     0000       SAVNREC:				DW	0	;storage for number of records in file.
4274: F5DC     0000       BLKNMBR:				DW	0	;block number (physical sector) used within a file or logical sector.
4275: F5DE     0000       LOGSECT:				DW	0	;starting logical (128 byte) sector of block (physical sector).
4276: F5E0     00         FCBPosition:			DB	0	;relative position within buffer for fcb of file of interest.
4277: F5E1     0000       FilePosInDirectory:			DW	0	;files position within directory (0 to max entries -1).
4278: F5E3                ;                   
4279: F5E3                ;   Disk directory buffer checksum bytes. One for each of the
4280: F5E3                ; 16 possible drives.
4281: F5E3                ;                   
4282: F5E3                CKSUMTBL:           
4283: F5E3     00000000000000000000000000000000 	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
4284: F5F3                ;                   
4285: F5F3                ;   Extra space ?   
4286: F5F3                ;                   
4287: F5F3     00000000   	DB	0,0,0,0         
4288: F5F7                ;                   
4289: F5F7                ;**************************************************************
4290: F5F7                ;*                  
4291: F5F7                ;*        B I O S   J U M P   T A B L E
4292: F5F7                ;*                  
4293: F5F7                ;**************************************************************
4294: F5F7                ;                   
4295: F5F7                BIOSEntry	Equ	0F600H		; start of bios
4296: F5F7                                    
4297: F5F7                biosBoot			EQU		BIOSEntry + 000H	
4298: F5F7                fcSystemReset		EQU		BIOSEntry + 003H
4299: F5F7                biosConsoleStatus	EQU		BIOSEntry + 006H
4300: F5F7                biosConsoleIn		EQU		BIOSEntry + 009H
4301: F5F7                biosConsoleOut		EQU		BIOSEntry + 00CH
4302: F5F7                fcListOut			EQU		BIOSEntry + 00FH
4303: F5F7                fcPunchOut			EQU		BIOSEntry + 012H
4304: F5F7                biosReaderIn		EQU		BIOSEntry + 015H
4305: F5F7                biosHomeDisk		EQU		BIOSEntry + 018H
4306: F5F7                biosSelectDisk		EQU		BIOSEntry + 01BH
4307: F5F7                biosSetTrack		EQU		BIOSEntry + 01EH
4308: F5F7                biosSetSector		EQU		BIOSEntry + 021H
4309: F5F7                biosSetDMA			EQU		BIOSEntry + 024H
4310: F5F7                biosReadDisk		EQU		BIOSEntry + 027H
4311: F5F7                biosWriteDisk		EQU		BIOSEntry + 02AH
4312: F5F7                biosListStatus		EQU		BIOSEntry + 02DH
4313: F5F7                biosSectorTranslate	EQU		BIOSEntry + 030H
4314: F5F7                                    
4315: F5F7                ;*                  
4316: F5F7                ;******************   E N D   O F   C P / M   *****************
4317: F5F7                ;*                  
4318: F5F7                CodeEnd:            
4319: F5F7                		END               




                                    Xref


0000	0000	$                             		  1594,

2514	ED6D	ADDA2HL                       		  3459,
0506	E242	ADDHL                         		  0524,  0924,  1117,
0643	E2BA	AFN                           		  0651,
0649	E2C2	AFN1                          		  0647,
0050	002A	ASTRK                         		  0664,
0052	0040	ATSIGN                        		  1767,
3964	F46D	AUTOSEL                       		  4011,  4017,  4034,  4045,  4052,  4060,  4066,  4073,  4079,  4117,  4149,  4155,  4161,  4207,
4268	F5D5	AUTOSELECTACTIVE              		  1493,  1523,  3966,
4270	F5D7	AUTOSELECTFLAG                		  1492,  1528,  3977,
3981	F491	AUTOSL1                       		  3973,

1789	E9FF	BACKUP                        		  1904,  1944,
1793	EA07	BACKUP1                       		  1790,
1408	E74A	BADLOAD                       		  1405,
1599	E8EC	BADSCTR                       		  2171,
1631	E925	BADSEC                        		  1608,
1632	E930	BADSEL                        		  1615,
1600	E8EE	BADSLCT                       		  2067,
1435	E77B	BATCH                         		  0294,  0412,  0766,  1394,
1437	E77C	BATCHFCB                      		  0306,  0309,  0311,  0312,  0322,  0326,  0419,
1630	E921	BDOSDRV                       		  1643,
1478	E806	BDOSENTRY                     		
1629	E915	BDOSERR                       		  1644,
1522	E873	BDOSEXIT                      		  1494,
1535	E890	BDOSEXIT1                     		  1525,  1530,  2004,
1520	E873	BDOSSTACK                     		  1490,
4297	F600	BIOSBOOT                      		
4300	F609	BIOSCONSOLEIN                 		  1658,  1700,  1703,  2005,
4301	F60C	BIOSCONSOLEOUT                		  1726,  1792,  1795,  2000,
4299	F606	BIOSCONSOLESTATUS             		  1697,  1999,  2002,
4295	F600	BIOSENTRY                     		  4297,  4298,  4299,  4300,  4301,  4302,  4303,  4304,  4305,  4306,  4307,  4308,  4309,  4310,  4311,  4312,  4313,
4305	F618	BIOSHOMEDISK                  		  2146,
4312	F62D	BIOSLISTSTATUS                		
4310	F627	BIOSREADDISK                  		  2161,
4304	F615	BIOSREADERIN                  		  1987,
4313	F630	BIOSSECTORTRANSLATE           		  2270,
4306	F61B	BIOSSELECTDISK                		  2098,
4309	F624	BIOSSETDMA                    		  2653,
4308	F621	BIOSSETSECTOR                 		  2273,
4307	F61E	BIOSSETTRACK                  		  2250,
4311	F62A	BIOSWRITEDISK                 		  2167,
3855	F3EA	BITMAP                        		
3874	F3F8	BITMAP1                       		  3880,
3898	F419	BITMAP2                       		  3908,  3925,
3919	F43D	BITMAP3                       		  3912,  3916,
4223	F5A3	BITSETFLAG                    		  2788,  2986,  3922,
0039	0020	BLANK                         		  0118,  0448,  0472,  0498,  0678,  0726,  0867,  0894,  0969,  1021,  1030,  1033,  1275,  1289,  1305,  1365,  1422,  1685,  1739,  1778,  1791,  1809,
4250	F5BC	BLKMASK                       		  2358,  3512,
4274	F5DC	BLKNMBR                       		  2181,  2189,  2333,  2339,  2352,  2364,  3450,  3505,  3510,  3519,
4249	F5BB	BLKSHFT                       		  2279,  2351,
0040	007B	BRACKETLEFT                   		  0284,
0041	007D	BRACKETRIGHT                  		
0026	0008	BS                            		  1683,  1746,  1794,  1856,

0051	005E	CARET                         		  1764,
0064	E000	CBASE                         		  0832,  0833,  1329,
1431	E77B	CCPSTACK                      		  0755,  0779,
1446	E7BF	CDRIVE                        		  0266,  0274,  0302,  0329,  0421,  0548,  0770,  0794,  0939,  0952,  0955,  1295,
2053	EB69	CHARBUF                       		  1653,  1694,  1709,
0467	E219	CHECK                         		  0578,  0616,  0661,
2595	EDA7	CHECKDIR                      		  2726,
2667	EDFE	CHECKFILEPOSITION             		  2902,  2979,  3113,  3131,  3144,  3217,  3297,  3325,  3355,  3361,  3779,  3902,
2442	ED1A	CHECKSUM                      		  2602,
2446	ED20	CHECKSUM1                     		  2450,
1448	E7C0	CHGDRV                        		  0528,  0553,  0797,  0860,  0935,  0948,  1206,  1230,  1291,  1345,  1423,
3112	EFCF	CHGNAM1                       		  3120,
3103	EFBE	CHGNAMES                      		  4080,
2338	ECA7	CHKBLK                        		  3401,  3429,
1676	E96F	CHKCHAR                       		  1664,  1761,
0382	E1BF	CHKCON                        		  0337,  1047,  1122,
2616	EDCD	CHKDIR1                       		  2609,
2565	ED95	CHKNMBR                       		  3314,  3924,
2486	ED4D	CHKROFL                       		  2981,  3115,
4242	F5B5	CHKVECT                       		  2603,
2499	ED5D	CHKWPRT                       		  2975,  3104,  3290,  3421,
2736	EE39	CKBITMAP                      		  2785,  3019,  3048,
2773	EE5A	CKBMAP1                       		  2776,
1708	E99D	CKCON1                        		  1702,
1710	E9A0	CKCON2                        		  1696,
1693	E97E	CKCONSOL                      		  1723,  2033,
2488	ED50	CKROF1                        		  3423,
4282	F5E3	CKSUMTBL                      		  2182,  2596,  2605,
0741	E32B	CLEARBUF                      		  0066,
0627	E2A9	CLEAREXTENT                   		  0596,  0617,
0629	E2AB	CLEAREXTENT1                  		  0633,
2533	ED7B	CLEARS2                       		  4010,  4033,  4072,
0176	E0D7	CLOSE                         		  0327,  1182,
4260	F5CA	CLOSEFLG                      		  3279,  3323,  3338,
3205	F04A	CLOSEIT                       		  3324,  3645,  4018,
3226	F075	CLOSEIT1                      		  3262,
3235	F083	CLOSEIT2                      		  3233,
3240	F089	CLOSEIT3                      		  3237,
3244	F090	CLOSEIT4                      		  3229,
3258	F0A5	CLOSEIT5                      		  3243,
3277	F0BF	CLOSEIT6                      		  3269,
3281	F0C7	CLOSEIT7                      		  3242,  3251,  3256,
0819	E394	CMDADR                        		  0806,
0687	E2E9	CMDTBL                        		  0709,
0778	E355	CMMND1                        		  0345,  0462,  1070,  1074,  1397,  1426,
0790	E36B	CMMND2                        		  0774,
0024	0003	CNTRLC                        		  1610,  1704,  1964,
0025	0005	CNTRLE                        		  1876,
0031	0010	CNTRLP                        		  1885,
0032	0012	CNTRLR                        		  1913,
0033	0013	CNTRLS                        		  1701,
0034	0015	CNTRLU                        		  1907,
0035	0018	CNTRLX                        		  1895,
0036	001A	CNTRLZ                        		  1119,
4318	F5F7	CODEEND                       		
0062	E000	CODESTART                     		
0046	003A	COLON                         		  0482,  0544,  1007,  1012,
2328	EC9A	COMBLK                        		  3400,  3428,
1410	E753	COMFILE                       		  1311,
0754	E32F	COMMAND                       		  0065,
3720	F34D	COMPRAND                      		  3783,  3814,
0522	E249	CONVERT                       		  1350,
0515	E247	CONVFST                       		  0795,  0859,  0965,  1062,  1094,  1145,  1204,  1226,  1344,  1420,
0547	E272	CONVRT1                       		  0538,
0551	E279	CONVRT2                       		  0545,
0559	E27F	CONVRT3                       		  0550,
0561	E281	CONVRT4                       		
0577	E284	CONVRT7                       		  0581,
4265	F5CF	COUNTER                       		  2888,  2916,
0030	000D	CR                            		  0110,  1677,  1816,  1852,  1975,
0235	E106	CREATE                        		  1152,
0109	E095	CRLF                          		  0126,  0444,  0460,  0780,  1001,  1099,  1387,
2051	EB67	CURPOS                        		  1735,  1780,  1805,  1837,  1862,  1900,  1940,
4222	F5A2	CURRENTDRIVE                  		  1641,  2096,  2459,  3829,  3932,  3954,  3974,  4001,  4092,
4221	F5A1	CURRENTUSER                   		  3910,  3982,  4138,  4143,

0858	E3CB	DECODE                        		  1143,  1270,
0865	E3DB	DECODE1                       		  0890,
0660	E2C9	DECODENAME                    		  0562,  0600,  0673,
0668	E2DA	DECODENAME1                   		  0665,
0671	E2DC	DECODENAME2                   		  0667,
0037	007F	DEL                           		  1736,  1866,
0411	E1DA	DELBATCH                      		  0344,  0351,  0461,
0201	E0EC	DELETE                        		  0420,  1080,  1150,
2576	ED9E	DEMINUSHL2HL                  		  2599,  2697,
2080	EB72	DETOHL                        		  2125,  2130,  2662,  3094,  3156,
2082	EB73	DETOHL1                       		  2090,
4240	F5B1	DIRBUFFADDR                   		  2123,  2444,  2509,  2644,  2658,  3494,
4239	0080	DIRBUFFSIZE                   		  2443,  2661,  3174,
2001	EB3B	DIRC1                         		  1997,
0964	E44A	DIRECT                        		  0820,
0972	E45B	DIRECT1                       		  0976,
0977	E462	DIRECT2                       		  0970,
0982	E46B	DIRECT3                       		  1050,
1010	E49F	DIRECT4                       		  1000,
1014	E4A7	DIRECT5                       		  1009,
1017	E4AC	DIRECT6                       		  1041,  1043,
1044	E4E1	DIRECT7                       		  1031,  1039,
1046	E4E2	DIRECT8                       		  0993,
1051	E4EE	DIRECT9                       		  0983,  1048,
4254	F5C2	DIRECTORYFAT0                 		  3882,
4255	F5C4	DIRECTORYFAT1                 		  2598,
2631	EDDD	DIRREAD                       		  2724,
2622	EDCF	DIRWRITE                      		  2988,  3097,
4241	F5B3	DISKPARAMBLOCK                		  2126,  4125,
1634	E93C	DISKRO                        		  1619,
4252	F5BE	DISKSIZE                      		  2131,  2841,  3037,  3859,
0405	E1D5	DMASET                        		  0792,  1170,  1322,
0054	0024	DOLLAR                        		  1825,  3915,
2160	EBD5	DOREAD                        		  2633,  3405,
2166	EBDB	DOWRITE                       		  2626,  3509,  3529,
1032	E4CA	DRECT63                       		  1026,
1034	E4CC	DRECT65                       		  1022,
4253	F5C0	DRECTORYSIZE                  		  2475,  2692,
0932	E427	DSELECT                       		  0966,  1078,  1096,  1147,  1208,  1309,
0146	E0BA	DSKSEL                        		  0305,  0331,  0418,  0422,  0771,  0942,  0956,  1297,  1396,

4226	F5A4	EMPTYDIR                      		  3293,
0057	00E5	EMPTYFILEFLAG                 		  2907,  2983,  3906,  4226,
0056	0000	ENDOFMESSAGE                  		  0851,  1409,
0017	0005	ENTRY                         		  0096,  0142,  0149,  0155,  0203,  0209,  0244,  0256,  0355,  0384,  0388,  0396,  0407,
0154	E0C0	ENTRY1                        		  0164,  0178,  0185,  0191,  0237,
0208	E0F1	ENTRY2                        		  0218,  0231,
0043	003D	EQUALS                        		  0476,  1218,
2978	EF49	ERAFIL1                       		  2990,
2974	EF41	ERAFILE                       		  4053,
1061	E4F2	ERASE                         		  0821,
1077	E515	ERASE1                        		  1064,
1607	E8F4	ERROR1                        		  1599,
1614	E900	ERROR2                        		  1600,
1618	E906	ERROR3                        		  1601,
1622	E90C	ERROR4                        		  1602,
1625	E90F	ERROR5                        		  1616,  1620,
0087	E087	ERRORMSGPOINTER               		  0445,  0533,
1260	E655	EXISTS                        		  1257,
2307	EC81	EXTBLK                        		  2332,  3439,
2318	EC94	EXTBLK1                       		  2314,
4251	F5BD	EXTMASK                       		  2397,  2868,  3336,
0921	E41E	EXTRACT                       		  0991,  1019,  1028,

4243	F5B7	FATPOINTER                    		  2770,  3873,  3884,  4105,
1442	E79D	FCB                           		  0170,  0171,  0196,  0223,  0523,  0715,  0863,  0934,  0967,  1079,  1148,  1155,  1171,  1181,  1211,  1212,  1240,  1244,  1274,  1288,  1303,  1323,  1348,  1353,  1355,  1357,  1421,
2508	ED67	FCB2HL                        		  2487,  2809,  2915,  2982,  3092,  3151,  3220,  3781,  3905,
4276	F5E0	FCBPOSITION                   		  2510,  2719,
3078	EFA5	FCBSET                        		  3315,
4016	F4C1	FCCLOSEFILE                   		  1568,
1980	EB23	FCCONSOLEIN                   		  1552,
1773	E9EB	FCCONSOLEOUT                  		  1553,  1668,  1762,  1830,
1777	E9F1	FCCONSOLEOUT1                 		  1783,
2032	EB59	FCCONSOLESTATUSIN             		  1562,
1836	EA3C	FCCONSOLESTRINGIN             		  1561,  1902,  1911,
2024	EB53	FCCONSOLESTRINGOUT            		  1560,
4071	F508	FCCREATEFILE                  		  1574,
4051	F4F3	FCDELETEFILE                  		  1571,
1994	EB2F	FCDIRECTCONSOLEOUT            		  1557,
4085	F51A	FCGETACTIVEDISKS              		  1576,
4091	F520	FCGETCURRENTDISK              		  1577,
4124	F542	FCGETDPB                      		  1583,
4104	F52D	FCGETFATTABLE                 		  1579,
4160	F569	FCGETFILESIZE                 		  1587,
2010	EB48	FCGETIOBYTE                   		  1558,
4110	F533	FCGETRODISKS                  		  1581,
4134	F549	FCGETUSER                     		  1584,
3990	F49A	FCGETVERSION                  		  1563,
4302	F60F	FCLISTOUT                     		  1556,  1731,
4009	F4B8	FCOPENFILE                    		  1567,
4303	F612	FCPUNCHOUT                    		  1555,
1986	EB29	FCREADERIN                    		  1554,
4148	F55D	FCREADRANDOM                  		  1585,
4059	F4FC	FCREADSEQUENTIAL              		  1572,
4078	F511	FCRENAMEFILE                  		  1575,
3996	F49F	FCRESETDISKSYSTEM             		  1565,
4170	F56F	FCRESETDRIVE                  		  1589,
2040	EB5F	FCRETURN                      		  1590,  1591,
4024	F4C7	FCSEARCHFORFIRST              		  1569,
4036	F4DE	FCSEARCHFORFIRST1             		  4029,
4042	F4E4	FCSEARCHFORNEXT               		  1570,
3952	F461	FCSELECTDISK                  		  1534,  1566,  3980,
2468	ED35	FCSETDISKRO                   		  1580,  2614,
4097	F526	FCSETDMA                      		  1578,
4116	F539	FCSETFILEATTRIBUTES           		  1582,
2016	EB4E	FCSETIOBYTE                   		  1559,
3811	F3B6	FCSETRECORDNUMBER             		  1588,
4298	F603	FCSYSTEMRESET                 		  1551,
4154	F563	FCWRITERANDOM                 		  1586,
4065	F502	FCWRITESEQUENTIAL             		  1573,
4206	F590	FCWRITEZEROFILL               		  1592,
0029	000C	FF                            		
4277	F5E1	FILEPOSINDIRECTORY            		  2178,  2552,  2668,  2680,  2694,  2696,  2703,  2953,  3208,  3209,
4233	F5AB	FILEPOSINDIRSEGMENT           		  2111,  2478,  2554,  3892,
1633	E937	FILERO                        		  1623,
2885	EEBD	FINDFIRST                     		  2977,  3106,  3129,  3143,  3216,  3296,  3354,  3768,  4037,
2899	EED2	FINDNXT                       		  2934,  2941,  2989,  3119,  3136,  3802,  4046,
2914	EEEF	FNDNXT1                       		  2908,
2919	EEF8	FNDNXT2                       		  2951,
2936	EF18	FNDNXT3                       		  2931,
2946	EF21	FNDNXT4                       		  2925,  2928,  2935,
2952	EF28	FNDNXT5                       		  2922,
2966	EF39	FNDNXT6                       		  2903,  2913,
3012	EF68	FNDSPA1                       		  3053,  3072,
3036	EF79	FNDSPA2                       		  3015,
3058	EF94	FNDSPA3                       		  3021,  3050,
3069	EF9C	FNDSPA4                       		  3042,
3005	EF66	FNDSPACE                      		  3443,
4262	F5CC	FNDSTAT                       		  2857,  2887,  2956,
1594	0028	FUNCTIONCOUNT                 		  1497,
1550	E89A	FUNCTIONVECTOR                		  1594,  1500,

1417	E756	GETBACK                       		  1053,  1083,  1120,  1123,  1130,  1193,  1246,  1252,  1259,  1407,
1419	E759	GETBACK1                      		  1278,  1293,  1298,
2282	EC68	GETBLK1                       		  2286,
2292	EC76	GETBLK2                       		  2297,
2298	EC7F	GETBLK3                       		  2294,
2278	EC61	GETBLOCK                      		  2329,  3432,
1652	E956	GETCHAR                       		  1663,  1848,
0394	E1CD	GETDSK                        		  0781,  0793,  1003,
1662	E961	GETECHO                       		  1981,
3289	F0CC	GETEMPTY                      		  3360,  3667,  4074,
0590	E28E	GETEXT                        		  0579,
0597	E29B	GETEXT1                       		  0594,
0615	E29F	GETEXT4                       		  0619,
0293	E136	GETINP                        		  0786,  1067,
0350	E193	GETINP1                       		  0296,  0308,  0314,  0328,
0360	E1A4	GETINP2                       		  0338,
0363	E1A8	GETINP3                       		  0372,
0373	E1B7	GETINP4                       		  0367,
3306	F0EE	GETMT1                        		  3310,
3321	F102	GETNEXT                       		  3393,  3561,
2691	EE0E	GETNEXTENTRY                  		  2901,  3900,
4126	F545	GETPRM1                       		  4087,  4106,  4112,
2524	ED72	GETS2                         		  2534,  2541,  3212,  3550,  3684,
0254	E112	GETSETCURRENTUSER             		  0764,  1277,
0248	E110	GETUSR                        		  0261,
2457	ED27	GETWPRT                       		  2500,  3210,
0049	003E	GRTTHAN                       		  0488,  0784,
3342	F12B	GTNEXT1                       		  3334,
3352	F136	GTNEXT2                       		  3340,
3364	F154	GTNEXT3                       		  3341,  3356,
3366	F157	GTNEXT4                       		  3363,
3374	F15E	GTNEXT5                       		  3348,  3359,  3362,

0830	E3A2	HALT                          		
0910	E415	HL2DE                         		  0321,  0916,  1214,  1359,
2424	ED0D	HLRIGHTC                      		  2180,  2461,  3832,  3861,
2426	ED0E	HLRIGHTC1                     		  2436,
2145	EBC4	HOMEDRIVE                     		  2893,  3891,

0077	E008	INBUFF                        		  0086,  0335,  0375,  1360,
0085	E085	INBUFFADDRESS                 		  0376,  0529,  0635,  1076,  1215,  1225,
0075	E007	INBUFFCOUNT                   		  0318,  0361,  0743,  0772,  1068,
0083	E085	INBUFFEND                     		  0074,
0073	E006	INBUFFSIZE                    		  0320,
0072	E006	INBUFFSTART                   		  0074,  0354,
2678	EE07	INITIALIZEFILEPOSITION        		  2698,  2892,  2967,  3897,
0015	0003	IOBYTE                        		  2011,  2017,
2045	EB60	IOERR1                        		  3375,  3411,  3427,
2168	EBDE	IORET                         		  2162,

2071	EB6D	JUMPTOHL                      		  2172,  2495,  2503,

4235	F5AF	LASTSECTORNUMBER              		  2117,  2152,  2194,  2257,
4234	F5AD	LASTTRACKNUMBER               		  2114,  2148,  2199,  2252,
0048	003C	LESSTH                        		  0486,
0028	000A	LF                            		  0112,  1679,  1751,  1818,  1854,
4228	F5A7	LOGGEDBITMAP                  		  3831,  3842,  3846,  3999,  4086,  4177,  4185,
2350	ECAD	LOGICAL                       		  3403,  3477,
4247	0080	LOGICALSECSIZE                		  1106,  1167,  1327,  3391,  3426,
2353	ECB3	LOGICL1                       		  2356,
3828	F3C9	LOGINDRIVE                    		  3958,  4005,
4275	F5DE	LOGSECT                       		  2357,  3502,

0013	0040	MEM                           		  0061,
4263	F5CD	MODE                          		  2408,  3382,  3417,  3478,  3557,  3591,  4209,
2551	ED88	MOREFLS                       		  2566,  2612,  2911,
0905	E413	MOVE3                         		  1312,
0273	E126	MOVECD                        		  0356,  1296,  1395,
2657	EDF2	MOVEDIR                       		  4038,  4047,
3187	F03C	MOVEWORD                      		  3245,  3247,

1450	E7C1	NBYTES                        		  1100,  1103,
1800	EA0C	NEWLINE                       		  1909,  1917,
1804	EA14	NEWLN1                        		  1811,
0850	E3C3	NOFILE                        		  0848,
0494	E238	NONBLANK                      		  0502,  0531,  1217,
0847	E3BD	NONE                          		  0981,  1082,  1251,
1194	E5DA	NOSPACE                       		  1189,
0686	0006	NUMCMDS                       		  0713,

4256	F5C6	OFFSET                        		  2246,
4269	F5D6	OLDDRV                        		  1532,  3975,
0162	E0C8	OPEN                          		  0172,  0307,
0168	E0CD	OPENFCB                       		  1097,  1313,
3141	EFF9	OPENIT                        		  3658,  4012,
3146	F002	OPENIT1                       		  3365,
3175	F033	OPENIT2                       		  3171,  3173,
1718	E9A3	OUTCHAR                       		  1765,  1776,  1779,  1802,  1810,  1817,  1819,  1976,
1733	E9BD	OUTCHR1                       		  1721,
1750	E9D4	OUTCHR2                       		  1747,
1815	EA24	OUTCRLF                       		  1640,  1803,  1880,
2049	EB65	OUTFLAG                       		  1719,  1863,  1937,  1942,  1945,

0676	E2E1	PADFIELD                      		  0595,  0662,  0680,
0892	E406	PADNUMBER                     		  0868,  0898,
1513	E83E	PARAME                        		  1485,  1533,  3953,  3971,  4135,
1512	E83C	PARAMSDE                      		  1482,  1508,  1526,  1839,  2308,  2370,  2379,  2525,  2890,  3089,  3107,  3153,  3176,  3223,  3291,  3294,  3299,  3327,  3422,  3452,  3597,  3769,  3812,  3967,  3983,  4044,  4171,
0045	002E	PERIOD                        		  0480,  0592,
0019	0080	PG0BUFFER                     		  0319,  0401,  0791,  0922,  1116,  1374,  1386,  4002,
0124	E0A4	PLINE                         		  0840,  0849,  1066,  1190,  1258,  1406,
0128	E0A9	PLINE2                        		  0136,  0336,
3589	F2AB	POSITION                      		  3700,  3708,
3595	F2AF	POSITN1                       		  4211,
3642	F2EF	POSITN2                       		  3632,
3675	F327	POSITN3                       		  3638,  3661,
3682	F32C	POSITN4                       		  3651,  3666,  3671,
3690	F333	POSITN5                       		  3624,
0053	0023	POUNDSN                       		  1801,
0093	E089	PRINT                         		  0102,  0134,  0453,  0459,  0783,  0785,  1121,
0100	E08F	PRINTB                        		  0111,  0113,  0119,  1006,  1008,  1013,  1035,
1638	E940	PRTERR                        		  1609,  1626,
2052	EB68	PRTFLAG                       		  1729,  1888,
1823	EA2E	PRTMESG                       		  1645,  1647,  1832,  2028,

0042	003F	QMARK                         		  0458,  0646,  0666,  0973,  2924,  4028,  4032,

3778	F38C	RANSIZ1                       		  3803,
3801	F3AE	RANSIZ2                       		  3795,
3804	F3B4	RANSIZ3                       		  3780,
3766	F37A	RANSIZE                       		  4162,
1844	EA4A	RDBUF1                        		  1860,  1870,  1893,  1971,
1915	EACB	RDBUF10                       		  1864,
1922	EAD3	RDBUF11                       		  1934,
1935	EAE5	RDBUF12                       		  1925,
1943	EAF4	RDBUF13                       		  1947,
1952	EB01	RDBUF14                       		  1914,
1956	EB04	RDBUF15                       		  1874,
1969	EB18	RDBUF16                       		  1966,
1972	EB1C	RDBUF17                       		  1853,  1855,
1847	EA4C	RDBUF2                        		  1883,  1939,  1948,
1865	EA71	RDBUF3                        		  1857,
1875	EA81	RDBUF4                        		  1867,
1884	EA92	RDBUF5                        		  1877,
1894	EAA3	RDBUF6                        		  1886,
1898	EAA9	RDBUF7                        		  1905,
1906	EABA	RDBUF8                        		  1896,
1912	EAC6	RDBUF9                        		  1908,
0841	E3B2	RDERR                         		  0839,
0838	E3AC	RDERROR                       		  1131,
0216	E0F6	RDREC                         		  0224,  0313,  1324,
3380	F164	RDSEQ                         		  4061,
3383	F169	RDSEQ1                        		  3701,
3399	F18E	RDSEQ2                        		  3390,
3410	F1A3	RDSEQ3                        		  3392,  3398,  3402,
4261	F5CB	RDWRTFLG                      		  3357,  3385,  3420,
0222	E0FB	READFCB                       		  1109,
3698	F33B	READRAN                       		  4150,
4264	F5CE	RELBLOCK                      		  3433,  3457,
0242	E10B	RENAM                         		  1245,
1203	E5E3	RENAME                        		  0824,
1222	E612	RENAME1                       		  1219,
1237	E62C	RENAME2                       		  1233,
1241	E631	RENAME3                       		
1250	E640	RENAME4                       		  1243,
1253	E646	RENAME5                       		  1221,  1227,  1236,
1256	E64C	RENAME6                       		  1210,
0140	E0B5	RESETDISKSYSTEM               		  0765,
0947	E439	RESETDR                       		  1133,  1254,  1343,  1402,  1418,
4227	F5A5	ROBITMAP                      		  2458,  2469,  2474,  3998,  4111,  4183,  4192,
1601	E8F0	RODISK                        		  2502,
1602	E8F2	ROFILE                        		  2494,
1444	E7BE	RTNCODE                       		  0156,  0984,

2865	EEAC	SAMEXT                        		  2939,
3130	EFE8	SAVATR1                       		  3137,
1142	E580	SAVE                          		  0823,
1161	E5A7	SAVE1                         		  1176,
1180	E5C4	SAVE2                         		  1164,
1188	E5CE	SAVE3                         		  1153,  1175,
1191	E5D4	SAVE4                         		  1184,
3127	EFE3	SAVEATTR                      		  4118,
4266	F5D0	SAVEFCB                       		  2891,  2904,  4043,
4272	F5D9	SAVEXT                        		  2291,  2399,
4273	F5DA	SAVNREC                       		  2281,  2360,  2392,  2414,  3387,  3395,  3425,  3531,  3567,
4271	F5D8	SAVNXT                        		  2395,  2418,  3388,  3532,
0708	E301	SEARCH                        		  0800,
0711	E306	SEARCH1                       		  0736,
0717	E30F	SEARCH2                       		  0724,
0730	E322	SEARCH3                       		  0720,  0733,
0734	E327	SEARCH4                       		  0727,
4248	F5B9	SECTORS                       		  2128,  2212,  2224,
2095	EB7C	SELECTDISK                    		  3835,
2138	EBC0	SELECTDISK1                   		  2136,
0047	003B	SEMIC                         		  0484,
2637	EDE3	SET2USERSDMA                  		  2627,  3520,  4004,  4100,
3931	F44B	SETBIT                        		  2473,  3845,
3935	F452	SETBIT1                       		  3939,
3940	F45A	SETBIT2                       		  3937,
0260	E117	SETCDRV                       		  0352,  1389,
2808	EE71	SETCLEARFATBITS               		  2987,  3923,
2587	EDA5	SETDIR                        		  2623,
2643	EDE9	SETDIRDMA                     		  2624,  2632,  3501,
2649	EDEC	SETDMA0                       		  2639,
2369	ECC9	SETEXT                        		  2396,  3147,  4030,
2814	EE7A	SETFL1                        		  2851,
2830	EE8B	SETFL2                        		  2822,
2837	EE91	SETFL3                        		  2828,
2847	EEA0	SETFL4                        		  2840,
2378	ECD1	SETHLDE                       		  2390,  2407,
2406	ECF5	SETNREC                       		  3406,  3560,  3571,
2540	ED81	SETS2B7                       		  3157,  3316,  3376,  3694,
2038	EB5C	SETSTATUSBDOS                 		  1982,  1988,  2006,  2012,  2047,  2858,  2969,  3369,  3448,  3678,  3992,  4093,  4139,
4141	F557	SETUSER                       		  4137,
1759	E9DA	SHOWIT                        		  1931,  1960,
2066	EB6A	SLCTERR                       		  3836,
4267	F5D4	SMALLDISK                     		  2133,  2312,  2820,  3227,  3455,
0117	E09F	SPACE                         		  1011,  1015,  1042,
0195	E0E6	SRCHFCB                       		  0980,  1209,  1242,
0183	E0DC	SRCHFST                       		  0197,
0189	E0E1	SRCHNXT                       		  1049,
2050	EB66	STARTING                      		  1806,  1838,  1882,  1899,
1514	E83F	STATUSBDOSRETURN              		  1487,  1538,  2039,  2955,  3207,  3282,  3396,  3473,  3562,  3649,  3659,  3669,  3693,  3918,  4127,
2783	EE60	STBITMAP                      		  2846,
2798	EE6A	STBMAP1                       		  2801,  3061,
0400	E1D2	STDDMA                        		  1192,  1388,
2412	ED01	STNREC1                       		  2410,
2389	ECDE	STRDATA                       		  3367,  3386,  3424,
2856	EEA6	STSTATUS                      		  4054,  4081,  4119,
0443	E1F2	SYNERR                        		  0473,  0796,  0862,  0872,  0877,  0883,  0885,  0887,  0895,  1095,  1134,  1146,  1205,  1255,  1272,  1276,  1306,  1403,  1425,
0446	E1F8	SYNERR1                       		  0456,
0457	E20B	SYNERR2                       		  0449,  0451,

0027	0009	TAB                           		  1681,  1775,
0020	0100	TBASE                         		  1160,  1318,  1390,
0016	0004	TDRIVE                        		  0268,  0275,
0018	005C	TFCB                          		  1356,
2177	EBE6	TRKSEC                        		  2723,  3096,
2187	EBF4	TRKSEC1                       		  3404,  3507,  3526,
2205	EC07	TRKSEC2                       		  2221,
2222	EC1D	TRKSEC3                       		  2210,  2235,
2240	EC32	TRKSEC4                       		  2226,  2231,
1093	E530	TYPE                          		  0822,
1102	E547	TYPE1                         		  1124,
1104	E54A	TYPE2                         		
1114	E55A	TYPE3                         		  1107,
1128	E573	TYPE4                         		  1111,
1132	E57A	TYPE5                         		  1098,

1286	E678	UNKNOWN                       		  0799,  0826,
1404	E741	UNKWN0                        		  1334,  1342,
1302	E694	UNKWN1                        		  1290,
1307	E69D	UNKWN2                        		
1319	E6B1	UNKWN3                        		  1335,
1339	E6D1	UNKWN4                        		  1325,
1361	E700	UNKWN5                        		  1368,
1372	E70E	UNKWN6                        		  1364,  1366,
1375	E713	UNKWN7                        		  1383,
1384	E71F	UNKWN8                        		  1379,
1401	E73B	UNKWN9                        		  1314,
3086	EFA9	UPDATE                        		  3118,  3135,
3095	EFB8	UPDATE1                       		  3280,
0281	E12D	UPPER                         		  0369,
0044	005F	USCORE                        		  0478,  1220,
1269	E661	USER                          		  0825,
4229	F5A9	USERSDMA                      		  2638,  2660,  4003,  4099,
1515	E841	USERSTACK                     		  1489,  1536,

3706	F344	WRITERAN                      		  4156,
0229	E101	WRTREC                        		  1172,
3415	F1A6	WTSEQ                         		  4067,
3418	F1AB	WTSEQ1                        		  3709,  4212,
3542	F27A	WTSEQ10                       		  3534,
3568	F2A6	WTSEQ11                       		  3565,
3570	F2A8	WTSEQ12                       		  3556,  3559,
3442	F1E3	WTSEQ2                        		  3436,
3449	F1F0	WTSEQ3                        		  3446,
3462	F20C	WTSEQ4                        		  3458,
3470	F214	WTSEQ5                        		  3461,
3472	F216	WTSEQ6                        		  3431,
3496	F234	WTSEQ7                        		  3500,
3504	F242	WTSEQ8                        		  3517,
3525	F263	WTSEQ9                        		  3481,  3492,
3554	F287	WTSEQ99                       		

4257	F5C8	XLATE                         		  2122,  2268,

1084	E525	YESNO                         		  1065,
