0001: 0000 		 ;	Pages 165/493 &  204/493  Programmers CPM Handbook by Andy Johnston-Laird
0002: 0000 		 					
0003: 0000 		 
0004: 0000 		 INopCode	EQU		0DBH
0005: 0000 		 OUTopCode	EQU		0D3H
0006: 0000 		 ; programmers CPM Handbook by Andy Johnson
0007: 0000 		 
0008: 0000 		 VERSION		EQU		03130H		;Equates for the sign-on Screen
0009: 0000 		 MONTH		EQU		03830H		; '08'
0010: 0000 		 DAY			EQU		03930H		; '09'
0011: 0000 		 Year		EQU		03531H		; '15'
0012: 0000 		 
0013: 0000 		 MemorySize	EQU 64
0014: 0000 		 
0015: 0000 		 CCPLength	EQU 0800H	; Constant
0016: 0000 		 BDOSLength	EQU 0A00H	; Constant	0E00H
0017: 0000 		 BIOSLength	EQU 0A00H	; Constant 0900H
0018: 0000 		 
0019: 0000 		 LengthInK	EQU ((CCPLength + BDOSLength + BIOSLength) /1024) + 1
0020: 0000 		 LengthInBytes	EQU (CCPLength + BDOSLength + BIOSLength)
0021: 0000 		 
0022: 0000 		 
0023: 0000 		 ;CCPEntry	EQU	((MemorySize - LengthInK) * (0 + 1024))
0024: 0000 		 CCPEntry	EQU 0E400H		; forced calculation
0025: 0000 		 
0026: 0000 		 BDOSEntry	EQU	CCPEntry + CCPLength + 6
0027: 0000 		 BIOSEntry	EQU	CCPEntry + CCPLength + BDOSLength
0028: 0000 		 
0029: 0000 		 PageZero:	ORG 0000H		; Start of page Zero
0030: 0000 	C303F6	 	JMP		WarmBootEntry	; warm start
0031: 0003 		 IOBYTE:
0032: 0003 	01	 	DB		01H				; IOBYTE- Console is assigned the CRT device
0033: 0004 	00	 	DB		00H				; Current default drive (A)
0034: 0005 	C306EC	 	JMP		BDOSEntry		; jump to BDOS entry
0035: 0008 		 	DS		028H			; interrupt locations 1-5 not used
0036: 0030 		 	DS		008H			; interrupt location 6 is reserved
0037: 0038 	C30000	 	JMP		0000H			; rst 7 used only by DDT & SID programs
0038: 003B 		 	DS		005H			; not currently used
0039: 0040 		 	DS		010H			; reserved for scratch by CBIOS- not used by CP/M
0040: 0050 		 	DS		00CH			; not currently used
0041: 005C 		 FCB:
0042: 005C 		 	DS		021H			; Default FCB for transient programs
0043: 007D 		 RandomRecordPosition:
0044: 007D 		 	DS		003H			; optional random record position
0045: 0080 		 DefaultDiskBuffer:
0046: 0080 		 	DS		080H			; default 128- byte disk buffer,
0047: 0100 		 							; also filled with the command line from CCP
0048: 0100 		 	
0049: 0100 		 
0050: 0100 		 
0051: 0100 		 	ORG		BIOSEntry		; Assemble code at BIOS address
0052: F600 		 		
0053: F600 		 		; BIOS jum Vector
0054: F600 		 		
0055: F600 	C3F9F6	 	JMP	BOOT			; NOT YET CODED
0056: F603 		 WarmBootEntry:
0057: F603 	C329FE	 	JMP	WBOOT			; NOT YET CODED
0058: F606 	C362F8	 	JMP	CONST			; CODED
0059: F609 	C378F8	 	JMP	CONIN			; CODED
0060: F60C 	C386F8	 	JMP	CONOUT			; CODED		     495   F95B: OutputStatusPort:
0061: F60F 	C3ACF8	 	JMP	LIST			; CODED
0062: F612 	C3BCF8	 	JMP	PUNCH			; CODED
0063: F615 	C3CDF8	 	JMP	READER			; CODED
0064: F618 	C3D3FB	 	JMP	HOME			; CODED			302		FBD3
0065: F61B 	C32BFB	 	JMP	SELDSK			; CODED			168		FB2B
0066: F61E 	C358FB	 	JMP	SETTRK			; CODED			211		FB58
0067: F621 	C35EFB	 	JMP	SETSEC			; CODED			221		FB5E
0068: F624 	C365FB	 	JMP	SETDMA			; CODED			230		FB65
0069: F627 	C3FBFB	 	JMP	READ			; CODED			398		FBFB
0070: F62A 	C315FC	 	JMP	WRITE			; CODED			426		FC15
0071: F62D 	C394F8	 	JMP	LISTST			; CODED
0072: F630 	C3CDFB	 	JMP	SECTRAN			; CODED
0073: F633 		 	
0074: F633 		 PhysicalSectorSize	EQU	512			; for the 5.25" disk the 8" size is 128, 
0075: F633 		 DiskBuffer:
0076: F633 		 	DS	PhysicalSectorSize	
0077: F833 		 AfterDiskBuffer		EQU	$
0078: F833 		 
0079: F833 		 		ORG		DiskBuffer		; wind the location counter back
0080: F633 		 
0081: F633 		 InitializeStream:		; used by the initialization subroutine. Layout:
0082: F633 		 						;	DB	Port number to be initialized
0083: F633 		 						;	DB	Number of bytes to be output
0084: F633 		 						;	DB	xx.xx.xx.xx.xx.xx data to be output
0085: F633 		 						;	:
0086: F633 		 						;	:
0087: F633 		 						;	DB	Port numbe of 00H terminator
0088: F633 		 						;	Console does not need to be initalized. it was done in the PROM
0089: F633 		 
0090: F633 	ED	 		DB	CommunicationStatusPort	; intel 8251 ?
0091: F634 	06	 		DB	06H		; number of bytes
0092: F635 	00	 		DB	0		; get chip ready by sending data out to it
0093: F636 	00	 		DB	0
0094: F637 	00	 		DB	0
0095: F638 	42	 		DB	042H;	; Reset and raise data terminal ready
0096: F639 	6E	 		DB	06Eh	; 1 stop bit, no parity, 8bits/char baud rate / 16
0097: F63A 	25	 		DB	025H	;Raise request to send, and enable transmit and receive
0098: F63B 		 		
0099: F63B 	DF	 		DB	CommunicationBaudMode;	Intel 8253 time
0100: F63C 	01	 		DB	01H		; number of bytes
0101: F63D 	B6	 		DB	0B6H	; select counter2, load LS Byte
0102: F63E 		 		
0103: F63E 	DE	 		DB	CommunicationBaudRate
0104: F63F 	02	 		DB	02H		; number of bytes
0105: F640 	3800	 		DW	0038H	; 1200 baud rate
0106: F642 		 		
0107: F642 	00	 		DB	0		; port number of 0 terminates
0108: F643 		 		
0109: F643 		 ;  Equates for the sign in message
0110: F643 		 
0111: F643 		 CR		EQU	0DH		; Carriage Return
0112: F643 		 LF		EQU	0AH		; Line Feed
0113: F643 		 
0114: F643 		 SignOnMessage:		; Main sign on message
0115: F643 	43502F4D20	 		DB	43H,50H,2FH,4DH,20H		; CP/M 2.2.
0116: F648 	322E322E	 		DB	32H,2EH,32H,2EH			;(2.2.)
0117: F64C 	3031	 		DW	VERSION
0118: F64E 		 ;		DB	30H,30H		; VERSION
0119: F64E 	20	 		DB	20H
0120: F64F 	3038	 		DW	MONTH
0121: F651 		 ;		DB	30H,37H		; MONTH
0122: F651 	2F	 		DB	2FH			; /
0123: F652 	3039	 		DW	DAY
0124: F654 		 ;		DB	31H,35H		; DAY
0125: F654 	2F	 		DB	2FH			; /
0126: F655 	3135	 		DW	YEAR
0127: F657 		 ;		DB	38H,32H		; YEAR
0128: F657 	0D0A0A	 		DB	CR,LF,LF
0129: F65A 		 		
0130: F65A 	53696D706C	 		DB	53H,69H,6DH,70H,6CH		;Simple BIOS
0131: F65F 	652042494F53	 		DB	65H,20H,42H,49H,4fH,53H
0132: F665 	0D0A0A	 		DB	CR,LF,LF
0133: F668 		 		
0134: F668 	4469736B20	 		DB	44H,69H,73H,6BH,20H		; Disk configuration :
0135: F66D 	636F6E6669	 		DB 	63H,6FH,6EH,66H,69H
0136: F672 	6775726174	 		DB	67H,75H,72H,61H,74H
0137: F677 	696F6E203A	 		DB	69H,6FH,6EH,20H,3Ah
0138: F67C 	0D0A0A	 		DB	CR,LF,LF
0139: F67F 		 		
0140: F67F 	2020202020	 		DB	20H,20H,20H,20H,20H		; A: 0.35 Mbyte 5" Floppy' 
0141: F684 	413A20302E3335	 		DB	41H,3AH,20H,30H,2EH,33H,35H
0142: F68B 	204D62797465	 		DB	20H,4DH,62H,79H,74H,65H
0143: F691 	20352220	 		DB	20H,35H,22H,20H
0144: F695 	466C6F707079	 		DB	46H,6CH,6FH,70H,70H,79H
0145: F69B 	0D0A	 		DB	CR,LF
0146: F69D 		 		
0147: F69D 	2020202020	 		DB	20H,20H,20H,20H,20H		; B: 0.35 Mbyte 5" Floppy'
0148: F6A2 	423A20302E3335	 		DB	42H,3AH,20H,30H,2EH,33H,35H
0149: F6A9 	204D62797465	 		DB	20H,4DH,62H,79H,74H,65H
0150: F6AF 	20352220	 		DB	20H,35H,22H,20H
0151: F6B3 	466C6F707079	 		DB	46H,6CH,6FH,70H,70H,79H
0152: F6B9 	0D0A0A	 		DB	CR,LF,LF
0153: F6BC 		 		
0154: F6BC 	2020202020	 		DB	20H,20H,20H,20H,20H		; C: 0.24 Mbyte 8" Floppy
0155: F6C1 	433A20302E3234	 		DB	43H,3AH,20H,30H,2EH,32H,34H
0156: F6C8 	204D62797465	 		DB	20H,4DH,62H,79H,74H,65H
0157: F6CE 	20352220	 		DB	20H,35H,22H,20H
0158: F6D2 	466C6F707079	 		DB	46H,6CH,6FH,70H,70H,79H
0159: F6D8 	0D0A	 		DB	CR,LF
0160: F6DA 		 		
0161: F6DA 	2020202020	 		DB	20H,20H,20H,20H,20H		; D: 0.24 Mbyte 8" Floppy
0162: F6DF 	443A20302E3234	 		DB	44H,3AH,20H,30H,2EH,32H,34H
0163: F6E6 	204D62797465	 		DB	20H,4DH,62H,79H,74H,65H
0164: F6EC 	20352220	 		DB	20H,35H,22H,20H
0165: F6F0 	466C6F707079	 		DB	46H,6CH,6FH,70H,70H,79H
0166: F6F6 	0D0A	 		DB	CR,LF
0167: F6F8 		 		
0168: F6F8 		 ;		DB	20H,20H,20H,20H,20H
0169: F6F8 		 ;		DB	20H,20H,20H,20H,20H
0170: F6F8 		 ;		DB	20H,20H,20H,20H,20H
0171: F6F8 		 ;		DB	20H,20H,20H,20H,20H
0172: F6F8 		 		
0173: F6F8 		 ;		DS	84H		; 132  sign on message goes here
0174: F6F8 		 		
0175: F6F8 	00	 		DB	00
0176: F6F9 		 		
0177: F6F9 		 	DefaultDisk	EQU	0004H
0178: F6F9 		 	
0179: F6F9 		 ;219--------------------BOOT-----------------------------	
0180: F6F9 		 	
0181: F6F9 		 	BOOT:		; entered directly from the BIOS JMP vector
0182: F6F9 		 				; Control transfered by the CP/M bootstrap loader
0183: F6F9 		 				; initial state will be determined by the PROM
0184: F6F9 		 				
0185: F6F9 		 				; setting up 8251 & 8253 --
0186: F6F9 	F3	 	DI
0187: F6FA 	2133F6	 	LXI	H,InitializeStream		;HL-> Data stream
0188: F6FD 		 ;
0189: F6FD 		 InitializeLoop:
0190: F6FD 	7E	 	MOV	A,M		; get port #
0191: F6FE 	B7	 	ORA A		; if 00H then done
0192: F6FF 	CA13F7	 	JZ	InitializeComplete
0193: F702 		 	
0194: F702 	320AF7	 	STA	InitializePort	; set up OUT instruction
0195: F705 	23	 	INX	H		; HL -> count # of bytes to output
0196: F706 	4E	 	MOV	C,M		; get byte count
0197: F707 		 	
0198: F707 		 InitializeNextByte:
0199: F707 	23	 	INX	H	
0200: F708 	7E	 	MOV	A,M		; get next byte
0201: F709 	D3	 	DB OUTopCode		; OUT instruction output to correct port
0202: F70A 		 	
0203: F70A 		 InitializePort:
0204: F70A 	00	 	DB	0		; set by above code (self modifying code!!!!!)
0205: F70B 	0D	 	DCR	C		; Count down
0206: F70C 	C207F7	 	JNZ	InitializeNextByte
0207: F70F 	23	 	INX	H		; HL-> next port number
0208: F710 	C3FDF6	 	JMP InitializeLoop	; go back for more
0209: F713 		 	
0210: F713 		 InitializeComplete:
0211: F713 	3E01	 	MVI	A,01H	; set up for terminal to be console
0212: F715 	320300	 	STA	IOBYTE
0213: F718 		 	
0214: F718 	2143F6	 	LXI	H,SignonMessage
0215: F71B 	CD33F8	 	CALL	DisplayMessage
0216: F71E 		 	
0217: F71E 	AF	 	XRA	A		; Set default disk to A:
0218: F71F 	320400	 	STA	DefaultDisk
0219: F722 	FB	 	EI			; enable the interrupts
0220: F723 		 	
0221: F723 	C340F8	 	JMP	EnterCPM	; Complete initialization and enter CP/M
0222: F726 		 					; by going to the Console Command Processor
0223: F726 		 ;
0224: F726 		 ;271---------------End of Cold Boot Initialization Code--------------
0225: F726 		 
0226: F726 		 		ORG AfterDiskBuffer		; reset Location Counter
0227: F833 		 DisplayMessage:
0228: F833 	7E	 	MOV		A,M		; get next message byte
0229: F834 	B7	 	ORA		A		; check if terminator
0230: F835 	C8	 	RZ			; Yes, thes return to caller
0231: F836 		 	
0232: F836 	4F	 	MOV		C,A		; prepare for output
0233: F837 	E5	 	PUSH	HL		; save message pointer
0234: F838 	CD86F8	 	CALL	CONOUT	; go to main console output routine	*********************************************
0235: F83B 	E1	 	POP		H
0236: F83C 	23	 	INX		H 		; point at next character
0237: F83D 	C333F8	 	JMP		DisplayMessage	; loop till done
0238: F840 		 	
0239: F840 		 EnterCPM:
0240: F840 	3EC3	 	MVI		A,0C3H		; JMP op code
0241: F842 	320000	 	STA		0000H		; set up the jump in location 0000H
0242: F845 	320500	 	STA		0005H		; and at location 0005H
0243: F848 		 	
0244: F848 	2103F6	 	LXI		H,WarmBootEntry	; get BIOS vector address
0245: F84B 	220100	 	SHLD	0001H		; put address in location 1
0246: F84E 		 	
0247: F84E 	2106EC	 	LXI		H,BDOSEntry	; Get BDOS entry point address
0248: F851 	220600	 	SHLD	0006H		; put address at location 5
0249: F854 		 	
0250: F854 	018000	 	LXI		B,80H		; set disk I/O address to default
0251: F857 	CD65FB	 	CALL	SETDMA		; use normal BIOS routine		****************************************************************
0252: F85A 		 	
0253: F85A 	FB	 	EI
0254: F85B 	3A0400	 	LDA		DefaultDisk		; Transfer current default disk to
0255: F85E 	4F	 	MOV		C,A			; Console Command Processor
0256: F85F 	C300E4	 	JMP		CCPEntry	; transfer to CCP
0257: F862 		 		
0258: F862 		 		
0259: F862 		 		
0260: F862 		 ;IOBYTE	EQU		0003H		;I/O redirection byte
0261: F862 		 
0262: F862 		 ;333--------------------CONST----------------------------
0263: F862 		 	; Entered directly from BIOS JMP vector
0264: F862 		 	; returns Register A
0265: F862 		 	; 00H -> No data
0266: F862 		 	; 0FFH -> there is data
0267: F862 		 CONST:
0268: F862 	CD6AF8	 	CALL	GetConsoleStatus	; return A= zero or not zero
0269: F865 	B7	 	ORA		A
0270: F866 	C8	 	RZ					; if 0 no returning data
0271: F867 	3EFF	 	MVI		A,0FFH		; else indicate there is data
0272: F869 	C9	 	RET
0273: F86A 		 	
0274: F86A 		 GetConsoleStatus:
0275: F86A 	3A0300	 	LDA		IOBYTE		; Get IO redirection byte
0276: F86D 	CDDCF8	 	CALL	SelectRoutine	; these routines return to the caller of GetConsoleStatus
0277: F870 	F6F8	 	DW		TTYInStatus				; 00  <- IOBYTE bits 1,0
0278: F872 	FCF8	 	DW		TerminalInStatus		; 01
0279: F874 	02F9	 	DW		CommunicationInStatus	; 10
0280: F876 	08F9	 	DW		DummyInStatus			; 11
0281: F878 		 	
0282: F878 		 CONIN:
0283: F878 		 						; get console Input character
0284: F878 		 						; entered directly from the BIOS jmp Vector
0285: F878 		 						; return the character from the console in the A register.
0286: F878 		 						; most significant bit will be 0. except when "reader" (communication)
0287: F878 		 						; port has input , all 8 bits are reurned
0288: F878 		 						;
0289: F878 		 						; normally this follows a call to CONST. it indicates a char is ready.
0290: F878 		 						; this is a blocking call
0291: F878 	3A0300	 	LDA		IOBYTE			; get i/o redirection byte
0292: F87B 	CDDCF8	 	CALL 	SelectRoutine
0293: F87E 	20F9	 	DW		TTYInput			; 00 <- IOBYTE bits 1,0
0294: F880 	26F9	 	DW		TerminalInput		; 01
0295: F882 	2FF9	 	DW		CommunicationInput	; 10
0296: F884 	35F9	 	DW		DummyInput			; 11
0297: F886 		 	
0298: F886 		 CONOUT:
0299: F886 		 						; Console output
0300: F886 		 						; entered directly from BIOS JMP Vector
0301: F886 		 						; outputs the data character in the C register
0302: F886 		 						; to the appropriate device according to bits 1,0 of IOBYTE
0303: F886 	3A0300	 	LDA		IOBYTE			; get i/o redirection byte
0304: F889 	CDDCF8	 	CALL 	SelectRoutine
0305: F88C 	38F9	 	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0306: F88E 	3EF9	 	DW		TerminalOutput		; 01
0307: F890 	44F9	 	DW		CommunicationOutput	; 10
0308: F892 	4AF9	 	DW		DummyOutput			; 11
0309: F894 		 	
0310: F894 		 LISTST:					; List Device (output) status
0311: F894 		 						; entered directly from the BIOS JMP Vector
0312: F894 		 						; returns in A the list device status that indicates
0313: F894 		 						; if the device will accept another character
0314: F894 		 						; the IOBYTE's bits 7,6 determin the physical device
0315: F894 		 						;
0316: F894 		 						; A = 00H (zero flag set): cannot accpet data
0317: F894 		 						; A = 0FFH ( zero flag cleared): can accept data
0318: F894 	CD9CF8	 	CALL	GetListStatus	; return  A = 0 or non-zero
0319: F897 		 	
0320: F897 	B7	 	ORA		A				; set flags
0321: F898 	C8	 	RZ						; exit if not ready
0322: F899 	3EFF	 	MVI		a,0FFH			; else set retuen value for ok
0323: F89B 	C9	 	RET	
0324: F89C 		 	; exit
0325: F89C 		 GetListStatus:
0326: F89C 	3A0300	 	LDA		IOBYTE
0327: F89F 	07	 	RLC						; move bits 7,6
0328: F8A0 	07	 	RLC						; to 1,0
0329: F8A1 	CDDCF8	 	CALL	SelectRoutine
0330: F8A4 	0BF9	 	DW		TTYOutStatus			; 00 <- IOBYTE bits 1,0
0331: F8A6 	11F9	 	DW		TerminalOutStatus		; 01
0332: F8A8 	17F9	 	DW		CommunicationOutStatus	; 10
0333: F8AA 	1DF9	 	DW		DummyOutStatus			; 11
0334: F8AC 		 	
0335: F8AC 		 LIST:					; List output
0336: F8AC 		 						; entered directly from the BIOS JMP Vector
0337: F8AC 		 						; outputs the data in Register C
0338: F8AC 	3A0300	 	LDA		IOBYTE
0339: F8AF 	07	 	RLC						; move bits 7,6
0340: F8B0 	07	 	RLC						; to 1,0
0341: F8B1 	CDDCF8	 	CALL	SelectRoutine
0342: F8B4 	38F9	 	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0343: F8B6 	3EF9	 	DW		TerminalOutput		; 01
0344: F8B8 	44F9	 	DW		CommunicationOutput	; 10
0345: F8BA 	4AF9	 	DW		DummyOutput			; 11
0346: F8BC 		 	
0347: F8BC 		 PUNCH:					; Punch output
0348: F8BC 		 						; entered directly from the BIOS JMP Vector
0349: F8BC 		 						; outputs the data in Register C
0350: F8BC 	3A0300	 	LDA		IOBYTE
0351: F8BF 	07	 	RLC						; move bits 5,4
0352: F8C0 	07	 	RLC
0353: F8C1 	07	 	RLC						; to 1,0
0354: F8C2 	CDDCF8	 	CALL	SelectRoutine
0355: F8C5 	38F9	 	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0356: F8C7 	4AF9	 	DW		DummyOutput			; 01
0357: F8C9 	44F9	 	DW		CommunicationOutput	; 10
0358: F8CB 	3EF9	 	DW		TerminalOutput		; 11
0359: F8CD 		 	
0360: F8CD 		 READER:					; Reader Input
0361: F8CD 		 						; entered directly from the BIOS JMP Vector
0362: F8CD 		 						; inputs data into the A register
0363: F8CD 	3A0300	 	LDA		IOBYTE
0364: F8D0 	07	 	RLC						; move bits 3,2  to 1,0
0365: F8D1 	CDDCF8	 	CALL	SelectRoutine
0366: F8D4 	38F9	 	DW		TTYOutput			; 00 <- IOBYTE bits 1,0
0367: F8D6 	4AF9	 	DW		DummyOutput			; 01
0368: F8D8 	44F9	 	DW		CommunicationOutput	; 10
0369: F8DA 	3EF9	 	DW		TerminalOutput		; 11
0370: F8DC 		 	
0371: F8DC 		 	
0372: F8DC 		 		; SelectRoutine
0373: F8DC 		 		; Transfer control to a specified address following its calling address
0374: F8DC 		 		; according to the values in bits 1, 0 in A.
0375: F8DC 		 		
0376: F8DC 		 SelectRoutine:
0377: F8DC 	07	 	RLC				; Shift select values into bits 2,1 in order to do word arithmetic
0378: F8DD 		 SelectRoutine21:	; entry point if bits already in 2,1
0379: F8DD 	E606	 	ANI		06H		; isolate bits 2 and 1
0380: F8DF 	E3	 	XTHL			; HL-> first word of address after CALL instruction
0381: F8E0 	5F	 	MOV		E,A		; Add on selection value to address table base
0382: F8E1 	1600	 	MVI		D,00H
0383: F8E3 	19	 	DAD		D		; HL-> now has the selected routine
0384: F8E4 	7E	 	MOV		A,M		; LS Byte
0385: F8E5 	23	 	INX		H		; HL-> MS byte
0386: F8E6 	66	 	MOV		H,M		; MS byte
0387: F8E7 	6F	 	MOV		L,A		; HL->routine
0388: F8E8 	E3	 	XTHL			; top of stack -> routine
0389: F8E9 	C9	 	RET				; transfer to selected routine
0390: F8EA 		 
0391: F8EA 		 	
0392: F8EA 		 ;------------------------- Input/Output Equates---------------------------------------
0393: F8EA 		 
0394: F8EA 		 TTYStatusPort				EQU	0EDH
0395: F8EA 		 TTYDataPort					EQU	0ECH
0396: F8EA 		 TTYOutputReady				EQU	01H		; Status Mask
0397: F8EA 		 TTYInputReady				EQU	02H		; Status Mask
0398: F8EA 		 
0399: F8EA 		 TerminalStatusPort			EQU	02H
0400: F8EA 		 TerminalDataPort			EQU	01H
0401: F8EA 		 TerminalOutputReady			EQU	80H		; Status Mask - ready for output
0402: F8EA 		 TerminalInputReady			EQU	07FH	; Status Mask - bytes yet to have been read
0403: F8EA 		 
0404: F8EA 		 CommunicationStatusPort		EQU	0EDH
0405: F8EA 		 CommunicationDataPort		EQU	0ECH
0406: F8EA 		 CommunicationOutputReady	EQU	01H		; Status Mask
0407: F8EA 		 CommunicationInputReady		EQU	02H		; Status Mask
0408: F8EA 		 
0409: F8EA 		 CommunicationBaudMode		EQU	0DFH
0410: F8EA 		 CommunicationBaudRate		EQU	0DEH
0411: F8EA 		 
0412: F8EA 		 TTYTable:
0413: F8EA 	ED	 		DB		TTYStatusPort
0414: F8EB 	EC	 		DB		TTYDataPort
0415: F8EC 	01	 		DB		TTYOutputReady
0416: F8ED 	02	 		DB		TTYInputReady
0417: F8EE 		 TerminalTable:
0418: F8EE 	02	 		DB		TerminalStatusPort
0419: F8EF 	01	 		DB		TerminalDataPort
0420: F8F0 	80	 		DB		TerminalOutputReady
0421: F8F1 	7F	 		DB		TerminalInputReady
0422: F8F2 		 CommunicationTable:
0423: F8F2 	ED	 		DB		CommunicationStatusPort
0424: F8F3 	EC	 		DB		CommunicationDataPort
0425: F8F4 	01	 		DB		CommunicationOutputReady
0426: F8F5 	02	 		DB		CommunicationInputReady
0427: F8F6 		 ;------------------------- Input/Output Equates---------------------------------------
0428: F8F6 		 
0429: F8F6 		 
0430: F8F6 		 ;590----------------------routines called by SelectRoutine----------------------------
0431: F8F6 		 TTYInStatus:
0432: F8F6 	21EAF8	 		LXI		H,TTYTable		;HL-> control table
0433: F8F9 	C34BF9	 		JMP		InputStatus		; use of JMP, InputStatus will execute thr RETurn
0434: F8FC 		 TerminalInStatus:
0435: F8FC 	21EEF8	 		LXI		H,TerminalTable	;HL-> control table
0436: F8FF 	C34BF9	 		JMP		InputStatus		; use of JMP, InputStatus will execute thr RETurn
0437: F902 		 CommunicationInStatus:
0438: F902 	21F2F8	 		LXI		H,CommunicationTable	;HL-> control table
0439: F905 	C34BF9	 		JMP		InputStatus		; use of JMP, InputStatus will execute thr RETurn
0440: F908 		 DummyInStatus:
0441: F908 	3EFF	 		MVI		A,0FFH			; Dummy always indicates data ready
0442: F90A 	C9	 		RET
0443: F90B 		 		
0444: F90B 		 TTYOutStatus:
0445: F90B 	21EAF8	 		LXI		H,TTYTable		;HL-> control table
0446: F90E 	C356F9	 		JMP		OutputStatus		; use of JMP, OutputStatus will execute thr RETurn
0447: F911 		 TerminalOutStatus:
0448: F911 	21EEF8	 		LXI		H,TerminalTable	;HL-> control table
0449: F914 	C356F9	 		JMP		OutputStatus		; use of JMP, OutputStatus will execute thr RETurn
0450: F917 		 CommunicationOutStatus:
0451: F917 	21F2F8	 		LXI		H,CommunicationTable	;HL-> control table
0452: F91A 	C356F9	 		JMP		OutputStatus		; use of JMP, OutputStatus will execute thr RETurn
0453: F91D 		 DummyOutStatus:
0454: F91D 	3EFF	 		MVI		A,0FFH			; Dummy always indicates ready to output data
0455: F91F 	C9	 		RET
0456: F920 		 
0457: F920 		 TTYInput:
0458: F920 	21EAF8	 		LXI		H,TTYTable		;HL-> control table
0459: F923 	C360F9	 		JMP		InputData		; use of JMP, InputStatus will execute thr RETurn
0460: F926 		 TerminalInput:
0461: F926 	21EEF8	 		LXI		H,TerminalTable	;HL-> control table
0462: F929 	CD60F9	 		CALL	InputData		;** special **
0463: F92C 	E67F	 		ANI		07FH			; Strip off high order bit
0464: F92E 	C9	 		RET	
0465: F92F 		 CommunicationInput:
0466: F92F 	21F2F8	 		LXI		H,CommunicationTable	;HL-> control table
0467: F932 	C360F9	 		JMP		InputData		; use of JMP, InputStatus will execute thr RETurn
0468: F935 		 DummyInput:
0469: F935 	3E1A	 		MVI		A,01AH			; Dummy always returns EOF
0470: F937 	C9	 		RET
0471: F938 		 		
0472: F938 		 TTYOutput:
0473: F938 	21EAF8	 		LXI		H,TTYTable		;HL-> control table
0474: F93B 	C370F9	 		JMP		OutputData		; use of JMP, InputStatus will execute thr RETurn
0475: F93E 		 TerminalOutput:
0476: F93E 	21EEF8	 		LXI		H,TerminalTable	;HL-> control table
0477: F941 	C370F9	 		JMP		OutputData		; use of JMP, InputStatus will execute thr RETurn
0478: F944 		 CommunicationOutput:
0479: F944 	21F2F8	 		LXI		H,CommunicationTable	;HL-> control table
0480: F947 	C370F9	 		JMP		OutputData		; use of JMP, InputStatus will execute thr RETurn
0481: F94A 		 DummyOutput:
0482: F94A 	C9	 		RET						; Dummy always discards the data
0483: F94B 		 
0484: F94B 		 ;680---------------------General purpose low-level drivers-------------------
0485: F94B 		 
0486: F94B 		 ; On entry, HL points to appropriate control table, for output Register C contains the data to output
0487: F94B 		 
0488: F94B 		 InputStatus:				; return- A = 00H no incoming data
0489: F94B 	7E	 		MOV		A,M			; get status port
0490: F94C 	3250F9	 		STA		InputStatusPort	;** self modifying code
0491: F94F 	DB	 		DB		INopCode		; IN opcode
0492: F950 		 InputStatusPort:
0493: F950 	00	 		DB		00H			; <- set from above
0494: F951 	23	 		INX		H			; move HL to point to input data mask
0495: F952 	23	 		INX		H
0496: F953 	23	 		INX		H
0497: F954 	A6	 		ANA		M			; mask with input status
0498: F955 	C9	 		RET
0499: F956 		 		
0500: F956 		 OutputStatus:				; return - A = 00H not ready
0501: F956 	7E	 		MOV		A,M
0502: F957 	325BF9	 		STA		OutputStatusPort
0503: F95A 	DB	 		DB		INopCode		; IN opcode
0504: F95B 		 OutputStatusPort:
0505: F95B 	00	 		DB		00H			; <- set from above
0506: F95C 	23	 		INX		H			;HL , Output status mask
0507: F95D 	23	 		INX		H
0508: F95E 	A6	 		ANA		M			; mask with output status
0509: F95F 	C9	 		RET
0510: F960 		 		
0511: F960 		 InputData:					; return with next character
0512: F960 	E5	 		PUSH	H			; save control table pointer
0513: F961 	CD4BF9	 		CALL	InputStatus
0514: F964 	E1	 		POP		H
0515: F965 	CA60F9	 		JZ		InputData	; wait until incoming data
0516: F968 	23	 		INX		H			; HL <- data port
0517: F969 	7E	 		MOV		A,M			; get data port
0518: F96A 	326EF9	 		STA		InputDataPort
0519: F96D 	DB	 		DB		INopCode
0520: F96E 		 InputDataPort:
0521: F96E 	00	 		DB		00H			; <- set from above
0522: F96F 	C9	 		RET
0523: F970 		 		
0524: F970 		 OutputData:					; data in Register C is output
0525: F970 	E5	 		PUSH	H			; save control table pointer
0526: F971 	CD56F9	 		CALL	OutputStatus
0527: F974 	E1	 		POP		H
0528: F975 	CA70F9	 		JZ		OutputData	; wait until incoming data
0529: F978 	23	 		INX		H			; HL <- data port
0530: F979 	7E	 		MOV		A,M			; get data port
0531: F97A 	327FF9	 		STA		OutputDataPort
0532: F97D 	79	 		MOV		A,C			; get the data to output
0533: F97E 	D3	 		DB		OUTopCode
0534: F97F 		 OutputDataPort:
0535: F97F 	00	 		DB		00H			; <- set from above
0536: F980 	C9	 		RET
0537: F981 		 		
0538: F981 		 ;746,795
0539: F981 		 ;  page 175 -----------------High Level Diskette drivers--------------------	
0540: F981 		 
0541: F981 		 
0542: F981 		 
0543: F981 		 					; listing starts on page 175/493 FIgure 6-4
0544: F981 		 					; in Programmers CPM Handbook by
0545: F981 		 					; Andy Johnston-Laird
0546: F981 		 
0547: F981 		 ;	ORG	0F981H	; Continue from bios.asm
0548: F981 		 ; PhysicalSectorSize	EQU	512			; for the 5.25" disk the 8" size is 128,
0549: F981 		 	
0550: F981 		 ; 					High level diskette drivers
0551: F981 		 ;
0552: F981 		 ;
0553: F981 		 ; These drivers perform the following functions:
0554: F981 		 ;
0555: F981 		 ; SELDSK		Select a specific disk and return the address of
0556: F981 		 ;				the appropriate disk parameter header
0557: F981 		 ; SETTRK		Set the track number for the next read or write
0558: F981 		 ; SETSEC		Set the sector number for the next read or write
0559: F981 		 ; SETDMA		Set the DMA (read/write) address for the next read or write
0560: F981 		 ; SECTRAN	Translate a logical sector number into a physical
0561: F981 		 ; HOME		Set the track to 0 so that the next read or write will
0562: F981 		 ;				be on Track 0
0563: F981 		 ;
0564: F981 		 ; In addition, the high-level drivers are responsible for making
0565: F981 		 ; the 5 1/4"" floppy diskettes that use a 512-byte sector appear
0566: F981 		 ; to CP/M as though they use a 128-byte sector. They do this
0567: F981 		 ; by using what is called blocking/de-blocking code,
0568: F981 		 ; described in more detail later in this listing.
0569: F981 		 ;
0570: F981 		 ;
0571: F981 		 ; 					Disk Parameter Tables
0572: F981 		 ;
0573: F981 		 ; As discussed in Chapter 3, these describe the physical
0574: F981 		 ; characteristics of the disk drives. In this example BIOS,
0575: F981 		 ; there are two types of disk drives: standard single-sided,
0576: F981 		 ; single-density 8", and double-sided, double-density 5 1/4"
0577: F981 		 ; diskettes.
0578: F981 		 ;
0579: F981 		 ; The standard 8" diskettes do not need the blocking/de-blocking
0580: F981 		 ; code, but the 5 1/4" drives do. Therefore an additional
0581: F981 		 ; byte has been prefixed to the disk parameter block to
0582: F981 		 ; tell the disk drivers each logical disk's physical
0583: F981 		 ; diskette type, and whether or not it needs de-blocking.
0584: F981 		 ;
0585: F981 		 ;
0586: F981 		 ; 					Disk Definition Tables
0587: F981 		 ;
0588: F981 		 ; These consists of disk parameter headers, with one entry
0589: F981 		 ; per logical disk driver, and disk parameter blocks, with
0590: F981 		 ; either one parameter block per logical disk or the same
0591: F981 		 ; parameter block for several logical disks.
0592: F981 		 ;
0593: F981 		 DiskParameterHeaders:		; described in chapter 3
0594: F981 		 
0595: F981 		 		; Logical Disk A: (5 1/4" Diskette)
0596: F981 	6BFB	 	DW	Floppy5SkewTable	; 5 1/4" skew table
0597: F983 	0000000081F9	 	DW	0,0,0F981H			; reserved for CP/M
0598: F989 	C1F9	 	DW	DirectoryBuffer
0599: F98B 	42FA	 	DW	Floppy5ParameterBlock
0600: F98D 	61FA	 	DW	DiskAWorkArea
0601: F98F 	C1FA	 	DW	DiskAAllocationVector
0602: F991 		 	
0603: F991 		 		; Logical Disk B: (5 1/4" Diskette)
0604: F991 	6BFB	 	DW	Floppy5SkewTable	; shares the same skew table as A:
0605: F993 	0000000081F9	 	DW	0,0,0F981H			; reserved for CP/M
0606: F999 	C1F9	 	DW	DirectoryBuffer		; all disks use this buffer
0607: F99B 	42FA	 	DW	Floppy5ParameterBlock
0608: F99D 	81FA	 	DW	DiskBWorkArea
0609: F99F 	D7FA	 	DW	DiskBAllocationVector
0610: F9A1 		 	
0611: F9A1 		 		; Logical Disk C: (8" Floppy)
0612: F9A1 	B3FB	 	DW	Floppy8SkewTable	; 8" skew table
0613: F9A3 	0000000081F9	 	DW	0,0,0F981H			; reserved for CP/M
0614: F9A9 	C1F9	 	DW	DirectoryBuffer		; all disks use this buffer
0615: F9AB 	52FA	 	DW	Floppy8ParameterBlock
0616: F9AD 	A1FA	 	DW	DiskCWorkArea
0617: F9AF 	EDFA	 	DW	DiskCAllocationVector
0618: F9B1 		 	
0619: F9B1 		 		; Logical Disk D: (8" Floppy)
0620: F9B1 	6BFB	 	DW	Floppy5SkewTable	; shares the same skew table as A:
0621: F9B3 	0000000081F9	 	DW	0,0,0F981H			; reserved for CP/M
0622: F9B9 	C1F9	 	DW	DirectoryBuffer		; all disks use this buffer
0623: F9BB 	52FA	 	DW	Floppy8ParameterBlock
0624: F9BD 	B1FA	 	DW	DiskDWorkArea
0625: F9BF 	0CFB	 	DW	DiskDAllocationVector
0626: F9C1 		 	
0627: F9C1 		 DirectoryBuffer:	DS	128
0628: FA41 		 
0629: FA41 		 	; Disk Types
0630: FA41 		 Floppy5		EQU		1 		; 5 1/4" mini floppy
0631: FA41 		 Floppy8 	EQU		2 		; 8"  floppy (SS SD)
0632: FA41 		 
0633: FA41 		 	; blocking/de-blocking indicator
0634: FA41 		 NeedDeblocking	EQU 	080H	; Sector size > 128 bytes
0635: FA41 		 
0636: FA41 		 
0637: FA41 		 	; Disk Parameter Blocks
0638: FA41 		 	
0639: FA41 		 	; 5 1/4" mini floppy
0640: FA41 		 							; extra byte prefixed to indicate 
0641: FA41 		 							; disk type and blocking required
0642: FA41 	81	 	DB	Floppy5 + NeedDeblocking
0643: FA42 		 	
0644: FA42 		 Floppy5ParameterBlock:
0645: FA42 	4800	 	DW	048H				; 128-byte sectors per track
0646: FA44 	31	 	DB	49					; Block shift
0647: FA45 	0F	 	DB	15 					; Block mask
0648: FA46 	01	 	DB	01 					; Extent mask
0649: FA47 	AE00	 	DW	174 				; Maximum allocation block number
0650: FA49 	7F00	 	DW	127 				; Number of directory entries - 1
0651: FA4B 	C0	 	DB	0C0H				; Bit map for reserving 1 alloc. block
0652: FA4C 	00	 	DB	00					;  for file directory
0653: FA4D 	2000	 	DW	020H				;Disk change work area size
0654: FA4F 	0100	 	DW	01					; Number of tracks before directory
0655: FA51 		 	
0656: FA51 		 	; Standard 8" floppy
0657: FA51 		 							; extra byte prefixed to DPB for 
0658: FA51 		 							;  this version of the BIOS
0659: FA51 	02	 	DB	Floppy8				; Indicates disk type and the fact
0660: FA52 		 							;   that no de-blocking is required
0661: FA52 		 	
0662: FA52 		 Floppy8ParameterBlock:
0663: FA52 	1A00	 	DW	01AH				; sectors per track
0664: FA54 	03	 	DB	03					; Block shift
0665: FA55 	07	 	DB	07					; Block mask
0666: FA56 	00	 	DB	00 					; Extent mask
0667: FA57 	F200	 	DW	242 				; Maximum allocation block number
0668: FA59 	3F00	 	DW	63	 				; Number of directory entries - 1
0669: FA5B 	C0	 	DB	0C0H				; Bit map for reserving 2 alloc. block
0670: FA5C 	00	 	DB	00					;  for file directory
0671: FA5D 	1000	 	DW	010H				;Disk change work area size
0672: FA5F 	0200	 	DW	02					; Number of tracks before directory
0673: FA61 		 	
0674: FA61 		 			; Disk work area
0675: FA61 		 	
0676: FA61 		 	; These are used by the BDOS to detect any unexpected
0677: FA61 		 	; change of diskette. The BDOS will automatically set
0678: FA61 		 	; such a changed diskette to read-only status.
0679: FA61 		 	
0680: FA61 		 DiskAWorkArea:	DS	020H		; A:
0681: FA81 		 DiskBWorkArea:	DS	020H		; B:
0682: FAA1 		 DiskCWorkArea:	DS	010H		; C:
0683: FAB1 		 DiskDWorkArea:	DS	010H		; D:
0684: FAC1 		 
0685: FAC1 		 	
0686: FAC1 		 			; Disk allocation vectors
0687: FAC1 		 			
0688: FAC1 		 		; These are used by the BDOS to maintain a bit map of
0689: FAC1 		 		; which allocation blocks are used and which are free.
0690: FAC1 		 		; One byte is used for eight allocation blocks, hence the
0691: FAC1 		 		; expression of the form (allocation blocks/8)+1
0692: FAC1 		 
0693: FAC1 		 DiskAAllocationVector:	DS		(174/8)+1 	; A:
0694: FAD7 		 DiskBAllocationVector:	DS		(174/8)+1 	; B:
0695: FAED 		 	
0696: FAED 		 DiskCAllocationVector:	DS		(242/8)+1 	; C:
0697: FB0C 		 DiskDAllocationVector:	DS		(242/8)+1 	; A:
0698: FB2B 		 	
0699: FB2B 		 NumberOfLogicalDisks:	EQU 4
0700: FB2B 		 
0701: FB2B 		 
0702: FB2B 		 		;  Disk routines
0703: FB2B 		 		
0704: FB2B 		 ;**********************
0705: FB2B 		 ;SELDSK - Select disk in C. C=0 for A: 1 for B: etc.
0706: FB2B 		 ;  Return the address of the appropriate disk parameter header
0707: FB2B 		 ;  in HL, or 0000H if selected disk does not exist		
0708: FB2B 		 ;**********************	
0709: FB2B 		 SELDSK:
0710: FB2B 	210000	 	LXI		H,00H		; Assume an error
0711: FB2E 	79	 	MOV		A,C 		; Check if  requested disk is valid
0712: FB2F 	FEFB2B	 	CPI		NumberOfLogicalDisks
0713: FB31 	D0	 	RNC					; return if > max number of Disks
0714: FB32 		 	
0715: FB32 	32EAFB	 	STA		SelectedDisk	; save disk number
0716: FB35 	6F	 	MOV		L,A			; make disk into word number
0717: FB36 	2600	 	MVI		H,0
0718: FB38 		 						; Compute offset down disk parameter
0719: FB38 		 						; table by multiplying by parameter
0720: FB38 		 						; header length (16 bytes)
0721: FB38 	29	 	DAD		H
0722: FB39 	29	 	DAD		H
0723: FB3A 	29	 	DAD		H
0724: FB3B 	29	 	DAD		H			; pointing at right one
0725: FB3C 	1181F9	 	LXI		D,DiskParameterHeaders		; get base address
0726: FB3F 	19	 	DAD		D			; DE -> appropriate DPH
0727: FB40 	E5	 	PUSH	H			; save DPH address
0728: FB41 		 						; access disk parameter block to
0729: FB41 		 						; extract special prefix byte that
0730: FB41 		 						; identifies disk type and whether
0731: FB41 		 						; de-blocking is required
0732: FB41 	110A00	 	LXI		D,10		; Get DPB pointer offset in DPH
0733: FB44 	19	 	DAD		D			; DE -> DPB address
0734: FB45 	5E	 	MOV		E,M			; Get DPB address in DE
0735: FB46 	23	 	INX		H
0736: FB47 	56	 	MOV		D,M	
0737: FB48 	EB	 	XCHG				; DE ->DPB
0738: FB49 	2B	 	DCX		H			; DE -> prefix byte
0739: FB4A 	7E	 	MOV		A,M			; get prefix byte
0740: FB4B 	E60F	 	ANI		0FH			; isolate disk type
0741: FB4D 	32FAFB	 	STA		DiskType	; save for use in low level driver
0742: FB50 	7E	 	MOV		A,M			; get another copy
0743: FB51 	E680	 	ANI		NeedDeblocking
0744: FB53 	32F9FB	 	STA		DeblockingRequired	; save for low level driver
0745: FB56 	E1	 	POP		H			; recover DPH pointer
0746: FB57 	C9	 	RET
0747: FB58 		 
0748: FB58 		 ;**********************	
0749: FB58 		 ;SETTRK - Set logical track for next read or write
0750: FB58 		 ;		Track is in BC
0751: FB58 		 ;**********************	
0752: FB58 		 SETTRK:
0753: FB58 	60	 	MOV		H,B					; select track in BC on entry
0754: FB59 	69	 	MOV		L,C
0755: FB5A 	22EBFB	 	SHLD	SelectedTrack		; save for low level driver	
0756: FB5D 	C9	 	RET
0757: FB5E 		 	
0758: FB5E 		 ;**********************	
0759: FB5E 		 ;SETSEC - Set logical sector for next read or write
0760: FB5E 		 ;		Sector is in C
0761: FB5E 		 ;**********************
0762: FB5E 		 SETSEC:
0763: FB5E 	79	 	MOV		A,C
0764: FB5F 	32EDFB	 	STA		SelectedSector		; save for low level driver	
0765: FB62 	C9	 	RET
0766: FB63 		 	
0767: FB63 		 ;**********************
0768: FB63 		 ;SetDMA - Set DMA (input/output) address for next read or write
0769: FB63 		 ;       Address in BC
0770: FB63 		 ;**********************
0771: FB63 	0000	 DMAAddress:	DW	0		; DMA address
0772: FB65 		 SETDMA:
0773: FB65 	69	 	MOV		L,C					; select address in BC on entry
0774: FB66 	60	 	MOV		H,B
0775: FB67 	2263FB	 	SHLD	DMAAddress		; save for low level driver	
0776: FB6A 	C9	 	RET
0777: FB6B 		 	
0778: FB6B 		 			; Translate logical sector number to physical
0779: FB6B 		 			
0780: FB6B 		 			; Sector translation tables
0781: FB6B 		 			; These tables are indexed using the logical sector number
0782: FB6B 		 			; and contain the corresponding physical sector number
0783: FB6B 		 
0784: FB6B 		 
0785: FB6B 		 ;**********************
0786: FB6B 		 ;	Skew tables
0787: FB6B 		 ;**********************
0788: FB6B 		 
0789: FB6B 		 Floppy5SkewTable:			; each physical sector contains four
0790: FB6B 		 							;  128-byte sectors
0791: FB6B 		 							
0792: FB6B 		 ;	,		Physical 128b 	Logical 128b	Physical 512-byte
0793: FB6B 	00010203	 	DB		00,01,02,03		;00,01,02,03				0	)
0794: FB6F 	10111213	 	DB		16,17,18,19		;04,05,06,07				4	)
0795: FB73 	20212223	 	DB		32,33,34,35		;08,09,10,11				8	)
0796: FB77 	0C0D0E0F	 	DB		12,13,14,15		;12,13,14,15				3	)Head
0797: FB7B 	1C1D1E1F	 	DB		28,29,30,31		;16,17,18,19				7	) 0
0798: FB7F 	08090A0B	 	DB		08,09,10,11		;20,21,22,23				2	)
0799: FB83 	18191A1B	 	DB		24,25,26,27		;24,25,26,27				6	)
0800: FB87 	04050607	 	DB		04,05,06,07		;28,29,30,31				1	)
0801: FB8B 	14151617	 	DB		20,21,22,23		;32,33,34,35				5	)
0802: FB8F 		 	
0803: FB8F 	24252627	 	DB		36,37,38,39		;36,37,38,39				0	]
0804: FB93 	34353637	 	DB		52,53,54,55		;40,41,42,43				4	]
0805: FB97 	44454647	 	DB		68,69,70,71		;44,45,46,47				8	]
0806: FB9B 	30313233	 	DB		48,49,50,51		;48,49,50,51				3	]Head
0807: FB9F 	40414243	 	DB		64,65,66,67		;52,53,54,55				7	] 0
0808: FBA3 	2C2D2E2F	 	DB		44,45,46,47		;56,57,58,59				2	]
0809: FBA7 	3C3D3E3F	 	DB		60,61,62,63		;60,61,62,63				6	]
0810: FBAB 	28292A2B	 	DB		40,41,42,43		;63,65,66,67				1	]
0811: FBAF 	38393A3B	 	DB		56,57,58,59		;68,69,70,71				5	]
0812: FBB3 		 	
0813: FBB3 		 Floppy8SkewTable:			; Standard 8" Driver
0814: FBB3 		 	;		01,02,03,04,05,06,07,08,09,10		; Logical Sectors
0815: FBB3 	01070D1319050B111703	 	DB		01,07,13,19,25,05,11,17,23,03		; Physical Sectors
0816: FBBD 		 	
0817: FBBD 		 	;		11,12,13,14,15,16,17,18,19,20		; Logical Sectors	
0818: FBBD 	090F1502080E141A060C	 	DB		09,15,21,02,08,14,20,26,06,12		; Physical Sectors
0819: FBC7 		 	
0820: FBC7 		 	;		21,22,23,24,25,26					; Logical Sectors	
0821: FBC7 	1218040A1016	 	DB		18,24,04,10,16,22					; Physical Sectors
0822: FBCD 		 	
0823: FBCD 		 ;**********************
0824: FBCD 		 ;SECTRAN - Translate logical sector to physical
0825: FBCD 		 ;	on Entry:	BC= logical sector number
0826: FBCD 		 ;				DE-> appropriate skew table
0827: FBCD 		 ;	on Exit:	HL = physical sector number
0828: FBCD 		 ;**********************
0829: FBCD 		 SECTRAN:
0830: FBCD 	EB	 	XCHG			;HL -> skew table base
0831: FBCE 	09	 	DAD		B		; Add on logical sector number
0832: FBCF 	6E	 	MOV		L,M		; Get physical sector number
0833: FBD0 	2600	 	MVI		H,00H	; make into a word
0834: FBD2 	C9	 	RET
0835: FBD3 		 	
0836: FBD3 		 ;**********************
0837: FBD3 		 ;HOME - Home the selected logical disk to track 0.
0838: FBD3 		 ;	Before doing this, a check must be made to see if the
0839: FBD3 		 ;	physical disk buffer has information that must be
0840: FBD3 		 ;	written out. This is indicated by a flag, MustWriteBuffer,
0841: FBD3 		 ;	set in the de-blocking code
0842: FBD3 		 ;**********************	
0843: FBD3 		 HOME:
0844: FBD3 	3AE9FB	 	LDA		MustWriteBuffer		; check flag
0845: FBD6 	B7	 	ORA		A
0846: FBD7 	C2DDFB	 	JNZ		HomeNoWrite
0847: FBDA 	32E8FB	 	STA		DataInDiskBuffer	; no, so indicate empty buffer
0848: FBDD 		 HomeNoWrite:
0849: FBDD 	0E00	 	MVI		C,00H				; Set to track 0
0850: FBDF 	CD58FB	 	CALL	SETTRK				; no, physical, only logical
0851: FBE2 	C9	 	RET
0852: FBE3 		 
0853: FBE3 		 ;*******************************************************************************
0854: FBE3 		 ;					 More tables
0855: FBE3 		 ; Data written to or read from the mini-floppy drive is transferred via a
0856: FBE3 		 ; physical buffer that is actually 512 bytes long (it was declared at the front
0857: FBE3 		 ; of the BIOS and holds the "one-time" initialization code used for the
0858: FBE3 		 ; cold boot procedure.)
0859: FBE3 		 ;
0860: FBE3 		 ; The blocking/de-blocking code attempts to minimize the amount of actual
0861: FBE3 		 ; disk I/O by storing the disk,track, and physical sector currently residing
0862: FBE3 		 ; in the Physical Buffer. If a read request is for a 128 byte CP/M "sector"
0863: FBE3 		 ; that is already in the physical buffer, then no disk access occurs
0864: FBE3 		 ;*******************************************************************************
0865: FBE3 		 AllocationBlockSize		EQU		0800H		; 2048
0866: FBE3 		 PhysicalSecPerTrack		EQU		012H		; 18
0867: FBE3 		 CPMSecPerPhysical		EQU		PhysicalSectorSize/128
0868: FBE3 		 CPMSecPerTrack			EQU		CPMSecPerPhysical * PhysicalSecPerTrack
0869: FBE3 		 SectorMask				EQU		CPMSecPerPhysical - 1
0870: FBE3 		 SectorBitShift			EQU		02H			; LOG2(CPMSecPerPhysical)
0871: FBE3 		 
0872: FBE3 		 ;*******************************************************************************
0873: FBE3 		 ; These are the values handed over by the BDOS when it calls the Writer operation
0874: FBE3 		 ; The allocated.unallocated indicates whether the BDOS is set to write to an
0875: FBE3 		 ; unallocated allocation block (it only indicates this for the first 128 byte
0876: FBE3 		 ; sector write) or to an allocation block that has already been allocated to a
0877: FBE3 		 ; file. The BDOS also indicates if it is set to write to the file directory
0878: FBE3 		 ;*******************************************************************************
0879: FBE3 		 WriteAllocated			EQU		00H
0880: FBE3 		 WriteDirectory			EQU		01H
0881: FBE3 		 WriteUnallocated		EQU		02H
0882: FBE3 		 
0883: FBE3 	00	 WriteType:				DB		00H		; The type of write indicated by BDOS
0884: FBE4 		 
0885: FBE4 		 	;       variables for physical sector
0886: FBE4 		 	; These are moved and compared as a group, DO NOT ALTER
0887: FBE4 		 InBufferDkTrkSec:
0888: FBE4 	00	 InBufferDisk:			DB		00H
0889: FBE5 	0000	 InBufferTrack:			DW		00H
0890: FBE7 	00	 InBufferSector:			DB		00H
0891: FBE8 		 
0892: FBE8 	00	 DataInDiskBuffer:		DB		00H		; when non-zero, the disk buffer has data from disk
0893: FBE9 		 
0894: FBE9 	00	 MustWriteBuffer:		DB		00H		; Non-zero when data has been written into DiskBuffer,
0895: FBEA 		 										;	but not yet written out to the disk
0896: FBEA 		 										
0897: FBEA 		 	;     variables for selected disk, track and sector
0898: FBEA 		 	; These are moved and compared as a group, DO NOT ALTER
0899: FBEA 		 SelectedDkTrkSec:
0900: FBEA 	00	 SelectedDisk:			DB		00H
0901: FBEB 	0000	 SelectedTrack:			DW		00H
0902: FBED 	00	 SelectedSector:			DB		00H
0903: FBEE 		 
0904: FBEE 		 	;Selected physical sector derived from selected (CP/M) sector by shifting it
0905: FBEE 		 	;	right the number of of bits specified by SectorBitShift
0906: FBEE 	00	 SelectedPhysicalSector:	DB		00H
0907: FBEF 		 
0908: FBEF 	00	 SelectedDiskType:		DB		00H		; Set by SELDSK to indicate either , 8" or 5 1/4" floppy 
0909: FBF0 	00	 SelectedDiskDeblock:	DB		00H		; Set by SELDSK to indicate whether de-blocking is required
0910: FBF1 		 
0911: FBF1 		 	; Parameters for writing to a previously unallocated allocation block
0912: FBF1 		 	; These are moved and compared as a group, DO NOT ALTER
0913: FBF1 		 UnallocatedDkTrkSec:
0914: FBF1 	00	 UnallocatedDisk:		DB		00H
0915: FBF2 	0000	 UnallocatedTrack:		DW		00H
0916: FBF4 	00	 UnallocatedSector:		DB		00H
0917: FBF5 	00	 UnalocatedlRecordCount:	DB		00H		; Number of unallocated "records"in current previously unallocated allocation block.
0918: FBF6 		 
0919: FBF6 	00	 DiskErrorFlag:			DB		00H		; Non-Zero - unrecoverable error output "Bad Sector" message
0920: FBF7 		 
0921: FBF7 		 	; Flags used inside the de-blocking code
0922: FBF7 	00	 MustPrereadSector:		DB		00H		; non-zero if physical sector must be read into the disk buffer
0923: FBF8 		 										; either before a write to a allocated block can occur, or
0924: FBF8 		 										; for a normal CP/M 128 byte sector read
0925: FBF8 	00	 ReadOperation:			DB		00H		; Non-zero when a CP/M 128 byte sector is to be read
0926: FBF9 	00	 DeblockingRequired:		DB		00H		; Non-zero when the selected disk needs de-blocking (set in SELDSK)
0927: FBFA 	00	 DiskType:				DB		00H		; Indicate 8" or 5 1/4" selected  (set in SELDSK)
0928: FBFB 		 
0929: FBFB 		 ; 180/493
0930: FBFB 		 
0931: FBFB 		 ;************************************************************************************************
0932: FBFB 		 ;        READ
0933: FBFB 		 ; Read in the 128-byte CP/M sector specified by previous calls to select disk and to set track  and 
0934: FBFB 		 ; sector. The sector will be read into the address specified in the previous call to set DMA address
0935: FBFB 		 ;
0936: FBFB 		 ; If reading from a disk drive using sectors larger than 128 bytes, de-blocking code will be used
0937: FBFB 		 ; to unpack a 128-byte sector from  the physical sector. 
0938: FBFB 		 ;************************************************************************************************
0939: FBFB 		 READ:
0940: FBFB 	3AF9FB	 		LDA		DeblockingRequired
0941: FBFE 	B7	 		ORA		A
0942: FBFF 	CA52FD	 		JZ		ReadNoDeblock			; if 0 use normal non-blocked read
0943: FC02 		 ; The de-blocking algorithm used is such that a read operation can be viewed UP until the actual
0944: FC02 		 ; data transfer as though it was the first write to an unallocated allocation block. 
0945: FC02 	AF	 		XRA		A					; set record count to 0
0946: FC03 	32F5FB	 		STA		UnalocatedlRecordCount
0947: FC06 	3C	 		INR		A
0948: FC07 	32F8FB	 		STA		ReadOperation			; Indicate that this is a read
0949: FC0A 	32F7FB	 		STA		MustPreReadSector		; force pre-read
0950: FC0D 	3E02	 		MVI		A,WriteUnallocated		; fake de-blocking code into responding as if this
0951: FC0F 	32E3FB	 		STA		WriteType				;  is the first write to an unallocated allocation block
0952: FC12 	C36EFC	 		JMP		PerformReadWrite		; use common code to execute read
0953: FC15 		 		
0954: FC15 		 ;************************************************************************************************
0955: FC15 		 ;		WRITE
0956: FC15 		 ;Write a 128-byte sector from the current DMA address to the previously $elected disk, track, and sector.
0957: FC15 		 ;
0958: FC15 		 ; On arrival here, the BOOS will have set register C to indicate whether this write operation is to
0959: FC15 		 ; an already allocated allocation block (which means a pre-read of the sector may be needed),
0960: FC15 		 ; to the directory (in which case the data will be written to the disk immediately),
0961: FC15 		 ; or to the first 128-byte sector of a previously unallocated allocation block (In which case no pre-read is required).
0962: FC15 		 
0963: FC15 		 ; Only writes to the directory take place immediately. In all other cases, the data will be moved
0964: FC15 		 ; from the DMA address into the disk buffer, and only written out when circumstance, force the transfer.
0965: FC15 		 ; The number of physical disk operations can therefore be reduced considerably.
0966: FC15 		 ;************************************************************************************************
0967: FC15 		 WRITE:
0968: FC15 	3AF9FB	 		LDA		DeblockingRequired
0969: FC18 	B7	 		ORA		A
0970: FC19 	CA4DFD	 		JZ		WriteNoDeblock			; if 0 use normal non-blocked write
0971: FC1C 		 
0972: FC1C 	AF	 		XRA		A
0973: FC1D 	32F8FB	 		STA		ReadOperation			; its a write (Not a read)
0974: FC20 	79	 		MOV		A,C
0975: FC21 	32E3FB	 		STA		WriteType				; save the BDOS write type
0976: FC24 	FE02	 		CPI		WriteUnallocated		; first write to an unallocated allocation block ?
0977: FC26 	C237FC	 		JNZ		CheckUnallocatedBlock	; No, - in the middle of writing to an unallocated block ?
0978: FC29 		 										; Yes, first write to unallocated allocation block. Initialize
0979: FC29 		 										; variables associated with unallocated writes
0980: FC29 	3E10	 		MVI		A,AllocationBlockSize/ 128	; Number of 128 byte sectors
0981: FC2B 	32F5FB	 		STA		UnalocatedlRecordCount
0982: FC2E 	21EAFB	 		LXI		H,SelectedDkTrkSec		; copy disk, track & sector into unallocated variables
0983: FC31 	11F1FB	 		LXI		D,UnallocatedDkTrkSec
0984: FC34 	CD35FD	 		CALL 	MoveDkTrkSec
0985: FC37 		 		
0986: FC37 		 	; Check if this is not the first write to an unallocated allocation block -- if it is,
0987: FC37 		 	; the unallocated record count has just been set to the number of 128-byte sectors in the allocation block
0988: FC37 		 CheckUnallocatedBlock:
0989: FC37 	3AF5FB	 		LDA		UnalocatedlRecordCount
0990: FC3A 	B7	 		ORA		A
0991: FC3B 	CA66FC	 		JZ		RequestPreread			; No - write to an unallocated block
0992: FC3E 	3D	 		DCR		A						; decrement 128 byte sectors left
0993: FC3F 	32F5FB	 		STA		UnalocatedlRecordCount
0994: FC42 		 		
0995: FC42 	21EAFB	 		LXI		H,SelectedDkTrkSec		; same Disk, Track & sector as for those in an unallocated block
0996: FC45 	11F1FB	 		LXI		D,UnallocatedDkTrkSec
0997: FC48 	CD29FD	 		CALL	CompareDkTrkSec			; are they the same
0998: FC4B 	C266FC	 		JNZ		RequestPreread			; NO - do a pre-read
0999: FC4E 		 										;Compare$DkSTrkSec  returns with  DE -> Unallocated$Sector , HL -> UnallocatedSSector 
1000: FC4E 	EB	 		XCHG
1001: FC4F 	34	 		INR	M
1002: FC50 	7E	 		MOV		A,M
1003: FC51 	FE48	 		CPI		CPMSecPerTrack			; Sector > maximum on track ?
1004: FC53 	DA5FFC	 		JC		NoTrackChange			; No ( A < M)
1005: FC56 	3600	 		MVI		M,00H					; Yes
1006: FC58 	2AF2FB	 		LHLD	UnallocatedTrack
1007: FC5B 	23	 		INX		H						; increment track 
1008: FC5C 	22F2FB	 		SHLD	UnallocatedTrack
1009: FC5F 		 NoTrackChange:
1010: FC5F 	AF	 		XRA		A
1011: FC60 	32F7FB	 		STA		MustPrereadSector		; clear flag
1012: FC63 	C36EFC	 		JMP		PerformReadWrite
1013: FC66 		 RequestPreread:
1014: FC66 	AF	 		XRA		A
1015: FC67 	32F5FB	 		STA		UnalocatedlRecordCount	; not a write into an unallocated block
1016: FC6A 	3C	 		INR		A
1017: FC6B 	32F7FB	 		STA		MustPrereadSector		; set flag
1018: FC6E 		 ;*******************************************************
1019: FC6E 		 ; Common code to execute both reads and writes of 128-byte sectors	
1020: FC6E 		 ;*******************************************************	
1021: FC6E 		 PerformReadWrite:
1022: FC6E 	AF	 		XRA		A				; Assume no disk error will occur
1023: FC6F 	32F6FB	 		STA		DiskErrorFlag
1024: FC72 	3AEDFB	 		LDA		SelectedSector
1025: FC75 	1F	 		RAR						; Convert selected 128-byte sector
1026: FC76 	1F	 		RAR						; into physical sector by dividing by 4
1027: FC77 	E63F	 		ANI		03FH			; remove unwanted bits
1028: FC79 	32EEFB	 		STA		SelectedPhysicalSector
1029: FC7C 	21E8FB	 		LXI		H,DataInDiskBuffer	; see if there is any data here ?
1030: FC7F 	7E	 		MOV		A,M
1031: FC80 	3601	 		MVI		M,001H				; force there is data
1032: FC82 	B7	 		ORA		A					; any data here ?
1033: FC83 	CAA3FC	 		JZ		ReadSectorIntoBuffer	; NO - go read into buffer
1034: FC86 		 ;
1035: FC86 		 ;The buffer does have a physical sector in it.
1036: FC86 		 ; Note: The disk. track. and PHYSICAL sector in the buffer need to be checked,
1037: FC86 		 ; hence the use of the CompareDkTrk subroutine
1038: FC86 		 ;
1039: FC86 	11E4FB	 		LXI		D,InBufferDkTrkSec
1040: FC89 	21EAFB	 		LXI		H,SelectedDkTrkSec	; is it the same 
1041: FC8C 	CD24FD	 		CALL	CompareDkTrk		;    Disk and Track as selected ?
1042: FC8F 	C29CFC	 		JNZ		SectorNotInBuffer	; NO, it must be read
1043: FC92 		 ; it is in the buffer
1044: FC92 	3AE7FB	 		LDA		InBufferSector		; get the sector
1045: FC95 	21EEFB	 		LXI		H,SelectedPhysicalSector
1046: FC98 	BE	 		CMP		M					; Check if correct physical sector
1047: FC99 	CAB1FC	 		JZ		SectorInBuffer		; Yes - it is already in memory
1048: FC9C 		 		
1049: FC9C 		 ; No, it will have to be read in over current contents of buffer
1050: FC9C 		 SectorNotInBuffer:
1051: FC9C 	3AE9FB	 		LDA		MustWriteBuffer
1052: FC9F 	B7	 		ORA		A					; do we need to write ?
1053: FCA0 	C495FD	 		CNZ		WritePhysical		; Yes - write it out
1054: FCA3 		 
1055: FCA3 		 ReadSectorIntoBuffer:
1056: FCA3 	CD11FD	 		CALL	SetInBufferDkTrkSector
1057: FCA6 	3AF7FB	 		LDA		MustPrereadSector	; do we need to pre-read
1058: FCA9 	B7	 		ORA		A
1059: FCAA 	C49AFD	 		CNZ		ReadPhysical		; yes - pre-read the sector
1060: FCAD 	AF	 		XRA		A					; reset the flag
1061: FCAE 	32E9FB	 		STA		MustWriteBuffer
1062: FCB1 		 		
1063: FCB1 		 ; Selected sector on correct track and  disk is already 1n the buffer.
1064: FCB1 		 ; Convert the selected CP/M(128-byte sector into relative address down the buffer. 
1065: FCB1 		 SectorInBuffer:
1066: FCB1 	3AEDFB	 		LDA		SelectedSector
1067: FCB4 	E603	 		ANI		SectorMask			; only want the least bits
1068: FCB6 	6F	 		MOV		L,A
1069: FCB7 	2600	 		MVI		H,00H				; Multiply by 128
1070: FCB9 	29	 		DAD		H					; *2
1071: FCBA 	29	 		DAD		H					; *4
1072: FCBB 	29	 		DAD		H					; *8
1073: FCBC 	29	 		DAD		H					; *16
1074: FCBD 	29	 		DAD		H					; *32
1075: FCBE 	29	 		DAD		H					; *64
1076: FCBF 	29	 		DAD		H					; *128
1077: FCC0 	1133F6	 		LXI		D,DiskBuffer
1078: FCC3 	19	 		DAD		D					; HL -> 128-byte sector number start address
1079: FCC4 	EB	 		XCHG						; DE -> sector in the disk buffer
1080: FCC5 	2A63FB	 		LHLD	DMAAddress			; Get DMA address (set in SETDMA)
1081: FCC8 	EB	 		XCHG						; assume a read so :
1082: FCC9 		 									; DE -> DMA Address & HL -> sector in disk buffer
1083: FCC9 	0E10	 		MVI		C,128/8				; 8 bytes per move (loop count)
1084: FCCB 		 ;
1085: FCCB 		 ;  At this point -
1086: FCCB 		 ;	C	->	loop count
1087: FCCB 		 ;	DE	->	DMA address
1088: FCCB 		 ;	HL	->	sector in disk buffer
1089: FCCB 		 ;
1090: FCCB 	3AF8FB	 		LDA		ReadOperation		; Move into or out of buffer /
1091: FCCE 	B7	 		ORA		A
1092: FCCF 	C2D7FC	 		JNZ		BufferMove			; Move out of buffer
1093: FCD2 		 		
1094: FCD2 	3C	 		INR		A					; going to force a write
1095: FCD3 	32E9FB	 		STA		MustWriteBuffer
1096: FCD6 	EB	 		XCHG						; DE <--> HL
1097: FCD7 		 		
1098: FCD7 		 ;The following move loop moves eight bytes at a time from (HL> to (DE), C contains the loop count
1099: FCD7 		 BufferMove:
1100: FCD7 	7E	 		MOV		A,M					; Get byte from source
1101: FCD8 	12	 		STAX	D					; Put into destination
1102: FCD9 	13	 		INX		D					; update pointers
1103: FCDA 	23	 		INX		H
1104: FCDB 		 		
1105: FCDB 	7E	 		MOV		A,M					; Get byte from source
1106: FCDC 	12	 		STAX	D					; Put into destination
1107: FCDD 	13	 		INX		D					; update pointers
1108: FCDE 	23	 		INX		H
1109: FCDF 		 		
1110: FCDF 	7E	 		MOV		A,M					; Get byte from source
1111: FCE0 	12	 		STAX	D					; Put into destination
1112: FCE1 	13	 		INX		D					; update pointers
1113: FCE2 	23	 		INX		H
1114: FCE3 		 		
1115: FCE3 	7E	 		MOV		A,M					; Get byte from source
1116: FCE4 	12	 		STAX	D					; Put into destination
1117: FCE5 	13	 		INX		D					; update pointers
1118: FCE6 	23	 		INX		H
1119: FCE7 		 		
1120: FCE7 	7E	 		MOV		A,M					; Get byte from source
1121: FCE8 	12	 		STAX	D					; Put into destination
1122: FCE9 	13	 		INX		D					; update pointers
1123: FCEA 	23	 		INX		H
1124: FCEB 		 		
1125: FCEB 	7E	 		MOV		A,M					; Get byte from source
1126: FCEC 	12	 		STAX	D					; Put into destination
1127: FCED 	13	 		INX		D					; update pointers
1128: FCEE 	23	 		INX		H
1129: FCEF 		 		
1130: FCEF 	7E	 		MOV		A,M					; Get byte from source
1131: FCF0 	12	 		STAX	D					; Put into destination
1132: FCF1 	13	 		INX		D					; update pointers
1133: FCF2 	23	 		INX		H
1134: FCF3 		 		
1135: FCF3 	7E	 		MOV		A,M					; Get byte from source
1136: FCF4 	12	 		STAX	D					; Put into destination
1137: FCF5 	13	 		INX		D					; update pointers
1138: FCF6 	23	 		INX		H
1139: FCF7 		 		
1140: FCF7 	0D	 		DCR		C					; count down on loop counter
1141: FCF8 	C2D7FC	 		JNZ		BufferMove			; repeat till done (CP/M sector moved)
1142: FCFB 		 ; end of loop		
1143: FCFB 	3AE3FB	 		LDA		WriteType			; write to directory ?
1144: FCFE 	FE01	 		CPI		WriteDirectory
1145: FD00 	3AF6FB	 		LDA		DiskErrorFlag		; get flag in case of a delayed read or write
1146: FD03 	C0	 		RNZ							; return if delayed read or write
1147: FD04 		 		
1148: FD04 	B7	 		ORA		A					; Any disk errors ?
1149: FD05 	C0	 		RNZ							; yes - abandon attempt to write to directory
1150: FD06 		 		
1151: FD06 	AF	 		XRA		A
1152: FD07 	32E9FB	 		STA		MustWriteBuffer		; clear flag
1153: FD0A 	CD95FD	 		CALL	WritePhysical
1154: FD0D 	3AF6FB	 		LDA		DiskErrorFlag		; return error flag to caller
1155: FD10 	C9	 		RET
1156: FD11 		 ;********************************************************************
1157: FD11 		 
1158: FD11 		 		
1159: FD11 		 ; indicates  selected disk, track, and sector now residing in buffer
1160: FD11 		 SetInBufferDkTrkSector:
1161: FD11 	3AEAFB	 		LDA		SelectedDisk
1162: FD14 	32E4FB	 		STA		InBufferDisk
1163: FD17 	2AEBFB	 		LHLD	SelectedTrack
1164: FD1A 	22E5FB	 		SHLD	InBufferTrack
1165: FD1D 	3AEEFB	 		LDA		SelectedPhysicalSector
1166: FD20 	32E7FB	 		STA		InBufferSector
1167: FD23 	C9	 		Ret
1168: FD24 		 		
1169: FD24 		 CompareDkTrk:					;Compares just the disk and track   pointed to by DE and HL 
1170: FD24 	0E03	 		MVI		C,03H			; Disk(1), Track(2)
1171: FD26 	C32BFD	 		JMP		CompareDkTrkSecLoop
1172: FD29 		 CompareDkTrkSec:				;Compares just the disk and track   pointed to by DE and HL 
1173: FD29 	0E04	 		MVI		C,04H			; Disk(1), Track(2), Sector(1)
1174: FD2B 		 CompareDkTrkSecLoop:
1175: FD2B 	1A	 		LDAX	D
1176: FD2C 	BE	 		CMP		M
1177: FD2D 	C0	 		RNZ						; Not equal
1178: FD2E 	13	 		INX	D
1179: FD2F 	23	 		INX	H
1180: FD30 	0D	 		DCR		C
1181: FD31 	C8	 		RZ						; return they match (zero flag set)
1182: FD32 	C32BFD	 		JMP		CompareDkTrkSecLoop	; keep going
1183: FD35 		 
1184: FD35 		 ;********************************************************************
1185: FD35 		 
1186: FD35 		 ;Moves the disk, track, and sector variables pointed at by HL to those pointed at by DE 
1187: FD35 		 MoveDkTrkSec:
1188: FD35 	0E04	 		MVI		C,04H			; Disk(1), Track(2), Sector(1)
1189: FD37 		 MoveDkTrkSecLoop:
1190: FD37 	7E	 		MOV		A,M
1191: FD38 	12	 		STAX	D
1192: FD39 	13	 		INX		D
1193: FD3A 	23	 		INX		H
1194: FD3B 	0D	 		DCR		C
1195: FD3C 	C8	 		RZ					; exit loop done
1196: FD3D 	C337FD	 		JMP		MoveDkTrkSecLoop
1197: FD40 		 		
1198: FD40 		 ;**************************************************************************************************
1199: FD40 		 ;  There are two "smart" disk controllers on this system, one for the 8" floppy diskette drives,
1200: FD40 		 ; and one for the 5 1/4" mini-diskette drives
1201: FD40 		 ;
1202: FD40 		 ;  The controllers are "hard-wired" to monitor certain locations in memory to detect when they are to
1203: FD40 		 ; perform some disk operation. The 8" controller monitors location 0040H, and the 5 1/4 controller
1204: FD40 		 ; monitors location 0045H. These are called their disk control bytes.
1205: FD40 		 ; If the most significant bit of  disk control byte is set, the controller will look at the word
1206: FD40 		 ; following the respective control bytes. This word must contain the address of  valid disk control
1207: FD40 		 ; table that specifies the exact disk operation to be performed.
1208: FD40 		 ;
1209: FD40 		 ;  Once the operation has been completed. the controller resets its disk control byte to OOH.
1210: FD40 		 ; This indicates completion to the disk driver code.
1211: FD40 		 ;
1212: FD40 		 ;  The controller also sets a return code in a disk status block -both controllers use the SAME location
1213: FD40 		 ; for this, 0043H. If the first byte of this status block is less than 80H. then a disk error
1214: FD40 		 ; has occurred. For this simple BIOS. no further details of the status settings are relevant.
1215: FD40 		 ; Note that the disk controller has built-in retry logic -- reads and writes are attempted
1216: FD40 		 ; ten times before the controller returns an error
1217: FD40 		 ;
1218: FD40 		 ;  The disk control table layout is shown below. Note that the controllers have the capability
1219: FD40 		 ; for control tables to be chained together so that a sequence of disk operations can be initiated.
1220: FD40 		 ; In this BIOS this feature is not used. However. the controller requires that the chain pointers
1221: FD40 		 ; in the disk control tables be pointed back to the main control bytes in order to indicate
1222: FD40 		 ; the end of the chain
1223: FD40 		 ;**************************************************************************************************
1224: FD40 		 
1225: FD40 		 DiskControl8	EQU	040H	; 8" control byte
1226: FD40 		 CommandBlock8	EQU	041H	; Control Table Pointer
1227: FD40 		 
1228: FD40 		 DiskStatusBlock	EQU	043H	; 8" and 5 1/4" status block
1229: FD40 		 
1230: FD40 		 DiskControl5	EQU	045H	; 8" control byte
1231: FD40 		 CommandBlock5	EQU	046H	; Control Table Pointer
1232: FD40 		 
1233: FD40 		 ;***************************************************************************
1234: FD40 		 ;					Floppy Disk Control tables
1235: FD40 		 ;***************************************************************************
1236: FD40 	00	 FloppyCommand:	DB	00H		; Command
1237: FD41 		 FloppyReadCode	EQU	01H
1238: FD41 		 FloppyWriteCode	EQU	02H
1239: FD41 	00	 FloppyUnit:		DB	00H		; unit (drive) number = 0 or 1
1240: FD42 	00	 FloppyHead:		DB	00H		; head number = 0 or 1
1241: FD43 	00	 FloppyTrack:	DB	00H		; track number
1242: FD44 	00	 FloppySector:	DB	00H		; sector number
1243: FD45 	0000	 FloppyByteCount:	DW	0000H	; number of bytes to read/write
1244: FD47 	0000	 FloppyDMAAddress:	DW	0000H	; transfer address
1245: FD49 	0000	 FloppyNextStatusBlock:	DW	0000H	; pointer to next status block
1246: FD4B 	0000	 FloppyNextControlLocation:	DW	0000H	; pointer to next control byte
1247: FD4D 		 
1248: FD4D 		 ; Write contents of disk buffer to correct sector
1249: FD4D 		 WriteNoDeblock:
1250: FD4D 	3E02	 	MVI		A,FloppyWriteCode	; get write function code
1251: FD4F 	C354FD	 	JMP		CommonNoDeblock
1252: FD52 		 ;Read previously selected sector into disk buffer
1253: FD52 		 ReadNoDeblock:
1254: FD52 	3E01	 	MVI		A,FloppyReadCode	; get read function code
1255: FD54 		 CommonNoDeblock:
1256: FD54 	3240FD	 	STA		FloppyCommand		; set the correct command code
1257: FD57 	218000	 	LXI		H,128				; bytes per sector
1258: FD5A 	2245FD	 	SHLD	FloppyByteCount
1259: FD5D 	AF	 	XRA		A					; 8" has only head 0
1260: FD5E 	3242FD	 	STA		FloppyHead
1261: FD61 		 	
1262: FD61 	3AEAFB	 	LDA		SelectedDisk		; insure only disk 0 or 1
1263: FD64 	E601	 	ANI		01H
1264: FD66 	3241FD	 	STA		FloppyUnit			; set the unit number
1265: FD69 		 	
1266: FD69 	3AEBFB	 	LDA		SelectedTrack
1267: FD6C 	3243FD	 	STA		FloppyTrack			; set track number
1268: FD6F 		 	
1269: FD6F 	3AEDFB	 	LDA		SelectedSector
1270: FD72 	3244FD	 	STA		FloppySector		; set sector
1271: FD75 		 	
1272: FD75 	2A63FB	 	LHLD	DMAAddress
1273: FD78 	2247FD	 	SHLD	FloppyDMAAddress	; set transfer address
1274: FD7B 		 	
1275: FD7B 		 ;  The disk controller can accept chained disk control tables, but in this case
1276: FD7B 		 ; they are not used. so the "Next" pointers must be pointed back at the initial
1277: FD7B 		 ; control bytes in the base page. 
1278: FD7B 	214300	 	LXI		H,DiskStatusBlock
1279: FD7E 	2249FD	 	SHLD	FloppyNextStatusBlock	; set pointer back to start
1280: FD81 	214000	 	LXI		H,DiskControl8
1281: FD84 	224BFD	 	SHLD	FloppyNextControlLocation	; set pointer back to start
1282: FD87 	2140FD	 	LXI		H,FloppyCommand
1283: FD8A 	224100	 	SHLD	CommandBlock8
1284: FD8D 		 	
1285: FD8D 	214000	 	LXI		H,DiskControl8
1286: FD90 	3680	 	MVI		M,080H				; activate the controller to perform operation
1287: FD92 	C3F7FD	 	JMP		WaitForDiskComplete
1288: FD95 		 	
1289: FD95 		 ;Write contents of disk buffer to correct sector
1290: FD95 		 WritePhysical:
1291: FD95 	3E02	 	MVI		A,FloppyWriteCode	; get write function
1292: FD97 	C39CFD	 	JMP		CommonPhysical
1293: FD9A 		 ReadPhysical:
1294: FD9A 	3E01	 	MVI		A,FloppyReadCode	; get read function
1295: FD9C 		 CommonPhysical:
1296: FD9C 	3240FD	 	STA		FloppyCommand		; set the command
1297: FD9F 		 	
1298: FD9F 	3AFAFB	 	LDA		DiskType
1299: FDA2 	FE01	 	CPI		Floppy5				; is it 5 1/4 ?
1300: FDA4 	CAADFD	 	JZ		CorrectDisktype		; yes
1301: FDA7 	3E01	 	MVI		A,1
1302: FDA9 	3209FE	 	STA		DiskError			; no set error and exit
1303: FDAC 	C9	 	RET
1304: FDAD 		 CorrectDisktype:
1305: FDAD 	3AE4FB	 	LDA		InBufferDisk
1306: FDB0 	E601	 	ANI		01H					; only units 0 or 1
1307: FDB2 	3241FD	 	STA		FloppyUnit			; set disk
1308: FDB5 	2AE5FB	 	LHLD	InBufferTrack
1309: FDB8 	7D	 	MOV		A,L					; for this controller it is a byte value
1310: FDB9 	3243FD	 	STA		FloppyTrack			; set track
1311: FDBC 		 ;  The sector must be converted into a head number and sector number.
1312: FDBC 		 ; Sectors 0 - 8 are head 0, 9 - 17 , are head 1 
1313: FDBC 	0600	 	MVI		B,0					; assume head 0
1314: FDBE 	3AE7FB	 	LDA		InBufferSector
1315: FDC1 	4F	 	MOV		C,A					; save copy
1316: FDC2 	FE09	 	CPI		09H
1317: FDC4 	DACBFD	 	JC		Head0
1318: FDC7 	D609	 	SUI		09H					; Modulo sector
1319: FDC9 	4F	 	MOV		C,A
1320: FDCA 	04	 	INR		B					; set head to 1
1321: FDCB 		 Head0:
1322: FDCB 	78	 	MOV		A,B
1323: FDCC 	3242FD	 	STA		FloppyHead			; set head number
1324: FDCF 	79	 	MOV		A,C
1325: FDD0 	3C	 	INR		A					; physical sectors start at 1
1326: FDD1 	3244FD	 	STA		FloppySector		; set sector
1327: FDD4 	210002	 	LXI		H,PhysicalSectorSize
1328: FDD7 	2245FD	 	SHLD	FloppyByteCount		; set byte count
1329: FDDA 	2133F6	 	LXI		H,DiskBuffer
1330: FDDD 	2247FD	 	SHLD	FloppyDMAAddress	; set transfer address
1331: FDE0 		 ;	As only one control table is in use, close the status and busy chain pointers
1332: FDE0 		 ;  back to the main control bytes
1333: FDE0 	214300	 	LXI		H,DiskStatusBlock
1334: FDE3 	2249FD	 	SHLD	FloppyNextStatusBlock
1335: FDE6 	214500	 	LXI		H,DiskControl5
1336: FDE9 	224BFD	 	SHLD	FloppyNextControlLocation
1337: FDEC 	2140FD	 	LXI		H,FloppyCommand
1338: FDEF 	224600	 	SHLD	CommandBlock5
1339: FDF2 		 	
1340: FDF2 	214500	 	LXI		H,DiskControl5		; activate 5 1/4" disk controller
1341: FDF5 	3680	 	MVI		M,080H
1342: FDF7 		 
1343: FDF7 		 ;Wait until Disk Status Block indicates , operation complete, then check 
1344: FDF7 		 ; if any errors occurred. ,On entry HL -> disk control byte	
1345: FDF7 		 WaitForDiskComplete:
1346: FDF7 	7E	 	MOV		A,M				; get control bytes
1347: FDF8 	B7	 	ORA		A
1348: FDF9 	C2F7FD	 	JNZ		WaitForDiskComplete	; operation not done
1349: FDFC 		 	
1350: FDFC 	3A4300	 	LDA		DiskStatusBlock		; done , so now check status
1351: FDFF 	FE80	 	CPI		080H
1352: FE01 	DA09FE	 	JC		DiskError
1353: FE04 	AF	 	XRA		A
1354: FE05 	32F6FB	 	STA		DiskErrorFlag		; clear the flag
1355: FE08 	C9	 	RET
1356: FE09 		 	
1357: FE09 		 DiskError:
1358: FE09 	3E01	 	MVI		A,1
1359: FE0B 	32F6FB	 	STA		DiskErrorFlag		; set the error flag
1360: FE0E 	C9	 	RET
1361: FE0F 		 	
1362: FE0F 		 ;**********************************************************************************
1363: FE0F 		 ;		Disk Control table image for warm boot
1364: FE0F 		 ;**********************************************************************************
1365: FE0F 		 BootControlPart1:
1366: FE0F 	01	 	DB	01H				; Read function
1367: FE10 	00	 	DB	00H				; unit number
1368: FE11 	00	 	DB	00H				; head number
1369: FE12 	00	 	DB	00H				; track number
1370: FE13 	02	 	DB	02H				; Starting sector number
1371: FE14 	0010	 	DW	8 * 512			; Number of bytes to read
1372: FE16 	00E4	 	DW	CCPEntry		; read into this address
1373: FE18 	4300	 	DW	DiskStatusBlock	; pointer to next block
1374: FE1A 	4500	 	DW	DiskControl5	; pointer to next table
1375: FE1C 		 BootControlPart2:
1376: FE1C 	01	 	DB	01H				; Read function
1377: FE1D 	00	 	DB	00H				; unit number
1378: FE1E 	01	 	DB	01H				; head number
1379: FE1F 	00	 	DB	00H				; track number
1380: FE20 	01	 	DB	01H				; Starting sector number
1381: FE21 	0006	 	DW	3 * 512			; Number of bytes to read
1382: FE23 	00F4	 	DW	CCPEntry + ( 8 * 512)		; read into this address
1383: FE25 	4300	 	DW	DiskStatusBlock	; pointer to next block
1384: FE27 	4500	 	DW	DiskControl5	; pointer to next table
1385: FE29 		 
1386: FE29 		 ;**********************************************************************************	
1387: FE29 		 ;						Warm Boot
1388: FE29 		 ;  On warm boot. the CCP and BDOS must be reloaded into memory.
1389: FE29 		 ; In this BIOS. only the 5 1/4" diskettes will be used.
1390: FE29 		 ; Therefore this code is hardware specific to the controller.
1391: FE29 		 ; Two prefabricated control tables are used.
1392: FE29 		 ;**********************************************************************************	
1393: FE29 		 WBOOT:
1394: FE29 	318000	 	LXI		SP,080H
1395: FE2C 	110FFE	 	LXI		D,BootControlPart1
1396: FE2F 	CD3BFE	 	CALL	WarmBootRead
1397: FE32 		 	
1398: FE32 	111CFE	 	LXi		D,BootControlPart2
1399: FE35 	CD3BFE	 	CALL	WarmBootRead
1400: FE38 	C340F8	 	JMP		EnterCPM
1401: FE3B 		 	
1402: FE3B 		 WarmBootRead:
1403: FE3B 	2140FD	 	LXI		H,FloppyCommand
1404: FE3E 	224600	 	SHLD	CommandBlock5
1405: FE41 	0E0D	 	MVI		C,13				; set byte count
1406: FE43 		 WarmByteMove:
1407: FE43 	1A	 	LDAX	D
1408: FE44 	77	 	MOV		M,A
1409: FE45 	23	 	INX		H
1410: FE46 	13	 	INX		D
1411: FE47 	0D	 	DCR		C
1412: FE48 	C243FE	 	JNZ		WarmByteMove
1413: FE4B 		 	
1414: FE4B 	214500	 	LXI		H,DiskControl5
1415: FE4E 	3680	 	MVI		M,080H			; activate the controller
1416: FE50 		 	
1417: FE50 		 WaitForBootComplete:
1418: FE50 	7E	 	MOV		A,M
1419: FE51 	B7	 	ORA		A
1420: FE52 	C250FE	 	JNZ		WaitForBootComplete
1421: FE55 		 	
1422: FE55 	3A4300	 	LDA		DiskStatusBlock
1423: FE58 	FE80	 	CPI		080H		; any errors ?
1424: FE5A 	DA5EFE	 	JC		WarmBootError	; Yup
1425: FE5D 	C9	 	RET
1426: FE5E 		 
1427: FE5E 		 WarmBootError:
1428: FE5E 	2167FE	 	LXI		H,WarmBootErroMessage
1429: FE61 	CD33F8	 	CALL	DisplayMessage
1430: FE64 	C329FE	 	JMP		WBOOT
1431: FE67 		 	
1432: FE67 		 WarmBootErroMessage:
1433: FE67 	0D0A	 	DB		0DH,0AH
1434: FE69 	5761726D20	 	DB		057H,061H,072H,06DH,020H				; Warm
1435: FE6E 	426F6F7420	 	DB		042H,06FH,06FH,074H,020H				; Boot
1436: FE73 	7265744879696E67	 	DB		072H,065H,074H,072,079H,069H,06EH,067H	;retrying
1437: FE7B 	2E2E2E0D0A	 	DB		02EH,02EH,02EH,0DH,0AH
1438: FE80 	00	 	DB		00H
1439: FE81 		 End:
1440: FE81 		 
1441: FE81 		 
1442: FE81 		 	
1443: FE81 		 
1444: FE81 		 
1445: FE81 		 	




                                    Xref


0000	0000	$                             		

0077	F833	AFTERDISKBUFFER               		  0226,
0865	0800	ALLOCATIONBLOCKSIZE           		  0980,

0026	EC06	BDOSENTRY                     		  0034,  0247,
0016	0A00	BDOSLENGTH                    		  0019,  0020,  0027,
0027	F600	BIOSENTRY                     		  0051,
0017	0A00	BIOSLENGTH                    		  0019,  0020,
0181	F6F9	BOOT                          		  0055,
1365	FE0F	BOOTCONTROLPART1              		  1395,
1375	FE1C	BOOTCONTROLPART2              		  1398,
1099	FCD7	BUFFERMOVE                    		  1092,  1141,

0024	E400	CCPENTRY                      		  0026,  0027,  0256,  1372,  1382,
0015	0800	CCPLENGTH                     		  0019,  0020,  0026,  0027,
0988	FC37	CHECKUNALLOCATEDBLOCK         		  0977,
1231	0046	COMMANDBLOCK5                 		  1338,  1404,
1226	0041	COMMANDBLOCK8                 		  1283,
1255	FD54	COMMONNODEBLOCK               		  1251,
1295	FD9C	COMMONPHYSICAL                		  1292,
0409	00DF	COMMUNICATIONBAUDMODE         		  0099,
0410	00DE	COMMUNICATIONBAUDRATE         		  0103,
0405	00EC	COMMUNICATIONDATAPORT         		  0424,
0465	F92F	COMMUNICATIONINPUT            		  0295,
0407	0002	COMMUNICATIONINPUTREADY       		  0426,
0437	F902	COMMUNICATIONINSTATUS         		  0279,
0478	F944	COMMUNICATIONOUTPUT           		  0307,  0344,  0357,  0368,
0406	0001	COMMUNICATIONOUTPUTREADY      		  0425,
0450	F917	COMMUNICATIONOUTSTATUS        		  0332,
0404	00ED	COMMUNICATIONSTATUSPORT       		  0090,  0423,
0422	F8F2	COMMUNICATIONTABLE            		  0438,  0451,  0466,  0479,
1169	FD24	COMPAREDKTRK                  		  1041,
1172	FD29	COMPAREDKTRKSEC               		  0997,
1174	FD2B	COMPAREDKTRKSECLOOP           		  1171,  1182,
0282	F878	CONIN                         		  0059,
0298	F886	CONOUT                        		  0060,  0234,
0267	F862	CONST                         		  0058,
1304	FDAD	CORRECTDISKTYPE               		  1300,
0867	0004	CPMSECPERPHYSICAL             		  0868,  0869,
0868	0048	CPMSECPERTRACK                		  1003,
0111	000D	CR                            		  0128,  0132,  0138,  0145,  0152,  0159,  0166,

0892	FBE8	DATAINDISKBUFFER              		  0847,  1029,
0010	3930	DAY                           		  0123,
0926	FBF9	DEBLOCKINGREQUIRED            		  0744,  0940,  0968,
0177	0004	DEFAULTDISK                   		  0218,  0254,
0045	0080	DEFAULTDISKBUFFER             		
0627	F9C1	DIRECTORYBUFFER               		  0598,  0606,  0614,  0622,
0693	FAC1	DISKAALLOCATIONVECTOR         		  0601,
0680	FA61	DISKAWORKAREA                 		  0600,
0694	FAD7	DISKBALLOCATIONVECTOR         		  0609,
0075	F633	DISKBUFFER                    		  0079,  1077,  1329,
0681	FA81	DISKBWORKAREA                 		  0608,
0696	FAED	DISKCALLOCATIONVECTOR         		  0617,
1230	0045	DISKCONTROL5                  		  1335,  1340,  1374,  1384,  1414,
1225	0040	DISKCONTROL8                  		  1280,  1285,
0682	FAA1	DISKCWORKAREA                 		  0616,
0697	FB0C	DISKDALLOCATIONVECTOR         		  0625,
0683	FAB1	DISKDWORKAREA                 		  0624,
1357	FE09	DISKERROR                     		  1302,  1352,
0919	FBF6	DISKERRORFLAG                 		  1023,  1145,  1154,  1354,  1359,
0593	F981	DISKPARAMETERHEADERS          		  0725,
1228	0043	DISKSTATUSBLOCK               		  1278,  1333,  1350,  1373,  1383,  1422,
0927	FBFA	DISKTYPE                      		  0741,  1298,
0227	F833	DISPLAYMESSAGE                		  0215,  0237,  1429,
0771	FB63	DMAADDRESS                    		  0775,  1080,  1272,
0468	F935	DUMMYINPUT                    		  0296,
0440	F908	DUMMYINSTATUS                 		  0280,
0481	F94A	DUMMYOUTPUT                   		  0308,  0345,  0356,  0367,
0453	F91D	DUMMYOUTSTATUS                		  0333,

1439	FE81	END                           		
0239	F840	ENTERCPM                      		  0221,  1400,

0041	005C	FCB                           		
0630	0001	FLOPPY5                       		  0642,  1299,
0644	FA42	FLOPPY5PARAMETERBLOCK         		  0599,  0607,
0789	FB6B	FLOPPY5SKEWTABLE              		  0596,  0604,  0620,
0631	0002	FLOPPY8                       		  0659,
0662	FA52	FLOPPY8PARAMETERBLOCK         		  0615,  0623,
0813	FBB3	FLOPPY8SKEWTABLE              		  0612,
1243	FD45	FLOPPYBYTECOUNT               		  1258,  1328,
1236	FD40	FLOPPYCOMMAND                 		  1256,  1282,  1296,  1337,  1403,
1244	FD47	FLOPPYDMAADDRESS              		  1273,  1330,
1240	FD42	FLOPPYHEAD                    		  1260,  1323,
1246	FD4B	FLOPPYNEXTCONTROLLOCATION     		  1281,  1336,
1245	FD49	FLOPPYNEXTSTATUSBLOCK         		  1279,  1334,
1237	0001	FLOPPYREADCODE                		  1254,  1294,
1242	FD44	FLOPPYSECTOR                  		  1270,  1326,
1241	FD43	FLOPPYTRACK                   		  1267,  1310,
1239	FD41	FLOPPYUNIT                    		  1264,  1307,
1238	0002	FLOPPYWRITECODE               		  1250,  1291,

0274	F86A	GETCONSOLESTATUS              		  0268,
0325	F89C	GETLISTSTATUS                 		  0318,

1321	FDCB	HEAD0                         		  1317,
0843	FBD3	HOME                          		  0064,
0848	FBDD	HOMENOWRITE                   		  0846,

0888	FBE4	INBUFFERDISK                  		  1162,  1305,
0887	FBE4	INBUFFERDKTRKSEC              		  1039,
0890	FBE7	INBUFFERSECTOR                		  1044,  1166,  1314,
0889	FBE5	INBUFFERTRACK                 		  1164,  1308,
0210	F713	INITIALIZECOMPLETE            		  0192,
0189	F6FD	INITIALIZELOOP                		  0208,
0198	F707	INITIALIZENEXTBYTE            		  0206,
0203	F70A	INITIALIZEPORT                		  0194,
0081	F633	INITIALIZESTREAM              		  0187,
0004	00DB	INOPCODE                      		  0491,  0503,  0519,
0511	F960	INPUTDATA                     		  0459,  0462,  0467,  0515,
0520	F96E	INPUTDATAPORT                 		  0518,
0488	F94B	INPUTSTATUS                   		  0433,  0436,  0439,  0513,
0492	F950	INPUTSTATUSPORT               		  0490,
0031	0003	IOBYTE                        		  0212,  0275,  0291,  0303,  0326,  0338,  0350,  0363,

0020	1C00	LENGTHINBYTES                 		
0019	0008	LENGTHINK                     		
0112	000A	LF                            		  0128,  0132,  0138,  0145,  0152,  0159,  0166,
0335	F8AC	LIST                          		  0061,
0310	F894	LISTST                        		  0071,

0013	0040	MEMORYSIZE                    		
0009	3830	MONTH                         		  0120,
1187	FD35	MOVEDKTRKSEC                  		  0984,
1189	FD37	MOVEDKTRKSECLOOP              		  1196,
0922	FBF7	MUSTPREREADSECTOR             		  0949,  1011,  1017,  1057,
0894	FBE9	MUSTWRITEBUFFER               		  0844,  1051,  1061,  1095,  1152,

0634	0080	NEEDDEBLOCKING                		  0642,  0743,
1009	FC5F	NOTRACKCHANGE                 		  1004,
0699	FB2B	NUMBEROFLOGICALDISKS          		  0712,

0005	00D3	OUTOPCODE                     		  0201,  0533,
0524	F970	OUTPUTDATA                    		  0474,  0477,  0480,  0528,
0534	F97F	OUTPUTDATAPORT                		  0531,
0500	F956	OUTPUTSTATUS                  		  0446,  0449,  0452,  0526,
0504	F95B	OUTPUTSTATUSPORT              		  0502,

0029	0000	PAGEZERO                      		
1021	FC6E	PERFORMREADWRITE              		  0952,  1012,
0866	0012	PHYSICALSECPERTRACK           		  0868,
0074	0200	PHYSICALSECTORSIZE            		  0076,  0867,  1327,
0347	F8BC	PUNCH                         		  0062,

0043	007D	RANDOMRECORDPOSITION          		
0939	FBFB	READ                          		  0069,
0360	F8CD	READER                        		  0063,
1253	FD52	READNODEBLOCK                 		  0942,
0925	FBF8	READOPERATION                 		  0948,  0973,  1090,
1293	FD9A	READPHYSICAL                  		  1059,
1055	FCA3	READSECTORINTOBUFFER          		  1033,
1013	FC66	REQUESTPREREAD                		  0991,  0998,

0870	0002	SECTORBITSHIFT                		
1065	FCB1	SECTORINBUFFER                		  1047,
0869	0003	SECTORMASK                    		  1067,
1050	FC9C	SECTORNOTINBUFFER             		  1042,
0829	FBCD	SECTRAN                       		  0072,
0709	FB2B	SELDSK                        		  0065,
0900	FBEA	SELECTEDDISK                  		  0715,  1161,  1262,
0909	FBF0	SELECTEDDISKDEBLOCK           		
0908	FBEF	SELECTEDDISKTYPE              		
0899	FBEA	SELECTEDDKTRKSEC              		  0982,  0995,  1040,
0906	FBEE	SELECTEDPHYSICALSECTOR        		  1028,  1045,  1165,
0902	FBED	SELECTEDSECTOR                		  0764,  1024,  1066,  1269,
0901	FBEB	SELECTEDTRACK                 		  0755,  1163,  1266,
0376	F8DC	SELECTROUTINE                 		  0276,  0292,  0304,  0329,  0341,  0354,  0365,
0378	F8DD	SELECTROUTINE21               		
0772	FB65	SETDMA                        		  0068,  0251,
1160	FD11	SETINBUFFERDKTRKSECTOR        		  1056,
0762	FB5E	SETSEC                        		  0067,
0752	FB58	SETTRK                        		  0066,  0850,
0114	F643	SIGNONMESSAGE                 		  0214,

0400	0001	TERMINALDATAPORT              		  0419,
0460	F926	TERMINALINPUT                 		  0294,
0402	007F	TERMINALINPUTREADY            		  0421,
0434	F8FC	TERMINALINSTATUS              		  0278,
0475	F93E	TERMINALOUTPUT                		  0306,  0343,  0358,  0369,
0401	0080	TERMINALOUTPUTREADY           		  0420,
0447	F911	TERMINALOUTSTATUS             		  0331,
0399	0002	TERMINALSTATUSPORT            		  0418,
0417	F8EE	TERMINALTABLE                 		  0435,  0448,  0461,  0476,
0395	00EC	TTYDATAPORT                   		  0414,
0457	F920	TTYINPUT                      		  0293,
0397	0002	TTYINPUTREADY                 		  0416,
0431	F8F6	TTYINSTATUS                   		  0277,
0472	F938	TTYOUTPUT                     		  0305,  0342,  0355,  0366,
0396	0001	TTYOUTPUTREADY                		  0415,
0444	F90B	TTYOUTSTATUS                  		  0330,
0394	00ED	TTYSTATUSPORT                 		  0413,
0412	F8EA	TTYTABLE                      		  0432,  0445,  0458,  0473,

0914	FBF1	UNALLOCATEDDISK               		
0913	FBF1	UNALLOCATEDDKTRKSEC           		  0983,  0996,
0916	FBF4	UNALLOCATEDSECTOR             		
0915	FBF2	UNALLOCATEDTRACK              		  1006,  1008,
0917	FBF5	UNALOCATEDLRECORDCOUNT        		  0946,  0981,  0989,  0993,  1015,

0008	3130	VERSION                       		  0117,

1417	FE50	WAITFORBOOTCOMPLETE           		  1420,
1345	FDF7	WAITFORDISKCOMPLETE           		  1287,  1348,
0056	F603	WARMBOOTENTRY                 		  0030,  0244,
1432	FE67	WARMBOOTERROMESSAGE           		  1428,
1427	FE5E	WARMBOOTERROR                 		  1424,
1402	FE3B	WARMBOOTREAD                  		  1396,  1399,
1406	FE43	WARMBYTEMOVE                  		  1412,
1393	FE29	WBOOT                         		  0057,  1430,
0967	FC15	WRITE                         		  0070,
0879	0000	WRITEALLOCATED                		
0880	0001	WRITEDIRECTORY                		  1144,
1249	FD4D	WRITENODEBLOCK                		  0970,
1290	FD95	WRITEPHYSICAL                 		  1053,  1153,
0883	FBE3	WRITETYPE                     		  0951,  0975,  1143,
0881	0002	WRITEUNALLOCATED              		  0950,  0976,

0011	3531	YEAR                          		  0126,
