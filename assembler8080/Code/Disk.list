0001: 0000                                    
0002: 0000                					; listing starts on page 175/493 FIgure 6-4
0003: 0000                					; in Programmers CPM Handbook by
0004: 0000                					; Andy Johnston-Laird
0005: 0000                                    
0006: 0000                	ORG	0F981H	; Continue from bios.asm
0007: F981                CodeStart:          
0008: F981                PhysicalSectorSize	EQU	512			; for the 5.25" disk the 8" size is 128,
0009: F981                	                   
0010: F981                ; 					High level diskette drivers
0011: F981                ;                   
0012: F981                ;                   
0013: F981                ; These drivers perform the following functions:
0014: F981                ;                   
0015: F981                ; SELDSK		Select a specific disk and return the address of
0016: F981                ;				the appropriate disk parameter header
0017: F981                ; SETTRK		Set the track number for the next read or write
0018: F981                ; SETSEC		Set the sector number for the next read or write
0019: F981                ; SETDMA		Set the DMA (read/write) address for the next read or write
0020: F981                ; SECTRAN	Translate a logical sector number into a physical
0021: F981                ; HOME		Set the track to 0 so that the next read or write will
0022: F981                ;				be on Track 0  
0023: F981                ;                   
0024: F981                ; In addition, the high-level drivers are responsible for making
0025: F981                ; the 5 1/4"" floppy diskettes that use a 512-byte sector appear
0026: F981                ; to CP/M as though they use a 128-byte sector. They do this
0027: F981                ; by using what is called blocking/de-blocking code,
0028: F981                ; described in more detail later in this listing.
0029: F981                ;                   
0030: F981                ;                   
0031: F981                ; 					Disk Parameter Tables
0032: F981                ;                   
0033: F981                ; As discussed in Chapter 3, these describe the physical
0034: F981                ; characteristics of the disk drives. In this example BIOS,
0035: F981                ; there are two types of disk drives: standard single-sided,
0036: F981                ; single-density 8", and double-sided, double-density 5 1/4"
0037: F981                ; diskettes.        
0038: F981                ;                   
0039: F981                ; The standard 8" diskettes do not need the blocking/de-blocking
0040: F981                ; code, but the 5 1/4" drives do. Therefore an additional
0041: F981                ; byte has been prefixed to the disk parameter block to
0042: F981                ; tell the disk drivers each logical disk's physical
0043: F981                ; diskette type, and whether or not it needs de-blocking.
0044: F981                ;                   
0045: F981                ;                   
0046: F981                ; 					Disk Definition Tables
0047: F981                ;                   
0048: F981                ; These consists of disk parameter headers, with one entry
0049: F981                ; per logical disk driver, and disk parameter blocks, with
0050: F981                ; either one parameter block per logical disk or the same
0051: F981                ; parameter block for several logical disks.
0052: F981                ;                   
0053: F981                DiskParameterHeaders:		; described in chapter 3
0054: F981                                    
0055: F981                		; Logical Disk A: (5 1/4" Diskette)
0056: F981     6BFB       	DW	Floppy5SkewTable	; 5 1/4" skew table
0057: F983     0000000081F9 	DW	0,0,0F981H			; reserved for CP/M
0058: F989     C1F9       	DW	DirectoryBuffer 
0059: F98B     42FA       	DW	Floppy5ParameterBlock
0060: F98D     61FA       	DW	DiskAWorkArea   
0061: F98F     C1FA       	DW	DiskAAllocationVector
0062: F991                	                   
0063: F991                		; Logical Disk B: (5 1/4" Diskette)
0064: F991     6BFB       	DW	Floppy5SkewTable	; shares the same skew table as A:
0065: F993     0000000081F9 	DW	0,0,0F981H			; reserved for CP/M
0066: F999     C1F9       	DW	DirectoryBuffer		; all disks use this buffer
0067: F99B     42FA       	DW	Floppy5ParameterBlock
0068: F99D     81FA       	DW	DiskBWorkArea   
0069: F99F     D7FA       	DW	DiskBAllocationVector
0070: F9A1                	                   
0071: F9A1                		; Logical Disk C: (8" Floppy)
0072: F9A1     B3FB       	DW	Floppy8SkewTable	; 8" skew table
0073: F9A3     0000000081F9 	DW	0,0,0F981H			; reserved for CP/M
0074: F9A9     C1F9       	DW	DirectoryBuffer		; all disks use this buffer
0075: F9AB     52FA       	DW	Floppy8ParameterBlock
0076: F9AD     A1FA       	DW	DiskCWorkArea   
0077: F9AF     EDFA       	DW	DiskCAllocationVector
0078: F9B1                	                   
0079: F9B1                		; Logical Disk D: (8" Floppy)
0080: F9B1     6BFB       	DW	Floppy5SkewTable	; shares the same skew table as A:
0081: F9B3     0000000081F9 	DW	0,0,0F981H			; reserved for CP/M
0082: F9B9     C1F9       	DW	DirectoryBuffer		; all disks use this buffer
0083: F9BB     52FA       	DW	Floppy8ParameterBlock
0084: F9BD     B1FA       	DW	DiskDWorkArea   
0085: F9BF     0CFB       	DW	DiskDAllocationVector
0086: F9C1                	                   
0087: F9C1                DirectoryBuffer:	DS	128
0088: FA41                                    
0089: FA41                	; Disk Types       
0090: FA41                Floppy5		EQU		1 		; 5 1/4" mini floppy
0091: FA41                Floppy8 	EQU		2 		; 8"  floppy (SS SD)
0092: FA41                                    
0093: FA41                	; blocking/de-blocking indicator
0094: FA41                NeedDeblocking	EQU 	080H	; Sector size > 128 bytes
0095: FA41                                    
0096: FA41                                    
0097: FA41                	; Disk Parameter Blocks
0098: FA41                	                   
0099: FA41                	; 5 1/4" mini floppy
0100: FA41                							; extra byte prefixed to indicate 
0101: FA41                							; disk type and blocking required
0102: FA41     81         	DB	Floppy5 + NeedDeblocking
0103: FA42                	                   
0104: FA42                Floppy5ParameterBlock:
0105: FA42     4800       	DW	048H				; 128-byte sectors per track
0106: FA44     31         	DB	49					; Block shift
0107: FA45     0F         	DB	15 					; Block mask
0108: FA46     01         	DB	01 					; Extent mask
0109: FA47     AE00       	DW	174 				; Maximum allocation block number
0110: FA49     7F00       	DW	127 				; Number of directory entries - 1
0111: FA4B     C0         	DB	0C0H				; Bit map for reserving 1 alloc. block
0112: FA4C     00         	DB	00					;  for file directory
0113: FA4D     2000       	DW	020H				;Disk change work area size
0114: FA4F     0100       	DW	01					; Number of tracks before directory
0115: FA51                	                   
0116: FA51                	; Standard 8" floppy
0117: FA51                							; extra byte prefixed to DPB for 
0118: FA51                							;  this version of the BIOS
0119: FA51     02         	DB	Floppy8				; Indicates disk type and the fact
0120: FA52                							;   that no de-blocking is required
0121: FA52                	                   
0122: FA52                Floppy8ParameterBlock:
0123: FA52     1A00       	DW	01AH				; sectors per track
0124: FA54     03         	DB	03					; Block shift
0125: FA55     07         	DB	07					; Block mask
0126: FA56     00         	DB	00 					; Extent mask
0127: FA57     F200       	DW	242 				; Maximum allocation block number
0128: FA59     3F00       	DW	63	 				; Number of directory entries - 1
0129: FA5B     C0         	DB	0C0H				; Bit map for reserving 2 alloc. block
0130: FA5C     00         	DB	00					;  for file directory
0131: FA5D     1000       	DW	010H				;Disk change work area size
0132: FA5F     0200       	DW	02					; Number of tracks before directory
0133: FA61                	                   
0134: FA61                			; Disk work area 
0135: FA61                	                   
0136: FA61                	; These are used by the BDOS to detect any unexpected
0137: FA61                	; change of diskette. The BDOS will automatically set
0138: FA61                	; such a changed diskette to read-only status.
0139: FA61                	                   
0140: FA61                DiskAWorkArea:	DS	020H		; A:
0141: FA81                DiskBWorkArea:	DS	020H		; B:
0142: FAA1                DiskCWorkArea:	DS	010H		; C:
0143: FAB1                DiskDWorkArea:	DS	010H		; D:
0144: FAC1                                    
0145: FAC1                	                   
0146: FAC1                			; Disk allocation vectors
0147: FAC1                			                 
0148: FAC1                		; These are used by the BDOS to maintain a bit map of
0149: FAC1                		; which allocation blocks are used and which are free.
0150: FAC1                		; One byte is used for eight allocation blocks, hence the
0151: FAC1                		; expression of the form (allocation blocks/8)+1
0152: FAC1                                    
0153: FAC1                DiskAAllocationVector:	DS		(174/8)+1 	; A:
0154: FAD7                DiskBAllocationVector:	DS		(174/8)+1 	; B:
0155: FAED                	                   
0156: FAED                DiskCAllocationVector:	DS		(242/8)+1 	; C:
0157: FB0C                DiskDAllocationVector:	DS		(242/8)+1 	; A:
0158: FB2B                	                   
0159: FB2B                NumberOfLogicalDisks:	EQU 4
0160: FB2B                                    
0161: FB2B                                    
0162: FB2B                		;  Disk routines  
0163: FB2B                		                  
0164: FB2B                ;**********************
0165: FB2B                ;SELDSK - Select disk in C. C=0 for A: 1 for B: etc.
0166: FB2B                ;  Return the address of the appropriate disk parameter header
0167: FB2B                ;  in HL, or 0000H if selected disk does not exist		
0168: FB2B                ;**********************	
0169: FB2B                SELDSK:             
0170: FB2B     210000     	LXI		H,00H		; Assume an error
0171: FB2E     79         	MOV		A,C 		; Check if  requested disk is valid
0172: FB2F     FEFB2B     	CPI		NumberOfLogicalDisks
0173: FB31     D0         	RNC					; return if > max number of Disks
0174: FB32                	                   
0175: FB32     32EAFB     	STA		SelectedDisk	; save disk number
0176: FB35     6F         	MOV		L,A			; make disk into word number
0177: FB36     2600       	MVI		H,0           
0178: FB38                						; Compute offset down disk parameter
0179: FB38                						; table by multiplying by parameter
0180: FB38                						; header length (16 bytes)
0181: FB38     29         	DAD		H             
0182: FB39     29         	DAD		H             
0183: FB3A     29         	DAD		H             
0184: FB3B     29         	DAD		H			; pointing at right one
0185: FB3C     1181F9     	LXI		D,DiskParameterHeaders		; get base address
0186: FB3F     19         	DAD		D			; DE -> appropriate DPH
0187: FB40     E5         	PUSH	H			; save DPH address
0188: FB41                						; access disk parameter block to
0189: FB41                						; extract special prefix byte that
0190: FB41                						; identifies disk type and whether
0191: FB41                						; de-blocking is required
0192: FB41     110A00     	LXI		D,10		; Get DPB pointer offset in DPH
0193: FB44     19         	DAD		D			; DE -> DPB address
0194: FB45     5E         	MOV		E,M			; Get DPB address in DE
0195: FB46     23         	INX		H             
0196: FB47     56         	MOV		D,M	          
0197: FB48     EB         	XCHG				; DE ->DPB 
0198: FB49     2B         	DCX		H			; DE -> prefix byte
0199: FB4A     7E         	MOV		A,M			; get prefix byte
0200: FB4B     E60F       	ANI		0FH			; isolate disk type
0201: FB4D     32FAFB     	STA		DiskType	; save for use in low level driver
0202: FB50     7E         	MOV		A,M			; get another copy
0203: FB51     E680       	ANI		NeedDeblocking
0204: FB53     32F9FB     	STA		DeblockingRequired	; save for low level driver
0205: FB56     E1         	POP		H			; recover DPH pointer
0206: FB57     C9         	RET                
0207: FB58                                    
0208: FB58                ;**********************	
0209: FB58                ;SETTRK - Set logical track for next read or write
0210: FB58                ;		Track is in BC   
0211: FB58                ;**********************	
0212: FB58                SETTRK:             
0213: FB58     60         	MOV		H,B					; select track in BC on entry
0214: FB59     69         	MOV		L,C           
0215: FB5A     22EBFB     	SHLD	SelectedTrack		; save for low level driver	
0216: FB5D     C9         	RET                
0217: FB5E                	                   
0218: FB5E                ;**********************	
0219: FB5E                ;SETSEC - Set logical sector for next read or write
0220: FB5E                ;		Sector is in C   
0221: FB5E                ;**********************
0222: FB5E                SETSEC:             
0223: FB5E     79         	MOV		A,C           
0224: FB5F     32EDFB     	STA		SelectedSector		; save for low level driver	
0225: FB62     C9         	RET                
0226: FB63                	                   
0227: FB63                ;**********************
0228: FB63                ;SetDMA - Set DMA (input/output) address for next read or write
0229: FB63                ;       Address in BC
0230: FB63                ;**********************
0231: FB63     0000       DMAAddress:	DW	0		; DMA address
0232: FB65                SETDMA:             
0233: FB65     69         	MOV		L,C					; select address in BC on entry
0234: FB66     60         	MOV		H,B           
0235: FB67     2263FB     	SHLD	DMAAddress		; save for low level driver	
0236: FB6A     C9         	RET                
0237: FB6B                	                   
0238: FB6B                			; Translate logical sector number to physical
0239: FB6B                			                 
0240: FB6B                			; Sector translation tables
0241: FB6B                			; These tables are indexed using the logical sector number
0242: FB6B                			; and contain the corresponding physical sector number
0243: FB6B                                    
0244: FB6B                                    
0245: FB6B                ;**********************
0246: FB6B                ;	Skew tables       
0247: FB6B                ;**********************
0248: FB6B                                    
0249: FB6B                Floppy5SkewTable:			; each physical sector contains four
0250: FB6B                							;  128-byte sectors
0251: FB6B                							             
0252: FB6B                ;	,		Physical 128b 	Logical 128b	Physical 512-byte
0253: FB6B     00010203   	DB		00,01,02,03		;00,01,02,03				0	)
0254: FB6F     10111213   	DB		16,17,18,19		;04,05,06,07				4	)
0255: FB73     20212223   	DB		32,33,34,35		;08,09,10,11				8	)
0256: FB77     0C0D0E0F   	DB		12,13,14,15		;12,13,14,15				3	)Head
0257: FB7B     1C1D1E1F   	DB		28,29,30,31		;16,17,18,19				7	) 0
0258: FB7F     08090A0B   	DB		08,09,10,11		;20,21,22,23				2	)
0259: FB83     18191A1B   	DB		24,25,26,27		;24,25,26,27				6	)
0260: FB87     04050607   	DB		04,05,06,07		;28,29,30,31				1	)
0261: FB8B     14151617   	DB		20,21,22,23		;32,33,34,35				5	)
0262: FB8F                	                   
0263: FB8F     24252627   	DB		36,37,38,39		;36,37,38,39				0	]
0264: FB93     34353637   	DB		52,53,54,55		;40,41,42,43				4	]
0265: FB97     44454647   	DB		68,69,70,71		;44,45,46,47				8	]
0266: FB9B     30313233   	DB		48,49,50,51		;48,49,50,51				3	]Head
0267: FB9F     40414243   	DB		64,65,66,67		;52,53,54,55				7	] 0
0268: FBA3     2C2D2E2F   	DB		44,45,46,47		;56,57,58,59				2	]
0269: FBA7     3C3D3E3F   	DB		60,61,62,63		;60,61,62,63				6	]
0270: FBAB     28292A2B   	DB		40,41,42,43		;63,65,66,67				1	]
0271: FBAF     38393A3B   	DB		56,57,58,59		;68,69,70,71				5	]
0272: FBB3                	                   
0273: FBB3                Floppy8SkewTable:			; Standard 8" Driver
0274: FBB3                	;		01,02,03,04,05,06,07,08,09,10		; Logical Sectors
0275: FBB3     01070D1319050B111703 	DB		01,07,13,19,25,05,11,17,23,03		; Physical Sectors
0276: FBBD                	                   
0277: FBBD                	;		11,12,13,14,15,16,17,18,19,20		; Logical Sectors	
0278: FBBD     090F1502080E141A060C 	DB		09,15,21,02,08,14,20,26,06,12		; Physical Sectors
0279: FBC7                	                   
0280: FBC7                	;		21,22,23,24,25,26					; Logical Sectors	
0281: FBC7     1218040A1016 	DB		18,24,04,10,16,22					; Physical Sectors
0282: FBCD                	                   
0283: FBCD                ;**********************
0284: FBCD                ;SECTRAN - Translate logical sector to physical
0285: FBCD                ;	on Entry:	BC= logical sector number
0286: FBCD                ;				DE-> appropriate skew table
0287: FBCD                ;	on Exit:	HL = physical sector number
0288: FBCD                ;**********************
0289: FBCD                SECTRAN:            
0290: FBCD     EB         	XCHG			;HL -> skew table base
0291: FBCE     09         	DAD		B		; Add on logical sector number
0292: FBCF     6E         	MOV		L,M		; Get physical sector number
0293: FBD0     2600       	MVI		H,00H	; make into a word
0294: FBD2     C9         	RET                
0295: FBD3                	                   
0296: FBD3                ;**********************
0297: FBD3                ;HOME - Home the selected logical disk to track 0.
0298: FBD3                ;	Before doing this, a check must be made to see if the
0299: FBD3                ;	physical disk buffer has information that must be
0300: FBD3                ;	written out. This is indicated by a flag, MustWriteBuffer,
0301: FBD3                ;	set in the de-blocking code
0302: FBD3                ;**********************	
0303: FBD3                HOME:               
0304: FBD3     3AE9FB     	LDA		MustWriteBuffer		; check flag
0305: FBD6     B7         	ORA		A             
0306: FBD7     C2DDFB     	JNZ		HomeNoWrite   
0307: FBDA     32E8FB     	STA		DataInDiskBuffer	; no, so indicate empty buffer
0308: FBDD                HomeNoWrite:        
0309: FBDD     0E00       	MVI		C,00H				; Set to track 0
0310: FBDF     CD58FB     	CALL	SETTRK				; no, physical, only logical
0311: FBE2     C9         	RET                
0312: FBE3                                    
0313: FBE3                ;*******************************************************************************
0314: FBE3                ;					 More tables  
0315: FBE3                ; Data written to or read from the mini-floppy drive is transferred via a
0316: FBE3                ; physical buffer that is actually 512 bytes long (it was declared at the front
0317: FBE3                ; of the BIOS and holds the "one-time" initialization code used for the
0318: FBE3                ; cold boot procedure.)
0319: FBE3                ;                   
0320: FBE3                ; The blocking/de-blocking code attempts to minimize the amount of actual
0321: FBE3                ; disk I/O by storing the disk,track, and physical sector currently residing
0322: FBE3                ; in the Physical Buffer. If a read request is for a 128 byte CP/M "sector"
0323: FBE3                ; that is already in the physical buffer, then no disk access occurs
0324: FBE3                ;*******************************************************************************
0325: FBE3                AllocationBlockSize		EQU		0800H		; 2048
0326: FBE3                PhysicalSecPerTrack		EQU		012H		; 18
0327: FBE3                CPMSecPerPhysical		EQU		PhysicalSectorSize/128
0328: FBE3                CPMSecPerTrack			EQU		CPMSecPerPhysical * PhysicalSecPerTrack
0329: FBE3                SectorMask				EQU		CPMSecPerPhysical - 1
0330: FBE3                SectorBitShift			EQU		02H			; LOG2(CPMSecPerPhysical)
0331: FBE3                                    
0332: FBE3                ;*******************************************************************************
0333: FBE3                ; These are the values handed over by the BDOS when it calls the Writer operation
0334: FBE3                ; The allocated.unallocated indicates whether the BDOS is set to write to an
0335: FBE3                ; unallocated allocation block (it only indicates this for the first 128 byte
0336: FBE3                ; sector write) or to an allocation block that has already been allocated to a
0337: FBE3                ; file. The BDOS also indicates if it is set to write to the file directory
0338: FBE3                ;*******************************************************************************
0339: FBE3                WriteAllocated			EQU		00H
0340: FBE3                WriteDirectory			EQU		01H
0341: FBE3                WriteUnallocated		EQU		02H
0342: FBE3                                    
0343: FBE3     00         WriteType				DB		00H		; The type of write indicated by BDOS
0344: FBE4                                    
0345: FBE4                	;       variables for physical sector
0346: FBE4                	; These are moved and compared as a group, DO NOT ALTER
0347: FBE4                InBufferDkTrkSec:   
0348: FBE4     00         InBufferDisk:			DB		00H
0349: FBE5     0000       InBufferTrack:			DW		00H
0350: FBE7     00         InBufferSector:			DB		00H
0351: FBE8                                    
0352: FBE8     00         DataInDiskBuffer:		DB		00H		; when non-zero, the disk buffer has data from disk
0353: FBE9                                    
0354: FBE9     00         MustWriteBuffer:		DB		00H		; Non-zero when data has been written into DiskBuffer,
0355: FBEA                										;	but not yet written out to the disk
0356: FBEA                										          
0357: FBEA                	;     variables for selected disk, track and sector
0358: FBEA                	; These are moved and compared as a group, DO NOT ALTER
0359: FBEA                SelectedDkTrkSec:   
0360: FBEA     00         SelectedDisk:			DB		00H
0361: FBEB     0000       SelectedTrack:			DW		00H
0362: FBED     00         SelectedSector:			DB		00H
0363: FBEE                                    
0364: FBEE                	;Selected physical sector derived from selected (CP/M) sector by shifting it
0365: FBEE                	;	right the number of of bits specified by SectorBitShift
0366: FBEE     00         SelectedPhysicalSector:	DB		00H
0367: FBEF                                    
0368: FBEF     00         SelectedDiskType:		DB		00H		; Set by SELDSK to indicate either , 8" or 5 1/4" floppy 
0369: FBF0     00         SelectedDiskDeblock:	DB		00H		; Set by SELDSK to indicate whether de-blocking is required
0370: FBF1                                    
0371: FBF1                	; Parameters for writing to a previously unallocated allocation block
0372: FBF1                	; These are moved and compared as a group, DO NOT ALTER
0373: FBF1                UnallocatedDkTrkSec:
0374: FBF1     00         UnallocatedDisk:		DB		00H
0375: FBF2     0000       UnallocatedTrack:		DW		00H
0376: FBF4     00         UnallocatedSector:		DB		00H
0377: FBF5     00         UnallocatedRecordCount	DB		00H		; Number of unallocated "records"in current previously unallocated allocation block.
0378: FBF6                                    
0379: FBF6     00         DiskErrorFlag:			DB		00H		; Non-Zero - unrecoverable error output "Bad Sector" message
0380: FBF7                                    
0381: FBF7                	; Flags used inside the de-blocking code
0382: FBF7     00         MustPrereadSector:		DB		00H		; non-zero if physical sector must be read into the disk buffer
0383: FBF8                										; either before a write to a allocated block can occur, or
0384: FBF8                										; for a normal CP/M 128 byte sector read
0385: FBF8     00         ReadOperation:			DB		00H		; Non-zero when a CP/M 128 byte sector is to be read
0386: FBF9     00         DeblockingRequired:		DB		00H		; Non-zero when the selected disk needs de-blocking (set in SELDSK)
0387: FBFA     00         DiskType:				DB		00H		; Indicate 8" or 5 1/4" selected  (set in SELDSK)
0388: FBFB                                    
0389: FBFB                ; 180/493           
0390: FBFB                                    
0391: FBFB                ;************************************************************************************************
0392: FBFB                ;        READ       
0393: FBFB                ; Read in the 128-byte CP/M sector specified by previous calls to select disk and to set track  and 
0394: FBFB                ; sector. The sector will be read into the address specified in the previous call to set DMA address
0395: FBFB                ;                   
0396: FBFB                ; If reading from a disk drive using sectors larger than 128 bytes, de-blocking code will be used
0397: FBFB                ; to unpack a 128-byte sector from  the physical sector. 
0398: FBFB                ;************************************************************************************************
0399: FBFB                READ:               
0400: FBFB     3AF9FB     		LDA		DeblockingRequired
0401: FBFE     B7         		ORA		A            
0402: FBFF     CA81FE     		JZ		ReadNoBlock			; if 0 use normal non-blocked read
0403: FC02                ; The de-blocking algorithm used is such that a read operation can be viewed UP until the actual
0404: FC02                ; data transfer as though it was the first write to an unallocated allocation block. 
0405: FC02     AF         		XRA		A					; set record count to 0
0406: FC03     3281FE     		STA		UnallocatedRecordCount
0407: FC06     3C         		INR		A            
0408: FC07     32F8FB     		STA		ReadOperation			; Indicate that this is a read
0409: FC0A     32F7FB     		STA		MustPreReadSector		; force pre-read
0410: FC0D     3E02       		MVI		A,WriteUnallocated		; fake de-blocking code into responding as if this
0411: FC0F     3281FE     		STA		WriteType				;  is the first write to an unallocated allocation block
0412: FC12     C36EFC     		JMP		PerformReadWrite		; use common code to execute read
0413: FC15                		                  
0414: FC15                ;************************************************************************************************
0415: FC15                ;		WRITE            
0416: FC15                ;Write a 128-byte sector from the current DMA address to the previously $elected disk, track, and sector.
0417: FC15                ;                   
0418: FC15                ; On arrival here, the BOOS will have set register C to indicate whether this write operation is to
0419: FC15                ; an already allocated allocation block (which means a pre-read of the sector may be needed),
0420: FC15                ; to the directory (in which case the data will be written to the disk immediately),
0421: FC15                ; or to the first 128-byte sector of a previously unallocated allocation block (In which case no pre-read is required).
0422: FC15                                    
0423: FC15                ; Only writes to the directory take place immediately. In all other cases, the data will be moved
0424: FC15                ; from the DMA address into the disk buffer, and only written out when circumstance, force the transfer.
0425: FC15                ; The number of physical disk operations can therefore be reduced considerably.
0426: FC15                ;************************************************************************************************
0427: FC15                WRITE:              
0428: FC15     3AF9FB     		LDA		DeblockingRequired
0429: FC18     B7         		ORA		A            
0430: FC19     CA81FE     		JZ		WriteNoBlock			; if 0 use normal non-blocked write
0431: FC1C                                    
0432: FC1C     AF         		XRA		A            
0433: FC1D     32F8FB     		STA		ReadOperation			; its a write (Not a read)
0434: FC20     79         		MOV		A,C          
0435: FC21     3281FE     		STA		WriteType				; save the BDOS write type
0436: FC24     FE02       		CPI		WriteUnallocated		; first write to an unallocated allocation block ?
0437: FC26     C237FC     		JNZ		CheckUnallocatedBlock	; No, - in the middle of writing to an unallocated block ?
0438: FC29                										; Yes, first write to unallocated allocation block. Initialize
0439: FC29                										; variables associated with unallocated writes
0440: FC29     3E10       		MVI		A,AllocationBlockSize/ 128	; Number of 128 byte sectors
0441: FC2B     3281FE     		STA		UnallocatedRecordCount
0442: FC2E     21EAFB     		LXI		H,SelectedDkTrkSec		; copy disk, track & sector into unallocated variables
0443: FC31     11F1FB     		LXI		D,UnallocatedDkTrkSec
0444: FC34     CD81FE     		CALL 	MoveDkTrackSec
0445: FC37                		                  
0446: FC37                	; Check if this is not the first write to an unallocated allocation block -- if it is,
0447: FC37                	; the unallocated record count has just been set to the number of 128-byte sectors in the allocation block
0448: FC37                CheckUnallocatedBlock:
0449: FC37     3A81FE     		LDA		UnallocatedRecordCount
0450: FC3A     B7         		ORA		A            
0451: FC3B     CA66FC     		JZ		RequestPreread			; No - write to an unallocated block
0452: FC3E     3D         		DCR		A						; decrement 128 byte sectors left
0453: FC3F     3281FE     		STA		UnallocatedRecordCount
0454: FC42                		                  
0455: FC42     21EAFB     		LXI		H,SelectedDkTrkSec		; same Disk, Track & sector as for those in an unallocated block
0456: FC45     11F1FB     		LXI		D,UnallocatedDkTrkSec
0457: FC48     CD29FD     		CALL	CompareDkTrkSec			; are they the same
0458: FC4B     C266FC     		JNZ		RequestPreread			; NO - do a pre-read
0459: FC4E                										;Compare$DkSTrkSec  returns with  DE -> Unallocated$Sector , HL -> UnallocatedSSector 
0460: FC4E     EB         		XCHG              
0461: FC4F     34         		INR	M             
0462: FC50     7E         		MOV		A,M          
0463: FC51     FE48       		CPI		CPMSecPerTrack			; Sector > maximum on track ?
0464: FC53     DA5FFC     		JC		NoTrackChange			; No ( A < M)
0465: FC56     3600       		MVI		M,00H					; Yes
0466: FC58     2AF2FB     		LHLD	UnallocatedTrack
0467: FC5B     23         		INX		H						; increment track 
0468: FC5C     22F2FB     		SHLD	UnallocatedTrack
0469: FC5F                NoTrackChange:      
0470: FC5F     AF         		XRA		A            
0471: FC60     32F7FB     		STA		MustPrereadSector		; clear flag
0472: FC63     C36EFC     		JMP		PerformReadWrite
0473: FC66                RequestPreread:     
0474: FC66     AF         		XRA		A            
0475: FC67     3281FE     		STA		UnallocatedRecordCount	; not a write into an unallocated block
0476: FC6A     3C         		INR		A            
0477: FC6B     32F7FB     		STA		MustPrereadSector		; set flag
0478: FC6E                ;*******************************************************
0479: FC6E                ; Common code to execute both reads and writes of 128-byte sectors	
0480: FC6E                ;*******************************************************	
0481: FC6E                PerformReadWrite:   
0482: FC6E     AF         		XRA		A				; Assume no disk error will occur
0483: FC6F     32F6FB     		STA		DiskErrorFlag
0484: FC72     3AEDFB     		LDA		SelectedSector
0485: FC75     1F         		RAR						; Convert selected 128-byte sector
0486: FC76     1F         		RAR						; into physical sector by dividing by 4
0487: FC77     E63F       		ANI		03FH			; remove unwanted bits
0488: FC79     32EEFB     		STA		SelectedPhysicalSector
0489: FC7C     21E8FB     		LXI		H,DataInDiskBuffer	; see if there is any data here ?
0490: FC7F     7E         		MOV		A,M          
0491: FC80     3601       		MVI		M,001H				; force there is data
0492: FC82     B7         		ORA		A					; any data here ?
0493: FC83     CAA3FC     		JZ		ReadSectorIntoBuffer	; NO - go read into buffer
0494: FC86                ;                   
0495: FC86                ;The buffer does have a physical sector in it.
0496: FC86                ; Note: The disk. track. and PHYSICAL sector in the buffer need to be checked,
0497: FC86                ; hence the use of the CompareDkTrk subroutine
0498: FC86                ;                   
0499: FC86     11E4FB     		LXI		D,InBufferDkTrkSec
0500: FC89     21EAFB     		LXI		H,SelectedDkTrkSec	; is it the same 
0501: FC8C     CD24FD     		CALL	CompareDkTrk		;    Disk and Track as selected ?
0502: FC8F     C29CFC     		JNZ		SectorNotInBuffer	; NO, it must be read
0503: FC92                ; it is in the buffer
0504: FC92     3AE7FB     		LDA		InBufferSector		; get the sector
0505: FC95     21EEFB     		LXI		H,SelectedPhysicalSector
0506: FC98     BE         		CMP		M					; Check if correct physical sector
0507: FC99     CAB1FC     		JZ		SectorInBuffer		; Yes - it is already in memory
0508: FC9C                		                  
0509: FC9C                ; No, it will have to be read in over current contents of buffer
0510: FC9C                SectorNotInBuffer:  
0511: FC9C     3AE9FB     		LDA		MustWriteBuffer
0512: FC9F     B7         		ORA		A					; do we need to write ?
0513: FCA0     C495FD     		CNZ		WritePhysical		; Yes - write it out
0514: FCA3                                    
0515: FCA3                ReadSectorIntoBuffer:
0516: FCA3     CD81FE     		CALL	SetInBufferDKTrkSec
0517: FCA6     3AF7FB     		LDA		MustPrereadSector	; do we need to pre-read
0518: FCA9     B7         		ORA		A            
0519: FCAA     C49AFD     		CNZ		ReadPhysical		; yes - pre-read the sector
0520: FCAD     AF         		XRA		A					; reset the flag
0521: FCAE     32E9FB     		STA		MustWriteBuffer
0522: FCB1                		                  
0523: FCB1                ; Selected sector on correct track and  disk is already 1n the buffer.
0524: FCB1                ; Convert the selected CP/M(128-byte sector into relative address down the buffer. 
0525: FCB1                SectorInBuffer:     
0526: FCB1     3AEDFB     		LDA		SelectedSector
0527: FCB4     E603       		ANI		SectorMask			; only want the least bits
0528: FCB6     6F         		MOV		L,A          
0529: FCB7     2600       		MVI		H,00H				; Multiply by 128
0530: FCB9     29         		DAD		H					; *2   
0531: FCBA     29         		DAD		H					; *4   
0532: FCBB     29         		DAD		H					; *8   
0533: FCBC     29         		DAD		H					; *16  
0534: FCBD     29         		DAD		H					; *32  
0535: FCBE     29         		DAD		H					; *64  
0536: FCBF     29         		DAD		H					; *128 
0537: FCC0     1181FE     		LXI		D,DiskBuffer 
0538: FCC3     19         		DAD		D					; HL -> 128-byte sector number start address
0539: FCC4     EB         		XCHG						; DE -> sector in the disk buffer
0540: FCC5     2A63FB     		LHLD	DMAAddress			; Get DMA address (set in SETDMA)
0541: FCC8     EB         		XCHG						; assume a read so :
0542: FCC9                									; DE -> DMA Address & HL -> sector in disk buffer
0543: FCC9     0E10       		MVI		C,128/8				; 8 bytes per move (loop count)
0544: FCCB                ;                   
0545: FCCB                ;  At this point -  
0546: FCCB                ;	C	->	loop count   
0547: FCCB                ;	DE	->	DMA address 
0548: FCCB                ;	HL	->	sector in disk buffer
0549: FCCB                ;                   
0550: FCCB     3AF8FB     		LDA		ReadOperation		; Move into or out of buffer /
0551: FCCE     B7         		ORA		A            
0552: FCCF     C2D7FC     		JNZ		BufferMove			; Move out of buffer
0553: FCD2                		                  
0554: FCD2     3C         		INR		A					; going to force a write
0555: FCD3     32E9FB     		STA		MustWriteBuffer
0556: FCD6     EB         		XCHG						; DE <--> HL
0557: FCD7                		                  
0558: FCD7                ;The following move loop moves eight bytes at a time from (HL> to (DE), C contains the loop count
0559: FCD7                BufferMove:         
0560: FCD7     7E         		MOV		A,M					; Get byte from source
0561: FCD8     12         		STAX	D					; Put into destination
0562: FCD9     13         		INX		D					; update pointers
0563: FCDA     23         		INX		H            
0564: FCDB                		                  
0565: FCDB     7E         		MOV		A,M					; Get byte from source
0566: FCDC     12         		STAX	D					; Put into destination
0567: FCDD     13         		INX		D					; update pointers
0568: FCDE     23         		INX		H            
0569: FCDF                		                  
0570: FCDF     7E         		MOV		A,M					; Get byte from source
0571: FCE0     12         		STAX	D					; Put into destination
0572: FCE1     13         		INX		D					; update pointers
0573: FCE2     23         		INX		H            
0574: FCE3                		                  
0575: FCE3     7E         		MOV		A,M					; Get byte from source
0576: FCE4     12         		STAX	D					; Put into destination
0577: FCE5     13         		INX		D					; update pointers
0578: FCE6     23         		INX		H            
0579: FCE7                		                  
0580: FCE7     7E         		MOV		A,M					; Get byte from source
0581: FCE8     12         		STAX	D					; Put into destination
0582: FCE9     13         		INX		D					; update pointers
0583: FCEA     23         		INX		H            
0584: FCEB                		                  
0585: FCEB     7E         		MOV		A,M					; Get byte from source
0586: FCEC     12         		STAX	D					; Put into destination
0587: FCED     13         		INX		D					; update pointers
0588: FCEE     23         		INX		H            
0589: FCEF                		                  
0590: FCEF     7E         		MOV		A,M					; Get byte from source
0591: FCF0     12         		STAX	D					; Put into destination
0592: FCF1     13         		INX		D					; update pointers
0593: FCF2     23         		INX		H            
0594: FCF3                		                  
0595: FCF3     7E         		MOV		A,M					; Get byte from source
0596: FCF4     12         		STAX	D					; Put into destination
0597: FCF5     13         		INX		D					; update pointers
0598: FCF6     23         		INX		H            
0599: FCF7                		                  
0600: FCF7     0D         		DCR		C					; count down on loop counter
0601: FCF8     C2D7FC     		JNZ		BufferMove			; repeat till done (CP/M sector moved)
0602: FCFB                ; end of loop		     
0603: FCFB     3A81FE     		LDA		WriteType			; write to directory ?
0604: FCFE     FE01       		CPI		WriteDirectory
0605: FD00     3AF6FB     		LDA		DiskErrorFlag		; get flag in case of a delayed read or write
0606: FD03     C0         		RNZ							; return if delayed read or write
0607: FD04                		                  
0608: FD04     B7         		ORA		A					; Any disk errors ?
0609: FD05     C0         		RNZ							; yes - abandon attempt to write to directory
0610: FD06                		                  
0611: FD06     AF         		XRA		A            
0612: FD07     32E9FB     		STA		MustWriteBuffer		; clear flag
0613: FD0A     CD95FD     		CALL	WritePhysical
0614: FD0D     3AF6FB     		LDA		DiskErrorFlag		; return error flag to caller
0615: FD10     C9         		RET               
0616: FD11                ;********************************************************************
0617: FD11                                    
0618: FD11                		                  
0619: FD11                ; indicates  selected disk, track, and sector now residing in buffer
0620: FD11                SetInBufferDKTrkSector:
0621: FD11     3AEAFB     		LDA		SelectedDisk 
0622: FD14     32E4FB     		STA		InBufferDisk 
0623: FD17     2AEBFB     		LHLD	SelectedTrack
0624: FD1A     22E5FB     		SHLD	InBufferTrack
0625: FD1D     3AEEFB     		LDA		SelectedPhysicalSector
0626: FD20     32E7FB     		STA		InBufferSector
0627: FD23     C9         		Ret               
0628: FD24                		                  
0629: FD24                CompareDkTrk:					;Compares just the disk and track   pointed to by DE and HL 
0630: FD24     0E03       		MVI		C,03H			; Disk(1), Track(2)
0631: FD26     C32BFD     		JMP		CompareDkTrkSecLoop
0632: FD29                CompareDkTrkSec:				;Compares just the disk and track   pointed to by DE and HL 
0633: FD29     0E04       		MVI		C,04H			; Disk(1), Track(2), Sector(1)
0634: FD2B                CompareDkTrkSecLoop:
0635: FD2B     1A         		LDAX	D            
0636: FD2C     BE         		CMP		M            
0637: FD2D     C0         		RNZ						; Not equal
0638: FD2E     13         		INX	D             
0639: FD2F     23         		INX	H             
0640: FD30     0D         		DCR		C            
0641: FD31     C8         		RZ						; return they match (zero flag set)
0642: FD32     C32BFD     		JMP		CompareDkTrkSecLoop	; keep going
0643: FD35                                    
0644: FD35                ;********************************************************************
0645: FD35                                    
0646: FD35                ;Moves the disk, track, and sector variables pointed at by HL to those pointed at by DE 
0647: FD35                MoveDkTrkSec:       
0648: FD35     0E04       		MVI		C,04H			; Disk(1), Track(2), Sector(1)
0649: FD37                MoveDkTrkSecLoop:   
0650: FD37     7E         		MOV		A,M          
0651: FD38     12         		STAX	D            
0652: FD39     13         		INX		D            
0653: FD3A     23         		INX		H            
0654: FD3B     0D         		DCR		C            
0655: FD3C     C8         		RZ					; exit loop done
0656: FD3D     C337FD     		JMP		MoveDkTrkSecLoop
0657: FD40                		                  
0658: FD40                ;**************************************************************************************************
0659: FD40                ;  There are two "smart" disk controllers on this system, one for the 8" floppy diskette drives,
0660: FD40                ; and one for the 5 1/4" mini-diskette drives
0661: FD40                ;                   
0662: FD40                ;  The controllers are "hard-wired" to monitor certain locations in memory to detect when they are to
0663: FD40                ; perform some disk operation. The 8" controller monitors location 0040H, and the 5 1/4 controller
0664: FD40                ; monitors location 0045H. These are called their disk control bytes.
0665: FD40                ; If the most significant bit of  disk control byte is set, the controller will look at the word
0666: FD40                ; following the respective control bytes. This word must contain the address of  valid disk control
0667: FD40                ; table that specifies the exact disk operation to be performed.
0668: FD40                ;                   
0669: FD40                ;  Once the operation has been completed. the controller resets its disk control byte to OOH.
0670: FD40                ; This indicates completion to the disk driver code.
0671: FD40                ;                   
0672: FD40                ;  The controller also sets a return code in a disk status block -both controllers use the SAME location
0673: FD40                ; for this, 0043H. If the first byte of this status block is less than 80H. then a disk error
0674: FD40                ; has occurred. For this simple BIOS. no further details of the status settings are relevant.
0675: FD40                ; Note that the disk controller has built-in retry logic -- reads and writes are attempted
0676: FD40                ; ten times before the controller returns an error
0677: FD40                ;                   
0678: FD40                ;  The disk control table layout is shown below. Note that the controllers have the capability
0679: FD40                ; for control tables to be chained together so that a sequence of disk operations can be initiated.
0680: FD40                ; In this BIOS this feature is not used. However. the controller requires that the chain pointers
0681: FD40                ; in the disk control tables be pointed back to the main control bytes in order to indicate
0682: FD40                ; the end of the chain
0683: FD40                ;**************************************************************************************************
0684: FD40                                    
0685: FD40                DiskControl8	EQU	040H	; 8" control byte
0686: FD40                CommandBlock8	EQU	041H	; Control Table Pointer
0687: FD40                                    
0688: FD40                DiskStatusBlock	EQU	043H	; 8" and 5 1/4" status block
0689: FD40                                    
0690: FD40                DiskControl5	EQU	045H	; 8" control byte
0691: FD40                CommandBlock5	EQU	046H	; Control Table Pointer
0692: FD40                                    
0693: FD40                ;***************************************************************************
0694: FD40                ;					Floppy Disk Control tables
0695: FD40                ;***************************************************************************
0696: FD40     00         FloppyCommand:	DB	00H		; Command
0697: FD41                FloppyReadCode	EQU	01H
0698: FD41                FloppyWriteCode	EQU	02H
0699: FD41     00         FloppyUnit:		DB	00H		; unit (drive) number = 0 or 1
0700: FD42     00         FloppyHead:		DB	00H		; head number = 0 or 1
0701: FD43     00         FloppyTrack:	DB	00H		; track number
0702: FD44     00         FloppySector:	DB	00H		; sector number
0703: FD45     0000       FloppyByteCount:	DW	0000H	; number of bytes to read/write
0704: FD47     0000       FloppyDMAAddress:	DW	0000H	; transfer address
0705: FD49     0000       FloppyNextStatusBlock:	DW	0000H	; pointer to next status block
0706: FD4B     0000       FloppyNextControlLocation:	DW	0000H	; pointer to next control byte
0707: FD4D                                    
0708: FD4D                ; Write contents of disk buffer to correct sector
0709: FD4D                WriteNoDeblock:     
0710: FD4D     3E02       	MVI		A,FloppyWriteCode	; get write function code
0711: FD4F     C354FD     	JMP		CommonNoDeblock
0712: FD52                ;Read previously selected sector into disk buffer
0713: FD52                ReadNoDeblock:      
0714: FD52     3E01       	MVI		A,FloppyReadCode	; get read function code
0715: FD54                CommonNoDeblock:    
0716: FD54     3240FD     	STA		FloppyCommand		; set the correct command code
0717: FD57     218000     	LXI		H,128				; bytes per sector
0718: FD5A     2245FD     	SHLD	FloppyByteCount
0719: FD5D     AF         	XRA		A					; 8" has only head 0
0720: FD5E     3242FD     	STA		FloppyHead    
0721: FD61                	                   
0722: FD61     3AEAFB     	LDA		SelectedDisk		; insure only disk 0 or 1
0723: FD64     E601       	ANI		01H           
0724: FD66     3241FD     	STA		FloppyUnit			; set the unit number
0725: FD69                	                   
0726: FD69     3AEBFB     	LDA		SelectedTrack 
0727: FD6C     3243FD     	STA		FloppyTrack			; set track number
0728: FD6F                	                   
0729: FD6F     3AEDFB     	LDA		SelectedSector
0730: FD72     3244FD     	STA		FloppySector		; set sector
0731: FD75                	                   
0732: FD75     2A63FB     	LHLD	DMAAddress    
0733: FD78     2247FD     	SHLD	FloppyDMAAddress	; set transfer address
0734: FD7B                	                   
0735: FD7B                ;  The disk controller can accept chained disk control tables, but in this case
0736: FD7B                ; they are not used. so the "Next" pointers must be pointed back at the initial
0737: FD7B                ; control bytes in the base page. 
0738: FD7B     214300     	LXI		H,DiskStatusBlock
0739: FD7E     2249FD     	SHLD	FloppyNextStatusBlock	; set pointer back to start
0740: FD81     214000     	LXI		H,DiskControl8
0741: FD84     224BFD     	SHLD	FloppyNextControlLocation	; set pointer back to start
0742: FD87     2140FD     	LXI		H,FloppyCommand
0743: FD8A     224100     	SHLD	CommandBlock8 
0744: FD8D                	                   
0745: FD8D     214000     	LXI		H,DiskControl8
0746: FD90     3680       	MVI		M,080H				; activate the controller to perform operation
0747: FD92     C3F7FD     	JMP		WaitForDiskComplete
0748: FD95                	                   
0749: FD95                ;Write contents of disk buffer to correct sector
0750: FD95                WritePhysical:      
0751: FD95     3E02       	MVI		A,FloppyWriteCode	; get write function
0752: FD97     C39CFD     	JMP		CommonPhysical
0753: FD9A                ReadPhysical:       
0754: FD9A     3E01       	MVI		A,FloppyReadCode	; get read function
0755: FD9C                CommonPhysical:     
0756: FD9C     3240FD     	STA		FloppyCommand		; set the command
0757: FD9F                	                   
0758: FD9F     3AFAFB     	LDA		DiskType      
0759: FDA2     FE01       	CPI		Floppy5				; is it 5 1/4 ?
0760: FDA4     CAADFD     	JZ		CorrectDisktype		; yes
0761: FDA7     3E01       	MVI		A,1           
0762: FDA9     3209FE     	STA		DiskError			; no set error and exit
0763: FDAC     C9         	RET                
0764: FDAD                CorrectDisktype:    
0765: FDAD     3AE4FB     	LDA		InBufferDisk  
0766: FDB0     E601       	ANI		01H					; only units 0 or 1
0767: FDB2     3241FD     	STA		FloppyUnit			; set disk
0768: FDB5     2AE5FB     	LHLD	InBufferTrack 
0769: FDB8     7D         	MOV		A,L					; for this controller it is a byte value
0770: FDB9     3243FD     	STA		FloppyTrack			; set track
0771: FDBC                ;  The sector must be converted into a head number and sector number.
0772: FDBC                ; Sectors 0 - 8 are head 0, 9 - 17 , are head 1 
0773: FDBC     0600       	MVI		B,0					; assume head 0
0774: FDBE     3AE7FB     	LDA		InBufferSector
0775: FDC1     4F         	MOV		C,A					; save copy
0776: FDC2     FE09       	CPI		09H           
0777: FDC4     DACBFD     	JC		Head0          
0778: FDC7     D609       	SUI		09H					; Modulo sector
0779: FDC9     4F         	MOV		C,A           
0780: FDCA     04         	INR		B					; set head to 1
0781: FDCB                Head0:              
0782: FDCB     78         	MOV		A,B           
0783: FDCC     3242FD     	STA		FloppyHead			; set head number
0784: FDCF     79         	MOV		A,C           
0785: FDD0     3C         	INR		A					; physical sectors start at 1
0786: FDD1     3244FD     	STA		FloppySector		; set sector
0787: FDD4     210002     	LXI		H,PhysicalSectorSize
0788: FDD7     2245FD     	SHLD	FloppyByteCount		; set byte count
0789: FDDA     2181FE     	LXI		H,DiskBuffer  
0790: FDDD     2247FD     	SHLD	FloppyDMAAddress	; set transfer address
0791: FDE0                ;	As only one control table is in use, close the status and busy chain pointers
0792: FDE0                ;  back to the main control bytes
0793: FDE0     214300     	LXI		H,DiskStatusBlock
0794: FDE3     2249FD     	SHLD	FloppyNextStatusBlock
0795: FDE6     214500     	LXI		H,DiskControl5
0796: FDE9     224BFD     	SHLD	FloppyNextControlLocation
0797: FDEC     2140FD     	LXI		H,FloppyCommand
0798: FDEF     224600     	SHLD	CommandBlock5 
0799: FDF2                	                   
0800: FDF2     214500     	LXI		H,DiskControl5		; activate 5 1/4" disk controller
0801: FDF5     3680       	MVI		M,080H        
0802: FDF7                                    
0803: FDF7                ;Wait until Disk Status Block indicates , operation complete, then check 
0804: FDF7                ; if any errors occurred. ,On entry HL -> disk control byte	
0805: FDF7                WaitForDiskComplete:
0806: FDF7     7E         	MOV		A,M				; get control bytes
0807: FDF8     B7         	ORA		A             
0808: FDF9     C2F7FD     	JNZ		WaitForDiskComplete	; operation not done
0809: FDFC                	                   
0810: FDFC     3A4300     	LDA		DiskStatusBlock		; done , so now check status
0811: FDFF     FE80       	CPI		080H          
0812: FE01     DA09FE     	JC		DiskError      
0813: FE04     AF         	XRA		A             
0814: FE05     32F6FB     	STA		DiskErrorFlag		; clear the flag
0815: FE08     C9         	RET                
0816: FE09                	                   
0817: FE09                DiskError:          
0818: FE09     3E01       	MVI		A,1           
0819: FE0B     32F6FB     	STA		DiskErrorFlag		; set the error flag
0820: FE0E     C9         	RET                
0821: FE0F                	                   
0822: FE0F                ;**********************************************************************************
0823: FE0F                ;		Disk Control table image for warm boot
0824: FE0F                ;**********************************************************************************
0825: FE0F                BootControlPart1:   
0826: FE0F     01         	DB	01H				; Read function
0827: FE10     00         	DB	00H				; unit number
0828: FE11     00         	DB	00H				; head number
0829: FE12     00         	DB	00H				; track number
0830: FE13     02         	DB	02H				; Starting sector number
0831: FE14     0010       	DW	8 * 512			; Number of bytes to read
0832: FE16     81FE       	DW	CCPEntry		; read into this address
0833: FE18     4300       	DW	DiskStatusBlock	; pointer to next block
0834: FE1A     4500       	DW	DiskControl5	; pointer to next table
0835: FE1C                BootControlPart2:   
0836: FE1C     01         	DB	01H				; Read function
0837: FE1D     00         	DB	00H				; unit number
0838: FE1E     01         	DB	01H				; head number
0839: FE1F     00         	DB	00H				; track number
0840: FE20     01         	DB	01H				; Starting sector number
0841: FE21     0006       	DW	3 * 512			; Number of bytes to read
0842: FE23     820E       	DW	CCPEntry + ( 8 * 512)		; read into this address
0843: FE25     4300       	DW	DiskStatusBlock	; pointer to next block
0844: FE27     4500       	DW	DiskControl5	; pointer to next table
0845: FE29                                    
0846: FE29                ;**********************************************************************************	
0847: FE29                ;						Warm Boot    
0848: FE29                ;  On warm boot. the CCP and BDOS must be reloaded into memory.
0849: FE29                ; In this BIOS. only the 5 1/4" diskettes will be used.
0850: FE29                ; Therefore this code is hardware specific to the controller.
0851: FE29                ; Two prefabricated control tables are used.
0852: FE29                ;**********************************************************************************	
0853: FE29                WBOOT:              
0854: FE29     318000     	LXI		SP,080H       
0855: FE2C     110FFE     	LXI		D,BootControlPart1
0856: FE2F     CD3BFE     	CALL	WarmBootRead  
0857: FE32                	                   
0858: FE32     111CFE     	LXi		D,BootControlPart2
0859: FE35     CD3BFE     	CALL	WarmBootRead  
0860: FE38     C381FE     	JMP		EnterCPM      
0861: FE3B                	                   
0862: FE3B                WarmBootRead:       
0863: FE3B     2140FD     	LXI		H,FloppyCommand
0864: FE3E     224600     	SHLD	CommandBlock5 
0865: FE41     0E0D       	MVI		C,13				; set byte count
0866: FE43                WarmByteMove:       
0867: FE43     1A         	LDAX	D             
0868: FE44     77         	MOV		M,A           
0869: FE45     23         	INX		H             
0870: FE46     13         	INX		D             
0871: FE47     0D         	DCR		C             
0872: FE48     C243FE     	JNZ		WarmByteMove  
0873: FE4B                	                   
0874: FE4B     214500     	LXI		H,DiskControl5
0875: FE4E     3680       	MVI		M,080H			; activate the controller
0876: FE50                	                   
0877: FE50                WaitForBootComplete:
0878: FE50     7E         	MOV		A,M           
0879: FE51     B7         	ORA		A             
0880: FE52     C250FE     	JNZ		WaitForBootComplete
0881: FE55                	                   
0882: FE55     3A4300     	LDA		DiskStatusBlock
0883: FE58     FE80       	CPI		080H		; any errors ?
0884: FE5A     DA5EFE     	JC		WarmBootError	; Yup
0885: FE5D     C9         	RET                
0886: FE5E                                    
0887: FE5E                WarmBootError:      
0888: FE5E     2167FE     	LXI		H,WarmBootErroMessage
0889: FE61     CD81FE     	CALL	DisplayMessage
0890: FE64     C329FE     	JMP		WBOOT         
0891: FE67                	                   
0892: FE67                WarmBootErroMessage:
0893: FE67     0D0A       	DB		0DH,0AH        
0894: FE69     5761726D20 	DB		057H,061H,072H,06DH,020H				; Warm
0895: FE6E     426F6F7420 	DB		042H,06FH,06FH,074H,020H				; Boot
0896: FE73     7265744879696E67 	DB		072H,065H,074H,072,079H,069H,06EH,067H	;retrying
0897: FE7B     2E2E2E0D0A 	DB		02EH,02EH,02EH,0DH,0AH
0898: FE80     00         	DB		00H            
0899: FE81                End:                
0900: FE81                                    
0901: FE81                CCPEntry:	          
0902: FE81                DISKBUFFER:         
0903: FE81                DisplayMessage:     
0904: FE81                EnterCPM:           
0905: FE81                MOVEDKTRACKSEC:     
0906: FE81                ReadNoBlocK:        
0907: FE81                ;READPHYSICAL:      
0908: FE81                SETINBUFFERDKTRKSEC:
0909: FE81                UNALLOCATEDRECORDCOUNT:
0910: FE81                UNALLOCATEDRECORDCOUNT:
0911: FE81                ;WRITEPHYSICAL:     
0912: FE81                WRITENOBLOCK:       
0913: FE81                WRITETYPE:          
0914: FE81                                    
0915: FE81                CodeEnd:            
0916: FE81                			END              
0917: FE81                                    




                                    Xref


0000	0000	$                             		

0325	0800	ALLOCATIONBLOCKSIZE           		  0440,

0825	FE0F	BOOTCONTROLPART1              		  0855,
0835	FE1C	BOOTCONTROLPART2              		  0858,
0559	FCD7	BUFFERMOVE                    		  0552,  0601,

0901	FE81	CCPENTRY                      		  0832,  0842,
0448	FC37	CHECKUNALLOCATEDBLOCK         		  0437,
0915	FE81	CODEEND                       		
0007	F981	CODESTART                     		
0691	0046	COMMANDBLOCK5                 		  0798,  0864,
0686	0041	COMMANDBLOCK8                 		  0743,
0715	FD54	COMMONNODEBLOCK               		  0711,
0755	FD9C	COMMONPHYSICAL                		  0752,
0629	FD24	COMPAREDKTRK                  		  0501,
0632	FD29	COMPAREDKTRKSEC               		  0457,
0634	FD2B	COMPAREDKTRKSECLOOP           		  0631,  0642,
0764	FDAD	CORRECTDISKTYPE               		  0760,
0327	0004	CPMSECPERPHYSICAL             		  0328,  0329,
0328	0048	CPMSECPERTRACK                		  0463,

0352	FBE8	DATAINDISKBUFFER              		  0307,  0489,
0386	FBF9	DEBLOCKINGREQUIRED            		  0204,  0400,  0428,
0087	F9C1	DIRECTORYBUFFER               		  0058,  0066,  0074,  0082,
0153	FAC1	DISKAALLOCATIONVECTOR         		  0061,
0140	FA61	DISKAWORKAREA                 		  0060,
0154	FAD7	DISKBALLOCATIONVECTOR         		  0069,
0902	FE81	DISKBUFFER                    		  0537,  0789,
0141	FA81	DISKBWORKAREA                 		  0068,
0156	FAED	DISKCALLOCATIONVECTOR         		  0077,
0690	0045	DISKCONTROL5                  		  0795,  0800,  0834,  0844,  0874,
0685	0040	DISKCONTROL8                  		  0740,  0745,
0142	FAA1	DISKCWORKAREA                 		  0076,
0157	FB0C	DISKDALLOCATIONVECTOR         		  0085,
0143	FAB1	DISKDWORKAREA                 		  0084,
0817	FE09	DISKERROR                     		  0762,  0812,
0379	FBF6	DISKERRORFLAG                 		  0483,  0605,  0614,  0814,  0819,
0053	F981	DISKPARAMETERHEADERS          		  0185,
0688	0043	DISKSTATUSBLOCK               		  0738,  0793,  0810,  0833,  0843,  0882,
0387	FBFA	DISKTYPE                      		  0201,  0758,
0903	FE81	DISPLAYMESSAGE                		  0889,
0231	FB63	DMAADDRESS                    		  0235,  0540,  0732,

0899	FE81	END                           		
0904	FE81	ENTERCPM                      		  0860,

0090	0001	FLOPPY5                       		  0102,  0759,
0104	FA42	FLOPPY5PARAMETERBLOCK         		  0059,  0067,
0249	FB6B	FLOPPY5SKEWTABLE              		  0056,  0064,  0080,
0091	0002	FLOPPY8                       		  0119,
0122	FA52	FLOPPY8PARAMETERBLOCK         		  0075,  0083,
0273	FBB3	FLOPPY8SKEWTABLE              		  0072,
0703	FD45	FLOPPYBYTECOUNT               		  0718,  0788,
0696	FD40	FLOPPYCOMMAND                 		  0716,  0742,  0756,  0797,  0863,
0704	FD47	FLOPPYDMAADDRESS              		  0733,  0790,
0700	FD42	FLOPPYHEAD                    		  0720,  0783,
0706	FD4B	FLOPPYNEXTCONTROLLOCATION     		  0741,  0796,
0705	FD49	FLOPPYNEXTSTATUSBLOCK         		  0739,  0794,
0697	0001	FLOPPYREADCODE                		  0714,  0754,
0702	FD44	FLOPPYSECTOR                  		  0730,  0786,
0701	FD43	FLOPPYTRACK                   		  0727,  0770,
0699	FD41	FLOPPYUNIT                    		  0724,  0767,
0698	0002	FLOPPYWRITECODE               		  0710,  0751,

0781	FDCB	HEAD0                         		  0777,
0303	FBD3	HOME                          		
0308	FBDD	HOMENOWRITE                   		  0306,

0348	FBE4	INBUFFERDISK                  		  0622,  0765,
0347	FBE4	INBUFFERDKTRKSEC              		  0499,
0350	FBE7	INBUFFERSECTOR                		  0504,  0626,  0774,
0349	FBE5	INBUFFERTRACK                 		  0624,  0768,

0905	FE81	MOVEDKTRACKSEC                		  0444,
0647	FD35	MOVEDKTRKSEC                  		
0649	FD37	MOVEDKTRKSECLOOP              		  0656,
0382	FBF7	MUSTPREREADSECTOR             		  0409,  0471,  0477,  0517,
0354	FBE9	MUSTWRITEBUFFER               		  0304,  0511,  0521,  0555,  0612,

0094	0080	NEEDDEBLOCKING                		  0102,  0203,
0469	FC5F	NOTRACKCHANGE                 		  0464,
0159	FB2B	NUMBEROFLOGICALDISKS          		  0172,

0481	FC6E	PERFORMREADWRITE              		  0412,  0472,
0326	0012	PHYSICALSECPERTRACK           		  0328,
0008	0200	PHYSICALSECTORSIZE            		  0327,  0787,

0399	FBFB	READ                          		
0906	FE81	READNOBLOCK                   		  0402,
0713	FD52	READNODEBLOCK                 		
0385	FBF8	READOPERATION                 		  0408,  0433,  0550,
0753	FD9A	READPHYSICAL                  		  0519,
0515	FCA3	READSECTORINTOBUFFER          		  0493,
0473	FC66	REQUESTPREREAD                		  0451,  0458,

0330	0002	SECTORBITSHIFT                		
0525	FCB1	SECTORINBUFFER                		  0507,
0329	0003	SECTORMASK                    		  0527,
0510	FC9C	SECTORNOTINBUFFER             		  0502,
0289	FBCD	SECTRAN                       		
0169	FB2B	SELDSK                        		
0360	FBEA	SELECTEDDISK                  		  0175,  0621,  0722,
0369	FBF0	SELECTEDDISKDEBLOCK           		
0368	FBEF	SELECTEDDISKTYPE              		
0359	FBEA	SELECTEDDKTRKSEC              		  0442,  0455,  0500,
0366	FBEE	SELECTEDPHYSICALSECTOR        		  0488,  0505,  0625,
0362	FBED	SELECTEDSECTOR                		  0224,  0484,  0526,  0729,
0361	FBEB	SELECTEDTRACK                 		  0215,  0623,  0726,
0232	FB65	SETDMA                        		
0908	FE81	SETINBUFFERDKTRKSEC           		  0516,
0620	FD11	SETINBUFFERDKTRKSECTOR        		
0222	FB5E	SETSEC                        		
0212	FB58	SETTRK                        		  0310,

0374	FBF1	UNALLOCATEDDISK               		
0373	FBF1	UNALLOCATEDDKTRKSEC           		  0443,  0456,
0909	FE81	UNALLOCATEDRECORDCOUNT        		  0406,  0441,  0449,  0453,  0475,
0376	FBF4	UNALLOCATEDSECTOR             		
0375	FBF2	UNALLOCATEDTRACK              		  0466,  0468,

0877	FE50	WAITFORBOOTCOMPLETE           		  0880,
0805	FDF7	WAITFORDISKCOMPLETE           		  0747,  0808,
0892	FE67	WARMBOOTERROMESSAGE           		  0888,
0887	FE5E	WARMBOOTERROR                 		  0884,
0862	FE3B	WARMBOOTREAD                  		  0856,  0859,
0866	FE43	WARMBYTEMOVE                  		  0872,
0853	FE29	WBOOT                         		  0890,
0427	FC15	WRITE                         		
0339	0000	WRITEALLOCATED                		
0340	0001	WRITEDIRECTORY                		  0604,
0912	FE81	WRITENOBLOCK                  		  0430,
0709	FD4D	WRITENODEBLOCK                		
0750	FD95	WRITEPHYSICAL                 		  0513,  0613,
0913	FE81	WRITETYPE                     		  0411,  0435,  0603,
0341	0002	WRITEUNALLOCATED              		  0410,  0436,
